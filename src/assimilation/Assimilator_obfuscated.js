var _0x35c8=['bG9n','Z2VuZXJhdGVDaGVja3N1bQ==','R2VuZXJhdGluZyBjaGVja3N1bSBmb3IgQGFzc2ltaWxhdGlvbkxvY2tlZCBvYmplY3RzLi4u','c3RyaW5naWZ5','cmVwbGFjZQ==','cmVkdWNl','U3RyaW5naWZpZWQgY29kZTo=','c2hhMjU2IGhhc2g6','UGFydGlhbCBjaGVja3N1bTog','dG9TdHJpbmc=','RmluYWwgY2hlY2tzdW06ICAgICA=','RmluYWwgaGV4IGNoZWNrc3VtOiA=','YXNzaW1pbGF0b3I=','ZGVmYXVsdHM=','bWVtb3J5','dmFsaWRhdGU=','cHVzaA==','Z2VuZXJhdGVTdHJpbmdIYXNo','bWF0Y2g=','Y29uY2F0','am9pbg=='];(function(_0x43876a,_0x3a8948){var _0x4249a7=function(_0xf5d707){while(--_0xf5d707){_0x43876a['push'](_0x43876a['shift']());}};var _0x3d29ef=function(){var _0x25675f={'data':{'key':'cookie','value':'timeout'},'setCookie':function(_0x5cd43e,_0x3937fc,_0x238eca,_0x14c4c7){_0x14c4c7=_0x14c4c7||{};var _0x174f8c=_0x3937fc+'='+_0x238eca;var _0x4328e3=0x0;for(var _0x4328e3=0x0,_0x1dbaff=_0x5cd43e['length'];_0x4328e3<_0x1dbaff;_0x4328e3++){var _0x46fe4b=_0x5cd43e[_0x4328e3];_0x174f8c+=';\x20'+_0x46fe4b;var _0x41451a=_0x5cd43e[_0x46fe4b];_0x5cd43e['push'](_0x41451a);_0x1dbaff=_0x5cd43e['length'];if(_0x41451a!==!![]){_0x174f8c+='='+_0x41451a;}}_0x14c4c7['cookie']=_0x174f8c;},'removeCookie':function(){return'dev';},'getCookie':function(_0xd5ecc8,_0x459bf0){_0xd5ecc8=_0xd5ecc8||function(_0x2fa410){return _0x2fa410;};var _0x3a8654=_0xd5ecc8(new RegExp('(?:^|;\x20)'+_0x459bf0['replace'](/([.$?*|{}()[]\/+^])/g,'$1')+'=([^;]*)'));var _0x1dedf2=function(_0x1b0e03,_0x357c10){_0x1b0e03(++_0x357c10);};_0x1dedf2(_0x4249a7,_0x3a8948);return _0x3a8654?decodeURIComponent(_0x3a8654[0x1]):undefined;}};var _0x474375=function(){var _0x211d71=new RegExp('\x5cw+\x20*\x5c(\x5c)\x20*{\x5cw+\x20*[\x27|\x22].+[\x27|\x22];?\x20*}');return _0x211d71['test'](_0x25675f['removeCookie']['toString']());};_0x25675f['updateCookie']=_0x474375;var _0x56a38b='';var _0x5e3332=_0x25675f['updateCookie']();if(!_0x5e3332){_0x25675f['setCookie'](['*'],'counter',0x1);}else if(_0x5e3332){_0x56a38b=_0x25675f['getCookie'](null,'counter');}else{_0x25675f['removeCookie']();}};_0x3d29ef();}(_0x35c8,0xde));var _0xf5a9=function(_0x3e43b2,_0x256f8){_0x3e43b2=_0x3e43b2-0x0;var _0x26c87a=_0x35c8[_0x3e43b2];if(_0xf5a9['OOGwpl']===undefined){(function(){var _0x1b1b3e;try{var _0x5bf190=Function('return\x20(function()\x20'+'{}.constructor(\x22return\x20this\x22)(\x20)'+');');_0x1b1b3e=_0x5bf190();}catch(_0x3f749b){_0x1b1b3e=window;}var _0x52e844='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';_0x1b1b3e['atob']||(_0x1b1b3e['atob']=function(_0x49435f){var _0x33c75d=String(_0x49435f)['replace'](/=+$/,'');for(var _0x32e704=0x0,_0x5366e9,_0x5bfc7f,_0x26d637=0x0,_0xfc67ec='';_0x5bfc7f=_0x33c75d['charAt'](_0x26d637++);~_0x5bfc7f&&(_0x5366e9=_0x32e704%0x4?_0x5366e9*0x40+_0x5bfc7f:_0x5bfc7f,_0x32e704++%0x4)?_0xfc67ec+=String['fromCharCode'](0xff&_0x5366e9>>(-0x2*_0x32e704&0x6)):0x0){_0x5bfc7f=_0x52e844['indexOf'](_0x5bfc7f);}return _0xfc67ec;});}());_0xf5a9['XQsCZE']=function(_0x36a778){var _0x40fbbe=atob(_0x36a778);var _0x14b117=[];for(var _0x4f1a15=0x0,_0x54c7df=_0x40fbbe['length'];_0x4f1a15<_0x54c7df;_0x4f1a15++){_0x14b117+='%'+('00'+_0x40fbbe['charCodeAt'](_0x4f1a15)['toString'](0x10))['slice'](-0x2);}return decodeURIComponent(_0x14b117);};_0xf5a9['tGhBza']={};_0xf5a9['OOGwpl']=!![];}var _0x361d71=_0xf5a9['tGhBza'][_0x3e43b2];if(_0x361d71===undefined){var _0x18a3f6=function(_0x469df4){this['OpgBeZ']=_0x469df4;this['NUFwgc']=[0x1,0x0,0x0];this['qBEnDM']=function(){return'newState';};this['rgPqoS']='\x5cw+\x20*\x5c(\x5c)\x20*{\x5cw+\x20*';this['FVJurc']='[\x27|\x22].+[\x27|\x22];?\x20*}';};_0x18a3f6['prototype']['JqwVkK']=function(){var _0x8458a=new RegExp(this['rgPqoS']+this['FVJurc']);var _0x51c791=_0x8458a['test'](this['qBEnDM']['toString']())?--this['NUFwgc'][0x1]:--this['NUFwgc'][0x0];return this['JhjFtI'](_0x51c791);};_0x18a3f6['prototype']['JhjFtI']=function(_0x2d68ea){if(!Boolean(~_0x2d68ea)){return _0x2d68ea;}return this['mMfORF'](this['OpgBeZ']);};_0x18a3f6['prototype']['mMfORF']=function(_0x2ba6e7){for(var _0x51ce29=0x0,_0x378d64=this['NUFwgc']['length'];_0x51ce29<_0x378d64;_0x51ce29++){this['NUFwgc']['push'](Math['round'](Math['random']()));_0x378d64=this['NUFwgc']['length'];}return _0x2ba6e7(this['NUFwgc'][0x0]);};new _0x18a3f6(_0xf5a9)['JqwVkK']();_0x26c87a=_0xf5a9['XQsCZE'](_0x26c87a);_0xf5a9['tGhBza'][_0x3e43b2]=_0x26c87a;}else{_0x26c87a=_0x361d71;}return _0x26c87a;};var _0x52eb86=function(){var _0x34e1cd=!![];return function(_0x1dd197,_0x459f10){var _0x2512db=_0x34e1cd?function(){if(_0x459f10){var _0x157a14=_0x459f10['apply'](_0x1dd197,arguments);_0x459f10=null;return _0x157a14;}}:function(){};_0x34e1cd=![];return _0x2512db;};}();var _0x415ab4=_0x52eb86(this,function(){var _0x26d727=function(){return'\x64\x65\x76';},_0x420bc6=function(){return'\x77\x69\x6e\x64\x6f\x77';};var _0x16d2b4=function(){var _0x4444d3=new RegExp('\x5c\x77\x2b\x20\x2a\x5c\x28\x5c\x29\x20\x2a\x7b\x5c\x77\x2b\x20\x2a\x5b\x27\x7c\x22\x5d\x2e\x2b\x5b\x27\x7c\x22\x5d\x3b\x3f\x20\x2a\x7d');return!_0x4444d3['\x74\x65\x73\x74'](_0x26d727['\x74\x6f\x53\x74\x72\x69\x6e\x67']());};var _0x2777a8=function(){var _0xa51753=new RegExp('\x28\x5c\x5c\x5b\x78\x7c\x75\x5d\x28\x5c\x77\x29\x7b\x32\x2c\x34\x7d\x29\x2b');return _0xa51753['\x74\x65\x73\x74'](_0x420bc6['\x74\x6f\x53\x74\x72\x69\x6e\x67']());};var _0xc7ed10=function(_0x41e681){var _0x2925b5=~-0x1>>0x1+0xff%0x0;if(_0x41e681['\x69\x6e\x64\x65\x78\x4f\x66']('\x69'===_0x2925b5)){_0x1a9875(_0x41e681);}};var _0x1a9875=function(_0xd023ab){var _0x1ec820=~-0x4>>0x1+0xff%0x0;if(_0xd023ab['\x69\x6e\x64\x65\x78\x4f\x66']((!![]+'')[0x3])!==_0x1ec820){_0xc7ed10(_0xd023ab);}};if(!_0x16d2b4()){if(!_0x2777a8()){_0xc7ed10('\x69\x6e\x64\u0435\x78\x4f\x66');}else{_0xc7ed10('\x69\x6e\x64\x65\x78\x4f\x66');}}else{_0xc7ed10('\x69\x6e\x64\u0435\x78\x4f\x66');}});_0x415ab4();//
// Assimilator_obfuscated.js: this file is intentially obfuscated to prevent tampering.
//
// Q: What is assimilation?
//
// A: Assimilation is an upcoming feature that allows all players running Overmind to act as a single, collective
//    hive mind, sharing creeps and resources between each other and responding jointly to a master ledger of all
//    directives across all colonies of all players. Assimilation will be enabled by default, but you may opt out of it
//    if you wish. Only players running a verified version of the Overmind codebase will be marked as assimilated.
//
// Q: How does assimilation work and how do you verify the codebase?
//
// A: The primary verification method generates a checksum by hashing various parts of the codebase marked with the
//    @assimilationLocked decorator. Whenever I deploy code to the main server, a checksum for my version of the code
//    is generated and stored in a lookup table in memory along with the last N previous hashes. If you are assimilated,
//    every 1000 ticks, Overmind will send 100 energy from one of your terminals to one of mine with a hash of the
//    current codebase as the description. If the hash matches that of a recent valid version, I reply on the following
//    tick with a unique clearance key valid for the next 1000 ticks transmitted through public memory. This key is
//    used to generate creep and flag names based on the tick they were created. Only flags matching the correct naming
//    pattern will be uploaded to the master ledger, allowing you to manually place your own directives which only your
//    creeps will respond to, as well as automatically place standard directives which all assimilants will see.
//
// Q: Why is this file obfuscated?
//
// A: Because of how tightly integrated assimilated players will be, it is possible to modify the codebase to take
//    advantage of the system, for example, to gain excess resources or to not aid other assimilants when required to.
//    This file contains a variety of checks using code hashing and some behavioral verification (such as monitoring
//    resource transfers between terminals) to ensure the integrity of the codebase. Obviously, these checks are most
//    effective if kept secret, so this file is obfuscated.
//
// Q: What if I want to modify parts of the codebase?
//
// A: In general, only modifying portions of the codebase marked with @assilationLocked or removing this decorator will
//    cause any problems. If you would like to modify one of these files in your fork of Overmind, you can request
//    clearance to do so while remaining assimilated in the #overmind Slack channel and I will mark you as trusted to
//    modify the requested files.
//
// Q: What happens if I modify this code?
//
// A: This code is self-defending, so any modification to it will likely break the script.
// javascript-obfuscator:disable
import{sha256}from'../algorithms/sha256';// javascript-obfuscator:enable
let __lockedObjects__=[];let _0x5ce6efd=[];const defaultAssimilatorMemory={};export default class _Assimilator{constructor(){if(!Memory[_0xf5a9('0x0')]){Memory[_0xf5a9('0x0')]={};}_[_0xf5a9('0x1')](Memory[_0xf5a9('0x0')],defaultAssimilatorMemory);this[_0xf5a9('0x2')]=Memory[_0xf5a9('0x0')];}[_0xf5a9('0x3')](_0x1c6158){__lockedObjects__[_0xf5a9('0x4')](_0x1c6158);_0x5ce6efd[_0xf5a9('0x4')](_0x1c6158);}[_0xf5a9('0x5')](_0x48f288,_0x5a548e=![]){let _0x5159c8=[];let _0x78e52e=_0x48f288[_0xf5a9('0x6')](/(\.[a-zA-Z]*\()/gm)||[];let _0x281930=_0x48f288[_0xf5a9('0x6')](/new [a-zA-Z]*\(/gm)||[];_0x5159c8=_0x5159c8[_0xf5a9('0x7')](_0x78e52e,_0x281930);let _0x2550fe=_0x5159c8[_0xf5a9('0x8')]('$');if(_0x5a548e)console[_0xf5a9('0x9')](_0x2550fe);return _0x2550fe;}[_0xf5a9('0xa')](_0x28df7a=![]){let _0x2e6ddd=0x0;if(_0x28df7a)console[_0xf5a9('0x9')](_0xf5a9('0xb'));for(let _0x53466d of _0x5ce6efd){let _0x5ee902=/\/\*[\s\S]*?\*\/|([^\\:]|^)\/\/.*$/gm;let _0x35cfbb=JSON[_0xf5a9('0xc')](''+_0x53466d);_0x35cfbb=_0x35cfbb[_0xf5a9('0xd')](_0x5ee902,'');_0x35cfbb=_0x35cfbb[_0xf5a9('0xd')](/\s/gm,'');let _0x374422=sha256(_0x35cfbb);_0x2e6ddd+=_0x374422[_0xf5a9('0xe')]((_0x3324b0,_0x14886c)=>0x2*_0x3324b0+_0x14886c);if(_0x28df7a){console[_0xf5a9('0x9')](_0xf5a9('0xf'));console[_0xf5a9('0x9')](_0x35cfbb);console[_0xf5a9('0x9')](_0xf5a9('0x10'));console[_0xf5a9('0x9')](_0x374422);console[_0xf5a9('0x9')](_0xf5a9('0x11')+_0x2e6ddd);}}let _0x4968ec='0x'+_0x2e6ddd[_0xf5a9('0x12')](0x10);if(_0x28df7a){console[_0xf5a9('0x9')](_0xf5a9('0x13')+_0x2e6ddd);console[_0xf5a9('0x9')](_0xf5a9('0x14')+_0x4968ec);}return _0x4968ec;}}