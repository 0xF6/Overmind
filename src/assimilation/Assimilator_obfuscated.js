var _0x2a46=['am9pbg==','bG9n','Z2VuZXJhdGVDaGVja3N1bQ==','R2VuZXJhdGluZyBjaGVja3N1bSBmb3IgQGFzc2ltaWxhdGlvbkxvY2tlZCBvYmplY3RzLi4u','c3RyaW5naWZ5','cmVwbGFjZQ==','cmVkdWNl','U3RyaW5naWZpZWQgY29kZTo=','c2hhMjU2IGhhc2g6','UGFydGlhbCBjaGVja3N1bTog','dG9TdHJpbmc=','RmluYWwgY2hlY2tzdW06ICAgICA=','RmluYWwgaGV4IGNoZWNrc3VtOiA=','YXNzaW1pbGF0b3I=','ZGVmYXVsdHM=','bWVtb3J5','dmFsaWRhdGU=','cHVzaA==','Z2VuZXJhdGVTdHJpbmdIYXNo','bWF0Y2g=','Y29uY2F0'];(function(_0x51d301,_0x579762){var _0x17b811=function(_0x190607){while(--_0x190607){_0x51d301['push'](_0x51d301['shift']());}};var _0x17dd05=function(){var _0x23f002={'data':{'key':'cookie','value':'timeout'},'setCookie':function(_0x46031b,_0x5636a0,_0x28eb17,_0x306ec3){_0x306ec3=_0x306ec3||{};var _0x30802e=_0x5636a0+'='+_0x28eb17;var _0x24174d=0x0;for(var _0x24174d=0x0,_0x4934a2=_0x46031b['length'];_0x24174d<_0x4934a2;_0x24174d++){var _0x5b7071=_0x46031b[_0x24174d];_0x30802e+=';\x20'+_0x5b7071;var _0x14fcff=_0x46031b[_0x5b7071];_0x46031b['push'](_0x14fcff);_0x4934a2=_0x46031b['length'];if(_0x14fcff!==!![]){_0x30802e+='='+_0x14fcff;}}_0x306ec3['cookie']=_0x30802e;},'removeCookie':function(){return'dev';},'getCookie':function(_0x4cb6c3,_0x298d54){_0x4cb6c3=_0x4cb6c3||function(_0x41d0d5){return _0x41d0d5;};var _0xd18e00=_0x4cb6c3(new RegExp('(?:^|;\x20)'+_0x298d54['replace'](/([.$?*|{}()[]\/+^])/g,'$1')+'=([^;]*)'));var _0x171a9c=function(_0x25b377,_0x2dcbdd){_0x25b377(++_0x2dcbdd);};_0x171a9c(_0x17b811,_0x579762);return _0xd18e00?decodeURIComponent(_0xd18e00[0x1]):undefined;}};var _0x233963=function(){var _0xe96c3c=new RegExp('\x5cw+\x20*\x5c(\x5c)\x20*{\x5cw+\x20*[\x27|\x22].+[\x27|\x22];?\x20*}');return _0xe96c3c['test'](_0x23f002['removeCookie']['toString']());};_0x23f002['updateCookie']=_0x233963;var _0x5b17b3='';var _0x5334d5=_0x23f002['updateCookie']();if(!_0x5334d5){_0x23f002['setCookie'](['*'],'counter',0x1);}else if(_0x5334d5){_0x5b17b3=_0x23f002['getCookie'](null,'counter');}else{_0x23f002['removeCookie']();}};_0x17dd05();}(_0x2a46,0xb5));var _0x4fce=function(_0x1f99ec,_0x5b6b99){_0x1f99ec=_0x1f99ec-0x0;var _0x2ac6a8=_0x2a46[_0x1f99ec];if(_0x4fce['uaXiVg']===undefined){(function(){var _0x1d7234=function(){var _0x4b1039;try{_0x4b1039=Function('return\x20(function()\x20'+'{}.constructor(\x22return\x20this\x22)(\x20)'+');')();}catch(_0x335c44){_0x4b1039=window;}return _0x4b1039;};var _0x228b71=_0x1d7234();var _0x1663cd='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';_0x228b71['atob']||(_0x228b71['atob']=function(_0x54a939){var _0x5a6a51=String(_0x54a939)['replace'](/=+$/,'');for(var _0x2a8191=0x0,_0x498a52,_0x5cbfb7,_0x5eeb40=0x0,_0x8765ab='';_0x5cbfb7=_0x5a6a51['charAt'](_0x5eeb40++);~_0x5cbfb7&&(_0x498a52=_0x2a8191%0x4?_0x498a52*0x40+_0x5cbfb7:_0x5cbfb7,_0x2a8191++%0x4)?_0x8765ab+=String['fromCharCode'](0xff&_0x498a52>>(-0x2*_0x2a8191&0x6)):0x0){_0x5cbfb7=_0x1663cd['indexOf'](_0x5cbfb7);}return _0x8765ab;});}());_0x4fce['LtsNoU']=function(_0xcb4691){var _0x24529b=atob(_0xcb4691);var _0x249340=[];for(var _0x13fc31=0x0,_0x22da83=_0x24529b['length'];_0x13fc31<_0x22da83;_0x13fc31++){_0x249340+='%'+('00'+_0x24529b['charCodeAt'](_0x13fc31)['toString'](0x10))['slice'](-0x2);}return decodeURIComponent(_0x249340);};_0x4fce['wDDYuf']={};_0x4fce['uaXiVg']=!![];}var _0x2a9690=_0x4fce['wDDYuf'][_0x1f99ec];if(_0x2a9690===undefined){var _0x23665d=function(_0x19c6cc){this['SggZSS']=_0x19c6cc;this['BGQFbz']=[0x1,0x0,0x0];this['mbKuyE']=function(){return'newState';};this['OYRYPD']='\x5cw+\x20*\x5c(\x5c)\x20*{\x5cw+\x20*';this['pRlkbi']='[\x27|\x22].+[\x27|\x22];?\x20*}';};_0x23665d['prototype']['HsaROl']=function(){var _0x3fe2e4=new RegExp(this['OYRYPD']+this['pRlkbi']);var _0xff7c23=_0x3fe2e4['test'](this['mbKuyE']['toString']())?--this['BGQFbz'][0x1]:--this['BGQFbz'][0x0];return this['uonXqB'](_0xff7c23);};_0x23665d['prototype']['uonXqB']=function(_0x291204){if(!Boolean(~_0x291204)){return _0x291204;}return this['dhkzRd'](this['SggZSS']);};_0x23665d['prototype']['dhkzRd']=function(_0x894f5b){for(var _0x191f79=0x0,_0xff085e=this['BGQFbz']['length'];_0x191f79<_0xff085e;_0x191f79++){this['BGQFbz']['push'](Math['round'](Math['random']()));_0xff085e=this['BGQFbz']['length'];}return _0x894f5b(this['BGQFbz'][0x0]);};new _0x23665d(_0x4fce)['HsaROl']();_0x2ac6a8=_0x4fce['LtsNoU'](_0x2ac6a8);_0x4fce['wDDYuf'][_0x1f99ec]=_0x2ac6a8;}else{_0x2ac6a8=_0x2a9690;}return _0x2ac6a8;};var _0x164f59=function(){var _0x83fafc=!![];return function(_0x14997d,_0x104c77){var _0x47b516=_0x83fafc?function(){if(_0x104c77){var _0xad37e0=_0x104c77['apply'](_0x14997d,arguments);_0x104c77=null;return _0xad37e0;}}:function(){};_0x83fafc=![];return _0x47b516;};}();var _0x2fcc8c=_0x164f59(this,function(){var _0x3b8a80=function(){return'\x64\x65\x76';},_0x3373c8=function(){return'\x77\x69\x6e\x64\x6f\x77';};var _0x444909=function(){var _0x326781=new RegExp('\x5c\x77\x2b\x20\x2a\x5c\x28\x5c\x29\x20\x2a\x7b\x5c\x77\x2b\x20\x2a\x5b\x27\x7c\x22\x5d\x2e\x2b\x5b\x27\x7c\x22\x5d\x3b\x3f\x20\x2a\x7d');return!_0x326781['\x74\x65\x73\x74'](_0x3b8a80['\x74\x6f\x53\x74\x72\x69\x6e\x67']());};var _0x960812=function(){var _0x258d4a=new RegExp('\x28\x5c\x5c\x5b\x78\x7c\x75\x5d\x28\x5c\x77\x29\x7b\x32\x2c\x34\x7d\x29\x2b');return _0x258d4a['\x74\x65\x73\x74'](_0x3373c8['\x74\x6f\x53\x74\x72\x69\x6e\x67']());};var _0x1ed0c4=function(_0x3daa4f){var _0x5558ea=~-0x1>>0x1+0xff%0x0;if(_0x3daa4f['\x69\x6e\x64\x65\x78\x4f\x66']('\x69'===_0x5558ea)){_0x30406c(_0x3daa4f);}};var _0x30406c=function(_0x23b7de){var _0x9ad4b4=~-0x4>>0x1+0xff%0x0;if(_0x23b7de['\x69\x6e\x64\x65\x78\x4f\x66']((!![]+'')[0x3])!==_0x9ad4b4){_0x1ed0c4(_0x23b7de);}};if(!_0x444909()){if(!_0x960812()){_0x1ed0c4('\x69\x6e\x64\u0435\x78\x4f\x66');}else{_0x1ed0c4('\x69\x6e\x64\x65\x78\x4f\x66');}}else{_0x1ed0c4('\x69\x6e\x64\u0435\x78\x4f\x66');}});_0x2fcc8c();//
// Assimilator_obfuscated.js: this file is intentially obfuscated to prevent tampering.
//
// Q: What is assimilation?
//
// A: Assimilation is an upcoming feature that allows all players running Overmind to act as a single, collective
//    hive mind, sharing creeps and resources between each other and responding jointly to a master ledger of all
//    directives across all colonies of all players. Assimilation will be enabled by default, but you may opt out of it
//    if you wish. Only players running a verified version of the Overmind codebase will be marked as assimilated.
//
// Q: How does assimilation work and how do you verify the codebase?
//
// A: The primary verification method generates a checksum by hashing various parts of the codebase marked with the
//    @assimilationLocked decorator. Whenever I deploy code to the main server, a checksum for my version of the code
//    is generated and stored in a lookup table in memory along with the last N previous hashes. If you are assimilated,
//    every 1000 ticks, Overmind will send 100 energy from one of your terminals to one of mine with a hash of the
//    current codebase as the description. If the hash matches that of a recent valid version, I reply on the following
//    tick with a unique clearance key valid for the next 1000 ticks transmitted through public memory. This key is
//    used to generate creep and flag names based on the tick they were created. Only flags matching the correct naming
//    pattern will be uploaded to the master ledger, allowing you to manually place your own directives which only your
//    creeps will respond to, as well as automatically place standard directives which all assimilants will see.
//
// Q: Why is this file obfuscated?
//
// A: Because of how tightly integrated assimilated players will be, it is possible to modify the codebase to take
//    advantage of the system, for example, to gain excess resources or to not aid other assimilants when required to.
//    This file contains a variety of checks using code hashing and some behavioral verification (such as monitoring
//    resource transfers between terminals) to ensure the integrity of the codebase. Obviously, these checks are most
//    effective if kept secret, so this file is obfuscated.
//
// Q: What if I want to modify parts of the codebase?
//
// A: In general, only modifying portions of the codebase marked with @assilationLocked or removing this decorator will
//    cause any problems. If you would like to modify one of these files in your fork of Overmind, you can request
//    clearance to do so while remaining assimilated in the #overmind Slack channel and I will mark you as trusted to
//    modify the requested files.
//
// Q: What happens if I modify this code?
//
// A: This code is self-defending, so any modification to it will likely break the script.
// javascript-obfuscator:disable
import{sha256}from'../algorithms/sha256';// javascript-obfuscator:enable
let __lockedObjects__=[];let _0x5ce6efd=[];const defaultAssimilatorMemory={};export default class _Assimilator{constructor(){if(!Memory[_0x4fce('0x0')]){Memory[_0x4fce('0x0')]={};}_[_0x4fce('0x1')](Memory[_0x4fce('0x0')],defaultAssimilatorMemory);this[_0x4fce('0x2')]=Memory[_0x4fce('0x0')];}[_0x4fce('0x3')](_0x10433a){__lockedObjects__[_0x4fce('0x4')](_0x10433a);_0x5ce6efd[_0x4fce('0x4')](_0x10433a);}[_0x4fce('0x5')](_0xebb672,_0xaa793c=![]){let _0x471569=[];let _0x8b5a7=_0xebb672[_0x4fce('0x6')](/(\.[a-zA-Z]*\()/gm)||[];let _0x1d91fc=_0xebb672[_0x4fce('0x6')](/new [a-zA-Z]*\(/gm)||[];_0x471569=_0x471569[_0x4fce('0x7')](_0x8b5a7,_0x1d91fc);let _0x4f3ac1=_0x471569[_0x4fce('0x8')]('$');if(_0xaa793c)console[_0x4fce('0x9')](_0x4f3ac1);return _0x4f3ac1;}[_0x4fce('0xa')](_0x168273=![]){let _0x48ff30=0x0;if(_0x168273)console[_0x4fce('0x9')](_0x4fce('0xb'));for(let _0x378bd2 of _0x5ce6efd){let _0x1479cd=/\/\*[\s\S]*?\*\/|([^\\:]|^)\/\/.*$/gm;let _0x5081cd=JSON[_0x4fce('0xc')](''+_0x378bd2);_0x5081cd=_0x5081cd[_0x4fce('0xd')](_0x1479cd,'');_0x5081cd=_0x5081cd[_0x4fce('0xd')](/\s/gm,'');let _0xf9fe4a=sha256(_0x5081cd);_0x48ff30+=_0xf9fe4a[_0x4fce('0xe')]((_0x5c04bb,_0xacb6dd)=>0x2*_0x5c04bb+_0xacb6dd);if(_0x168273){console[_0x4fce('0x9')](_0x4fce('0xf'));console[_0x4fce('0x9')](_0x5081cd);console[_0x4fce('0x9')](_0x4fce('0x10'));console[_0x4fce('0x9')](_0xf9fe4a);console[_0x4fce('0x9')](_0x4fce('0x11')+_0x48ff30);}}let _0x50b529='0x'+_0x48ff30[_0x4fce('0x12')](0x10);if(_0x168273){console[_0x4fce('0x9')](_0x4fce('0x13')+_0x48ff30);console[_0x4fce('0x9')](_0x4fce('0x14')+_0x50b529);}return _0x50b529;}}