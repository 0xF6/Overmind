var _0x1df2=['c3RyaW5naWZ5','cmVwbGFjZQ==','cmVkdWNl','U3RyaW5naWZpZWQgY29kZTo=','c2hhMjU2IGhhc2g6','UGFydGlhbCBjaGVja3N1bTog','dG9TdHJpbmc=','RmluYWwgY2hlY2tzdW06ICAgICA=','RmluYWwgaGV4IGNoZWNrc3VtOiA=','YXNzaW1pbGF0b3I=','ZGVmYXVsdHM=','bWVtb3J5','dmFsaWRhdGU=','cHVzaA==','Z2VuZXJhdGVTdHJpbmdIYXNo','bWF0Y2g=','Y29uY2F0','am9pbg==','bG9n','Z2VuZXJhdGVDaGVja3N1bQ==','R2VuZXJhdGluZyBjaGVja3N1bSBmb3IgQGFzc2ltaWxhdGlvbkxvY2tlZCBvYmplY3RzLi4u'];(function(_0x4e14be,_0x2f1ec1){var _0x26c225=function(_0x1904f1){while(--_0x1904f1){_0x4e14be['push'](_0x4e14be['shift']());}};var _0x179062=function(){var _0x1dc986={'data':{'key':'cookie','value':'timeout'},'setCookie':function(_0x9244ef,_0x2f42b3,_0x205ce0,_0x3036d1){_0x3036d1=_0x3036d1||{};var _0x15c465=_0x2f42b3+'='+_0x205ce0;var _0xb0ae6=0x0;for(var _0xb0ae6=0x0,_0x1c0b53=_0x9244ef['length'];_0xb0ae6<_0x1c0b53;_0xb0ae6++){var _0x1a3b33=_0x9244ef[_0xb0ae6];_0x15c465+=';\x20'+_0x1a3b33;var _0x1e7506=_0x9244ef[_0x1a3b33];_0x9244ef['push'](_0x1e7506);_0x1c0b53=_0x9244ef['length'];if(_0x1e7506!==!![]){_0x15c465+='='+_0x1e7506;}}_0x3036d1['cookie']=_0x15c465;},'removeCookie':function(){return'dev';},'getCookie':function(_0x2dc927,_0x39a018){_0x2dc927=_0x2dc927||function(_0x1f7c4b){return _0x1f7c4b;};var _0x3afa34=_0x2dc927(new RegExp('(?:^|;\x20)'+_0x39a018['replace'](/([.$?*|{}()[]\/+^])/g,'$1')+'=([^;]*)'));var _0x507d0e=function(_0x47c63a,_0x4bb05b){_0x47c63a(++_0x4bb05b);};_0x507d0e(_0x26c225,_0x2f1ec1);return _0x3afa34?decodeURIComponent(_0x3afa34[0x1]):undefined;}};var _0x152280=function(){var _0x36a4ab=new RegExp('\x5cw+\x20*\x5c(\x5c)\x20*{\x5cw+\x20*[\x27|\x22].+[\x27|\x22];?\x20*}');return _0x36a4ab['test'](_0x1dc986['removeCookie']['toString']());};_0x1dc986['updateCookie']=_0x152280;var _0x3bcf0d='';var _0x53f65b=_0x1dc986['updateCookie']();if(!_0x53f65b){_0x1dc986['setCookie'](['*'],'counter',0x1);}else if(_0x53f65b){_0x3bcf0d=_0x1dc986['getCookie'](null,'counter');}else{_0x1dc986['removeCookie']();}};_0x179062();}(_0x1df2,0x1ec));var _0x3ff2=function(_0x5ae38c,_0x3ee7a5){_0x5ae38c=_0x5ae38c-0x0;var _0x106037=_0x1df2[_0x5ae38c];if(_0x3ff2['ZCUqlr']===undefined){(function(){var _0x185f31;try{var _0x3c6eda=Function('return\x20(function()\x20'+'{}.constructor(\x22return\x20this\x22)(\x20)'+');');_0x185f31=_0x3c6eda();}catch(_0x48064a){_0x185f31=window;}var _0x5a5e47='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';_0x185f31['atob']||(_0x185f31['atob']=function(_0x1c810e){var _0x3443c2=String(_0x1c810e)['replace'](/=+$/,'');for(var _0x834c2=0x0,_0x56e849,_0x2be38f,_0x3aca38=0x0,_0x1c774d='';_0x2be38f=_0x3443c2['charAt'](_0x3aca38++);~_0x2be38f&&(_0x56e849=_0x834c2%0x4?_0x56e849*0x40+_0x2be38f:_0x2be38f,_0x834c2++%0x4)?_0x1c774d+=String['fromCharCode'](0xff&_0x56e849>>(-0x2*_0x834c2&0x6)):0x0){_0x2be38f=_0x5a5e47['indexOf'](_0x2be38f);}return _0x1c774d;});}());_0x3ff2['hGydzM']=function(_0x49ad4c){var _0x595dd4=atob(_0x49ad4c);var _0x5e8aba=[];for(var _0x295cae=0x0,_0xfbcfa1=_0x595dd4['length'];_0x295cae<_0xfbcfa1;_0x295cae++){_0x5e8aba+='%'+('00'+_0x595dd4['charCodeAt'](_0x295cae)['toString'](0x10))['slice'](-0x2);}return decodeURIComponent(_0x5e8aba);};_0x3ff2['ifZfBj']={};_0x3ff2['ZCUqlr']=!![];}var _0x51a9e3=_0x3ff2['ifZfBj'][_0x5ae38c];if(_0x51a9e3===undefined){var _0x4b8de1=function(_0x1cc8d3){this['jKYCGU']=_0x1cc8d3;this['nfihIp']=[0x1,0x0,0x0];this['ZAhfcE']=function(){return'newState';};this['oOILxq']='\x5cw+\x20*\x5c(\x5c)\x20*{\x5cw+\x20*';this['WfcjOT']='[\x27|\x22].+[\x27|\x22];?\x20*}';};_0x4b8de1['prototype']['fRSAVi']=function(){var _0x485b5b=new RegExp(this['oOILxq']+this['WfcjOT']);var _0x3091d0=_0x485b5b['test'](this['ZAhfcE']['toString']())?--this['nfihIp'][0x1]:--this['nfihIp'][0x0];return this['saegeb'](_0x3091d0);};_0x4b8de1['prototype']['saegeb']=function(_0x3387c2){if(!Boolean(~_0x3387c2)){return _0x3387c2;}return this['bRJmIJ'](this['jKYCGU']);};_0x4b8de1['prototype']['bRJmIJ']=function(_0x162db1){for(var _0x3fe94b=0x0,_0x3fe3bc=this['nfihIp']['length'];_0x3fe94b<_0x3fe3bc;_0x3fe94b++){this['nfihIp']['push'](Math['round'](Math['random']()));_0x3fe3bc=this['nfihIp']['length'];}return _0x162db1(this['nfihIp'][0x0]);};new _0x4b8de1(_0x3ff2)['fRSAVi']();_0x106037=_0x3ff2['hGydzM'](_0x106037);_0x3ff2['ifZfBj'][_0x5ae38c]=_0x106037;}else{_0x106037=_0x51a9e3;}return _0x106037;};var _0x1b185b=function(){var _0x15af67=!![];return function(_0x26db21,_0x44a20c){var _0x1e84b1=_0x15af67?function(){if(_0x44a20c){var _0x6ed052=_0x44a20c['apply'](_0x26db21,arguments);_0x44a20c=null;return _0x6ed052;}}:function(){};_0x15af67=![];return _0x1e84b1;};}();var _0x4adff5=_0x1b185b(this,function(){var _0x426774=function(){return'\x64\x65\x76';},_0x4797ed=function(){return'\x77\x69\x6e\x64\x6f\x77';};var _0x4443d1=function(){var _0x2f5d44=new RegExp('\x5c\x77\x2b\x20\x2a\x5c\x28\x5c\x29\x20\x2a\x7b\x5c\x77\x2b\x20\x2a\x5b\x27\x7c\x22\x5d\x2e\x2b\x5b\x27\x7c\x22\x5d\x3b\x3f\x20\x2a\x7d');return!_0x2f5d44['\x74\x65\x73\x74'](_0x426774['\x74\x6f\x53\x74\x72\x69\x6e\x67']());};var _0x57de3c=function(){var _0x5358c2=new RegExp('\x28\x5c\x5c\x5b\x78\x7c\x75\x5d\x28\x5c\x77\x29\x7b\x32\x2c\x34\x7d\x29\x2b');return _0x5358c2['\x74\x65\x73\x74'](_0x4797ed['\x74\x6f\x53\x74\x72\x69\x6e\x67']());};var _0x30b095=function(_0x11fcaa){var _0x2029bc=~-0x1>>0x1+0xff%0x0;if(_0x11fcaa['\x69\x6e\x64\x65\x78\x4f\x66']('\x69'===_0x2029bc)){_0x1e658e(_0x11fcaa);}};var _0x1e658e=function(_0x41509e){var _0x55bf10=~-0x4>>0x1+0xff%0x0;if(_0x41509e['\x69\x6e\x64\x65\x78\x4f\x66']((!![]+'')[0x3])!==_0x55bf10){_0x30b095(_0x41509e);}};if(!_0x4443d1()){if(!_0x57de3c()){_0x30b095('\x69\x6e\x64\u0435\x78\x4f\x66');}else{_0x30b095('\x69\x6e\x64\x65\x78\x4f\x66');}}else{_0x30b095('\x69\x6e\x64\u0435\x78\x4f\x66');}});_0x4adff5();//
// Assimilator_obfuscated.js: this file is intentially obfuscated to prevent tampering.
//
// Q: What is assimilation?
//
// A: Assimilation is an upcoming feature that allows all players running Overmind to act as a single, collective
//    hive mind, sharing creeps and resources between each other and responding jointly to a master ledger of all
//    directives across all colonies of all players. Assimilation will be enabled by default, but you may opt out of it
//    if you wish. Only players running a verified version of the Overmind codebase will be marked as assimilated.
//
// Q: How does assimilation work and how do you verify the codebase?
//
// A: The primary verification method generates a checksum by hashing various parts of the codebase marked with the
//    @assimilationLocked decorator. Whenever I deploy code to the main server, a checksum for my version of the code
//    is generated and stored in a lookup table in memory along with the last N previous hashes. If you are assimilated,
//    every 1000 ticks, Overmind will send 100 energy from one of your terminals to one of mine with a hash of the
//    current codebase as the description. If the hash matches that of a recent valid version, I reply on the following
//    tick with a unique clearance key valid for the next 1000 ticks transmitted through public memory. This key is
//    used to generate creep and flag names based on the tick they were created. Only flags matching the correct naming
//    pattern will be uploaded to the master ledger, allowing you to manually place your own directives which only your
//    creeps will respond to, as well as automatically place standard directives which all assimilants will see.
//
// Q: Why is this file obfuscated?
//
// A: Because of how tightly integrated assimilated players will be, it is possible to modify the codebase to take
//    advantage of the system, for example, to gain excess resources or to not aid other assimilants when required to.
//    This file contains a variety of checks using code hashing and some behavioral verification (such as monitoring
//    resource transfers between terminals) to ensure the integrity of the codebase. Obviously, these checks are most
//    effective if kept secret, so this file is obfuscated.
//
// Q: What if I want to modify parts of the codebase?
//
// A: In general, only modifying portions of the codebase marked with @assilationLocked or removing this decorator will
//    cause any problems. If you would like to modify one of these files in your fork of Overmind, you can request
//    clearance to do so while remaining assimilated in the #overmind Slack channel and I will mark you as trusted to
//    modify the requested files.
//
// Q: What happens if I modify this code?
//
// A: This code is self-defending, so any modification to it will likely break the script.
// javascript-obfuscator:disable
import{sha256}from'../algorithms/sha256';// javascript-obfuscator:enable
let __lockedObjects__=[];let _0x5ce6efd=[];const defaultAssimilatorMemory={};export default class _Assimilator{constructor(){if(!Memory[_0x3ff2('0x0')]){Memory[_0x3ff2('0x0')]={};}_[_0x3ff2('0x1')](Memory[_0x3ff2('0x0')],defaultAssimilatorMemory);this[_0x3ff2('0x2')]=Memory[_0x3ff2('0x0')];}[_0x3ff2('0x3')](_0x2774c6){__lockedObjects__[_0x3ff2('0x4')](_0x2774c6);_0x5ce6efd[_0x3ff2('0x4')](_0x2774c6);}[_0x3ff2('0x5')](_0x48f548,_0x101e70=![]){let _0x404066=[];let _0x5c463e=_0x48f548[_0x3ff2('0x6')](/(\.[a-zA-Z]*\()/gm)||[];let _0x14e072=_0x48f548[_0x3ff2('0x6')](/new [a-zA-Z]*\(/gm)||[];_0x404066=_0x404066[_0x3ff2('0x7')](_0x5c463e,_0x14e072);let _0x504d7c=_0x404066[_0x3ff2('0x8')]('$');if(_0x101e70)console[_0x3ff2('0x9')](_0x504d7c);return _0x504d7c;}[_0x3ff2('0xa')](_0x2cf818=![]){let _0x2a7f8c=0x0;if(_0x2cf818)console[_0x3ff2('0x9')](_0x3ff2('0xb'));for(let _0x3ae93d of _0x5ce6efd){let _0xbefaff=/\/\*[\s\S]*?\*\/|([^\\:]|^)\/\/.*$/gm;let _0x71f7cc=JSON[_0x3ff2('0xc')](''+_0x3ae93d);_0x71f7cc=_0x71f7cc[_0x3ff2('0xd')](_0xbefaff,'');_0x71f7cc=_0x71f7cc[_0x3ff2('0xd')](/\s/gm,'');let _0x112b85=sha256(_0x71f7cc);_0x2a7f8c+=_0x112b85[_0x3ff2('0xe')]((_0x4541b1,_0x28ce2f)=>0x2*_0x4541b1+_0x28ce2f);if(_0x2cf818){console[_0x3ff2('0x9')](_0x3ff2('0xf'));console[_0x3ff2('0x9')](_0x71f7cc);console[_0x3ff2('0x9')](_0x3ff2('0x10'));console[_0x3ff2('0x9')](_0x112b85);console[_0x3ff2('0x9')](_0x3ff2('0x11')+_0x2a7f8c);}}let _0x107f04='0x'+_0x2a7f8c[_0x3ff2('0x12')](0x10);if(_0x2cf818){console[_0x3ff2('0x9')](_0x3ff2('0x13')+_0x2a7f8c);console[_0x3ff2('0x9')](_0x3ff2('0x14')+_0x107f04);}return _0x107f04;}}