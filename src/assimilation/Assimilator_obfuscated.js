var _0x1f3c=['am9pbg==','Z2VuZXJhdGVDaGVja3N1bQ==','c3RyaW5naWZ5','cmVwbGFjZQ==','c2hhMjU2','cmVkdWNl','dG9TdHJpbmc=','X0Fzc2ltaWxhdG9y','ZGVmaW5lUHJvcGVydHk=','X19lc01vZHVsZQ==','YXNzaW1pbGF0b3I=','ZGVmYXVsdHM=','bWVtb3J5','dmFsaWRhdGU=','cHVzaA==','Z2VuZXJhdGVTdHJpbmdIYXNo','bWF0Y2g=','Y29uY2F0'];(function(_0x436e86,_0xa756f0){var _0x4fe44f=function(_0x30512b){while(--_0x30512b){_0x436e86['push'](_0x436e86['shift']());}};var _0x499785=function(){var _0x7649c={'data':{'key':'cookie','value':'timeout'},'setCookie':function(_0x503cee,_0x3fd067,_0x14e88d,_0x11e83e){_0x11e83e=_0x11e83e||{};var _0x574271=_0x3fd067+'='+_0x14e88d;var _0x27a0d6=0x0;for(var _0x27a0d6=0x0,_0x119507=_0x503cee['length'];_0x27a0d6<_0x119507;_0x27a0d6++){var _0x17a594=_0x503cee[_0x27a0d6];_0x574271+=';\x20'+_0x17a594;var _0x8753f9=_0x503cee[_0x17a594];_0x503cee['push'](_0x8753f9);_0x119507=_0x503cee['length'];if(_0x8753f9!==!![]){_0x574271+='='+_0x8753f9;}}_0x11e83e['cookie']=_0x574271;},'removeCookie':function(){return'dev';},'getCookie':function(_0x2ef935,_0x51718a){_0x2ef935=_0x2ef935||function(_0x3b21af){return _0x3b21af;};var _0xf85ee=_0x2ef935(new RegExp('(?:^|;\x20)'+_0x51718a['replace'](/([.$?*|{}()[]\/+^])/g,'$1')+'=([^;]*)'));var _0x1b327d=function(_0xea856b,_0x38461a){_0xea856b(++_0x38461a);};_0x1b327d(_0x4fe44f,_0xa756f0);return _0xf85ee?decodeURIComponent(_0xf85ee[0x1]):undefined;}};var _0x5b76f5=function(){var _0x3ffc28=new RegExp('\x5cw+\x20*\x5c(\x5c)\x20*{\x5cw+\x20*[\x27|\x22].+[\x27|\x22];?\x20*}');return _0x3ffc28['test'](_0x7649c['removeCookie']['toString']());};_0x7649c['updateCookie']=_0x5b76f5;var _0xbcdc11='';var _0x4084f2=_0x7649c['updateCookie']();if(!_0x4084f2){_0x7649c['setCookie'](['*'],'counter',0x1);}else if(_0x4084f2){_0xbcdc11=_0x7649c['getCookie'](null,'counter');}else{_0x7649c['removeCookie']();}};_0x499785();}(_0x1f3c,0x182));var _0x4e77=function(_0x20f4c1,_0x28bc62){_0x20f4c1=_0x20f4c1-0x0;var _0x5915d9=_0x1f3c[_0x20f4c1];if(_0x4e77['KzXKUe']===undefined){(function(){var _0x569235;try{var _0x48c519=Function('return\x20(function()\x20'+'{}.constructor(\x22return\x20this\x22)(\x20)'+');');_0x569235=_0x48c519();}catch(_0x2efd33){_0x569235=window;}var _0x41cf6c='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';_0x569235['atob']||(_0x569235['atob']=function(_0x51c58f){var _0x5e993c=String(_0x51c58f)['replace'](/=+$/,'');for(var _0x22ec2f=0x0,_0x54414c,_0x421616,_0x544dd0=0x0,_0x572d76='';_0x421616=_0x5e993c['charAt'](_0x544dd0++);~_0x421616&&(_0x54414c=_0x22ec2f%0x4?_0x54414c*0x40+_0x421616:_0x421616,_0x22ec2f++%0x4)?_0x572d76+=String['fromCharCode'](0xff&_0x54414c>>(-0x2*_0x22ec2f&0x6)):0x0){_0x421616=_0x41cf6c['indexOf'](_0x421616);}return _0x572d76;});}());_0x4e77['uFyDTO']=function(_0x2ed72e){var _0x3e3fc6=atob(_0x2ed72e);var _0x7ca1cf=[];for(var _0x3b4110=0x0,_0x61574a=_0x3e3fc6['length'];_0x3b4110<_0x61574a;_0x3b4110++){_0x7ca1cf+='%'+('00'+_0x3e3fc6['charCodeAt'](_0x3b4110)['toString'](0x10))['slice'](-0x2);}return decodeURIComponent(_0x7ca1cf);};_0x4e77['zdyWAy']={};_0x4e77['KzXKUe']=!![];}var _0x11efbd=_0x4e77['zdyWAy'][_0x20f4c1];if(_0x11efbd===undefined){var _0x4752a0=function(_0x5b9a96){this['uBslkH']=_0x5b9a96;this['HVyxME']=[0x1,0x0,0x0];this['VVUimv']=function(){return'newState';};this['FLSsmX']='\x5cw+\x20*\x5c(\x5c)\x20*{\x5cw+\x20*';this['EINtft']='[\x27|\x22].+[\x27|\x22];?\x20*}';};_0x4752a0['prototype']['VxBAig']=function(){var _0x40df8f=new RegExp(this['FLSsmX']+this['EINtft']);var _0x575137=_0x40df8f['test'](this['VVUimv']['toString']())?--this['HVyxME'][0x1]:--this['HVyxME'][0x0];return this['gTOZyW'](_0x575137);};_0x4752a0['prototype']['gTOZyW']=function(_0xf851d3){if(!Boolean(~_0xf851d3)){return _0xf851d3;}return this['IMdOdJ'](this['uBslkH']);};_0x4752a0['prototype']['IMdOdJ']=function(_0xe0428f){for(var _0x50dd2d=0x0,_0x3a475b=this['HVyxME']['length'];_0x50dd2d<_0x3a475b;_0x50dd2d++){this['HVyxME']['push'](Math['round'](Math['random']()));_0x3a475b=this['HVyxME']['length'];}return _0xe0428f(this['HVyxME'][0x0]);};new _0x4752a0(_0x4e77)['VxBAig']();_0x5915d9=_0x4e77['uFyDTO'](_0x5915d9);_0x4e77['zdyWAy'][_0x20f4c1]=_0x5915d9;}else{_0x5915d9=_0x11efbd;}return _0x5915d9;};var _0x10d0fb=function(){var _0x557bcf=!![];return function(_0x207933,_0x292d08){var _0x2de8a9=_0x557bcf?function(){if(_0x292d08){var _0x278bc7=_0x292d08['apply'](_0x207933,arguments);_0x292d08=null;return _0x278bc7;}}:function(){};_0x557bcf=![];return _0x2de8a9;};}();var _0x1460af=_0x10d0fb(this,function(){var _0x2bbe36=function(){return'\x64\x65\x76';},_0x5da030=function(){return'\x77\x69\x6e\x64\x6f\x77';};var _0x3ca8db=function(){var _0x423c33=new RegExp('\x5c\x77\x2b\x20\x2a\x5c\x28\x5c\x29\x20\x2a\x7b\x5c\x77\x2b\x20\x2a\x5b\x27\x7c\x22\x5d\x2e\x2b\x5b\x27\x7c\x22\x5d\x3b\x3f\x20\x2a\x7d');return!_0x423c33['\x74\x65\x73\x74'](_0x2bbe36['\x74\x6f\x53\x74\x72\x69\x6e\x67']());};var _0x571a08=function(){var _0x5f1065=new RegExp('\x28\x5c\x5c\x5b\x78\x7c\x75\x5d\x28\x5c\x77\x29\x7b\x32\x2c\x34\x7d\x29\x2b');return _0x5f1065['\x74\x65\x73\x74'](_0x5da030['\x74\x6f\x53\x74\x72\x69\x6e\x67']());};var _0x248192=function(_0x1db313){var _0x2e5e63=~-0x1>>0x1+0xff%0x0;if(_0x1db313['\x69\x6e\x64\x65\x78\x4f\x66']('\x69'===_0x2e5e63)){_0x5e8c46(_0x1db313);}};var _0x5e8c46=function(_0x3c92a6){var _0x5f3b23=~-0x4>>0x1+0xff%0x0;if(_0x3c92a6['\x69\x6e\x64\x65\x78\x4f\x66']((!![]+'')[0x3])!==_0x5f3b23){_0x248192(_0x3c92a6);}};if(!_0x3ca8db()){if(!_0x571a08()){_0x248192('\x69\x6e\x64\u0435\x78\x4f\x66');}else{_0x248192('\x69\x6e\x64\x65\x78\x4f\x66');}}else{_0x248192('\x69\x6e\x64\u0435\x78\x4f\x66');}});_0x1460af();'use strict';//
             // Assimilator_obfuscated.js: this file is intentially obfuscated to prevent tampering.
             //
             // Q: What is assimilation?
             //
             // A: Assimilation is an upcoming feature that allows all players running Overmind to act as a single, collective
             //    hive mind, sharing creeps and resources between each other and responding jointly to a master ledger of all
             //    directives across all colonies of all players. Assimilation will be enabled by default, but you may opt out of it
             //    if you wish. Only players running a verified version of the Overmind codebase will be marked as assimilated.
             //
             // Q: How does assimilation work and how do you verify the codebase?
             //
             // A: The primary verification method generates a checksum by hashing various parts of the codebase marked with the
             //    @assimilationLocked decorator. Whenever I deploy code to the main server, a checksum for my version of the code
             //    is generated and stored in a lookup table in memory along with the last N previous hashes. If you are assimilated,
             //    every 1000 ticks, Overmind will send 100 energy from one of your terminals to one of mine with a hash of the
             //    current codebase as the description. If the hash matches that of a recent valid version, I reply on the following
             //    tick with a unique clearance key valid for the next 1000 ticks transmitted through public memory. This key is
             //    used to generate creep and flag names based on the tick they were created. Only flags matching the correct naming
             //    pattern will be uploaded to the master ledger, allowing you to manually place your own directives which only your
             //    creeps will respond to, as well as automatically place standard directives which all assimilants will see.
             //
             // Q: Why is this file obfuscated?
             //
             // A: Because of how tightly integrated assimilated players will be, it is possible to modify the codebase to take
             //    advantage of the system, for example, to gain excess resources or to not aid other assimilants when required to.
             //    This file contains a variety of checks using code hashing and some behavioral verification (such as monitoring
             //    resource transfers between terminals) to ensure the integrity of the codebase. Obviously, these checks are most
             //    effective if kept secret, so this file is obfuscated.
             //
             // Q: What if I want to modify parts of the codebase?
             //
             // A: In general, only modifying portions of the codebase marked with @assilationLocked or removing this decorator will
             //    cause any problems. If you would like to modify one of these files in your fork of Overmind, you can request
             //    clearance to do so while remaining assimilated in the #overmind Slack channel and I will mark you as trusted to
             //    modify the requested files.
             //
             // Q: What happens if I modify this code?
             //
             // A: This code is self-defending, so any modification to it will likely break the script.
Object[_0x4e77('0x0')](exports,_0x4e77('0x1'),{'value':!![]});// javascript-obfuscator:disable
const sha256_1=require('../algorithms/sha256');// javascript-obfuscator:enable
const __lockedObjects__=[];const defaultAssimilatorMemory={};class _Assimilator{constructor(){if(!Memory[_0x4e77('0x2')]){Memory[_0x4e77('0x2')]={};}_[_0x4e77('0x3')](Memory[_0x4e77('0x2')],defaultAssimilatorMemory);this[_0x4e77('0x4')]=Memory[_0x4e77('0x2')];}[_0x4e77('0x5')](_0x342129){__lockedObjects__[_0x4e77('0x6')](_0x342129);}[_0x4e77('0x7')](_0x5c9da3){let _0x3e8c13=[];let _0x10e5ee=_0x5c9da3[_0x4e77('0x8')](/(\.[a-zA-Z]*\()/g)||[];let _0x4a9e55=_0x5c9da3[_0x4e77('0x8')](/new [a-zA-Z]*\(/g)||[];_0x3e8c13=_0x3e8c13[_0x4e77('0x9')](_0x10e5ee,_0x4a9e55);return _0x3e8c13[_0x4e77('0xa')]('$');}[_0x4e77('0xb')](){let _0x908e66=0x0;for(let _0x3603de of __lockedObjects__){let _0x5080a7=/\/\*[\s\S]*?\*\/|([^\\:]|^)\/\/.*$/gm;let _0x305eec=JSON[_0x4e77('0xc')](''+_0x3603de)[_0x4e77('0xd')](_0x5080a7,'');_0x305eec=_0x305eec[_0x4e77('0xd')](/\s/g,'');let _0x474285=sha256_1[_0x4e77('0xe')](this[_0x4e77('0x7')](_0x305eec));_0x908e66+=_0x474285[_0x4e77('0xf')]((_0x22782f,_0x3027bd)=>0x2*_0x22782f+_0x3027bd);}return'0x'+_0x908e66[_0x4e77('0x10')](0x10);}}exports[_0x4e77('0x11')]=_Assimilator;