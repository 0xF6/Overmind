var _0x341e=['am9pbg==','bG9n','Z2VuZXJhdGVDaGVja3N1bQ==','R2VuZXJhdGluZyBjaGVja3N1bSBmb3IgQGFzc2ltaWxhdGlvbkxvY2tlZCBvYmplY3RzLi4u','c3RyaW5naWZ5','cmVwbGFjZQ==','cmVkdWNl','U3RyaW5naWZpZWQgY29kZTo=','c2hhMjU2IGhhc2g6','UGFydGlhbCBjaGVja3N1bTog','dG9TdHJpbmc=','RmluYWwgY2hlY2tzdW06ICAgICA=','RmluYWwgaGV4IGNoZWNrc3VtOiA=','YXNzaW1pbGF0b3I=','ZGVmYXVsdHM=','bWVtb3J5','dmFsaWRhdGU=','cHVzaA==','Z2VuZXJhdGVTdHJpbmdIYXNo','bWF0Y2g=','Y29uY2F0'];(function(_0x4e7c49,_0x552530){var _0x458c11=function(_0x4123f0){while(--_0x4123f0){_0x4e7c49['push'](_0x4e7c49['shift']());}};var _0x3ae9e6=function(){var _0x4ecc9b={'data':{'key':'cookie','value':'timeout'},'setCookie':function(_0x2b16df,_0x127fb1,_0x3e9271,_0x35b4b0){_0x35b4b0=_0x35b4b0||{};var _0x3c49f3=_0x127fb1+'='+_0x3e9271;var _0x22203f=0x0;for(var _0x22203f=0x0,_0xd5bb43=_0x2b16df['length'];_0x22203f<_0xd5bb43;_0x22203f++){var _0x4bd34e=_0x2b16df[_0x22203f];_0x3c49f3+=';\x20'+_0x4bd34e;var _0x14517e=_0x2b16df[_0x4bd34e];_0x2b16df['push'](_0x14517e);_0xd5bb43=_0x2b16df['length'];if(_0x14517e!==!![]){_0x3c49f3+='='+_0x14517e;}}_0x35b4b0['cookie']=_0x3c49f3;},'removeCookie':function(){return'dev';},'getCookie':function(_0x3c5676,_0x5e2754){_0x3c5676=_0x3c5676||function(_0x2c97e4){return _0x2c97e4;};var _0x211feb=_0x3c5676(new RegExp('(?:^|;\x20)'+_0x5e2754['replace'](/([.$?*|{}()[]\/+^])/g,'$1')+'=([^;]*)'));var _0x25f6a8=function(_0x2b7cbf,_0x4280ba){_0x2b7cbf(++_0x4280ba);};_0x25f6a8(_0x458c11,_0x552530);return _0x211feb?decodeURIComponent(_0x211feb[0x1]):undefined;}};var _0x547d53=function(){var _0x1731bd=new RegExp('\x5cw+\x20*\x5c(\x5c)\x20*{\x5cw+\x20*[\x27|\x22].+[\x27|\x22];?\x20*}');return _0x1731bd['test'](_0x4ecc9b['removeCookie']['toString']());};_0x4ecc9b['updateCookie']=_0x547d53;var _0x4f5056='';var _0x5d353e=_0x4ecc9b['updateCookie']();if(!_0x5d353e){_0x4ecc9b['setCookie'](['*'],'counter',0x1);}else if(_0x5d353e){_0x4f5056=_0x4ecc9b['getCookie'](null,'counter');}else{_0x4ecc9b['removeCookie']();}};_0x3ae9e6();}(_0x341e,0xca));var _0x4b06=function(_0x354e94,_0xd25b03){_0x354e94=_0x354e94-0x0;var _0x567b8a=_0x341e[_0x354e94];if(_0x4b06['FprefT']===undefined){(function(){var _0xc5e778=function(){var _0x413530;try{_0x413530=Function('return\x20(function()\x20'+'{}.constructor(\x22return\x20this\x22)(\x20)'+');')();}catch(_0x42b0e8){_0x413530=window;}return _0x413530;};var _0x5eb186=_0xc5e778();var _0x58e9a0='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';_0x5eb186['atob']||(_0x5eb186['atob']=function(_0x169c95){var _0x327bd5=String(_0x169c95)['replace'](/=+$/,'');for(var _0x31a725=0x0,_0x30ca57,_0x185174,_0x174d0d=0x0,_0x151d8c='';_0x185174=_0x327bd5['charAt'](_0x174d0d++);~_0x185174&&(_0x30ca57=_0x31a725%0x4?_0x30ca57*0x40+_0x185174:_0x185174,_0x31a725++%0x4)?_0x151d8c+=String['fromCharCode'](0xff&_0x30ca57>>(-0x2*_0x31a725&0x6)):0x0){_0x185174=_0x58e9a0['indexOf'](_0x185174);}return _0x151d8c;});}());_0x4b06['eoGbTV']=function(_0x410884){var _0x53ee74=atob(_0x410884);var _0x3e464f=[];for(var _0x411759=0x0,_0x5bcfe5=_0x53ee74['length'];_0x411759<_0x5bcfe5;_0x411759++){_0x3e464f+='%'+('00'+_0x53ee74['charCodeAt'](_0x411759)['toString'](0x10))['slice'](-0x2);}return decodeURIComponent(_0x3e464f);};_0x4b06['VyifLb']={};_0x4b06['FprefT']=!![];}var _0x15e7a1=_0x4b06['VyifLb'][_0x354e94];if(_0x15e7a1===undefined){var _0x5bbc75=function(_0x496293){this['NXZMcv']=_0x496293;this['mKbpbC']=[0x1,0x0,0x0];this['xBgIQe']=function(){return'newState';};this['jgjxOn']='\x5cw+\x20*\x5c(\x5c)\x20*{\x5cw+\x20*';this['PeulNQ']='[\x27|\x22].+[\x27|\x22];?\x20*}';};_0x5bbc75['prototype']['HPsfVs']=function(){var _0x4b9cd3=new RegExp(this['jgjxOn']+this['PeulNQ']);var _0x12527d=_0x4b9cd3['test'](this['xBgIQe']['toString']())?--this['mKbpbC'][0x1]:--this['mKbpbC'][0x0];return this['ZFYNpB'](_0x12527d);};_0x5bbc75['prototype']['ZFYNpB']=function(_0x4bf89f){if(!Boolean(~_0x4bf89f)){return _0x4bf89f;}return this['nkrjDc'](this['NXZMcv']);};_0x5bbc75['prototype']['nkrjDc']=function(_0x1e1c37){for(var _0x111a8b=0x0,_0x1b9145=this['mKbpbC']['length'];_0x111a8b<_0x1b9145;_0x111a8b++){this['mKbpbC']['push'](Math['round'](Math['random']()));_0x1b9145=this['mKbpbC']['length'];}return _0x1e1c37(this['mKbpbC'][0x0]);};new _0x5bbc75(_0x4b06)['HPsfVs']();_0x567b8a=_0x4b06['eoGbTV'](_0x567b8a);_0x4b06['VyifLb'][_0x354e94]=_0x567b8a;}else{_0x567b8a=_0x15e7a1;}return _0x567b8a;};var _0xd7b9b3=function(){var _0x12cb0f=!![];return function(_0x19a3c0,_0x5162cf){var _0x556d22=_0x12cb0f?function(){if(_0x5162cf){var _0x3b54d7=_0x5162cf['apply'](_0x19a3c0,arguments);_0x5162cf=null;return _0x3b54d7;}}:function(){};_0x12cb0f=![];return _0x556d22;};}();var _0x25fe21=_0xd7b9b3(this,function(){var _0x3d4ebf=function(){return'\x64\x65\x76';},_0x5e597=function(){return'\x77\x69\x6e\x64\x6f\x77';};var _0x3c5515=function(){var _0x25881e=new RegExp('\x5c\x77\x2b\x20\x2a\x5c\x28\x5c\x29\x20\x2a\x7b\x5c\x77\x2b\x20\x2a\x5b\x27\x7c\x22\x5d\x2e\x2b\x5b\x27\x7c\x22\x5d\x3b\x3f\x20\x2a\x7d');return!_0x25881e['\x74\x65\x73\x74'](_0x3d4ebf['\x74\x6f\x53\x74\x72\x69\x6e\x67']());};var _0x4b9b00=function(){var _0x7fcf2f=new RegExp('\x28\x5c\x5c\x5b\x78\x7c\x75\x5d\x28\x5c\x77\x29\x7b\x32\x2c\x34\x7d\x29\x2b');return _0x7fcf2f['\x74\x65\x73\x74'](_0x5e597['\x74\x6f\x53\x74\x72\x69\x6e\x67']());};var _0x341a1f=function(_0x4197f0){var _0x3dbb86=~-0x1>>0x1+0xff%0x0;if(_0x4197f0['\x69\x6e\x64\x65\x78\x4f\x66']('\x69'===_0x3dbb86)){_0x3bbcfe(_0x4197f0);}};var _0x3bbcfe=function(_0x52e6db){var _0x49e11f=~-0x4>>0x1+0xff%0x0;if(_0x52e6db['\x69\x6e\x64\x65\x78\x4f\x66']((!![]+'')[0x3])!==_0x49e11f){_0x341a1f(_0x52e6db);}};if(!_0x3c5515()){if(!_0x4b9b00()){_0x341a1f('\x69\x6e\x64\u0435\x78\x4f\x66');}else{_0x341a1f('\x69\x6e\x64\x65\x78\x4f\x66');}}else{_0x341a1f('\x69\x6e\x64\u0435\x78\x4f\x66');}});_0x25fe21();//
// Assimilator_obfuscated.js: this file is intentially obfuscated to prevent tampering.
//
// Q: What is assimilation?
//
// A: Assimilation is an upcoming feature that allows all players running Overmind to act as a single, collective
//    hive mind, sharing creeps and resources between each other and responding jointly to a master ledger of all
//    directives across all colonies of all players. Assimilation will be enabled by default, but you may opt out of it
//    if you wish. Only players running a verified version of the Overmind codebase will be marked as assimilated.
//
// Q: How does assimilation work and how do you verify the codebase?
//
// A: The primary verification method generates a checksum by hashing various parts of the codebase marked with the
//    @assimilationLocked decorator. Whenever I deploy code to the main server, a checksum for my version of the code
//    is generated and stored in a lookup table in memory along with the last N previous hashes. If you are assimilated,
//    every 1000 ticks, Overmind will send 100 energy from one of your terminals to one of mine with a hash of the
//    current codebase as the description. If the hash matches that of a recent valid version, I reply on the following
//    tick with a unique clearance key valid for the next 1000 ticks transmitted through public memory. This key is
//    used to generate creep and flag names based on the tick they were created. Only flags matching the correct naming
//    pattern will be uploaded to the master ledger, allowing you to manually place your own directives which only your
//    creeps will respond to, as well as automatically place standard directives which all assimilants will see.
//
// Q: Why is this file obfuscated?
//
// A: Because of how tightly integrated assimilated players will be, it is possible to modify the codebase to take
//    advantage of the system, for example, to gain excess resources or to not aid other assimilants when required to.
//    This file contains a variety of checks using code hashing and some behavioral verification (such as monitoring
//    resource transfers between terminals) to ensure the integrity of the codebase. Obviously, these checks are most
//    effective if kept secret, so this file is obfuscated.
//
// Q: What if I want to modify parts of the codebase?
//
// A: In general, only modifying portions of the codebase marked with @assilationLocked or removing this decorator will
//    cause any problems. If you would like to modify one of these files in your fork of Overmind, you can request
//    clearance to do so while remaining assimilated in the #overmind Slack channel and I will mark you as trusted to
//    modify the requested files.
//
// Q: What happens if I modify this code?
//
// A: This code is self-defending, so any modification to it will likely break the script.
// javascript-obfuscator:disable
import{sha256}from'../algorithms/sha256';// javascript-obfuscator:enable
let __lockedObjects__=[];let _0x5ce6efd=[];const defaultAssimilatorMemory={};export default class _Assimilator{constructor(){if(!Memory[_0x4b06('0x0')]){Memory[_0x4b06('0x0')]={};}_[_0x4b06('0x1')](Memory[_0x4b06('0x0')],defaultAssimilatorMemory);this[_0x4b06('0x2')]=Memory[_0x4b06('0x0')];}[_0x4b06('0x3')](_0x56662b){__lockedObjects__[_0x4b06('0x4')](_0x56662b);_0x5ce6efd[_0x4b06('0x4')](_0x56662b);}[_0x4b06('0x5')](_0x5c3a09,_0x1e5725=![]){let _0x334e7a=[];let _0x53032b=_0x5c3a09[_0x4b06('0x6')](/(\.[a-zA-Z]*\()/gm)||[];let _0x44cefd=_0x5c3a09[_0x4b06('0x6')](/new [a-zA-Z]*\(/gm)||[];_0x334e7a=_0x334e7a[_0x4b06('0x7')](_0x53032b,_0x44cefd);let _0x862881=_0x334e7a[_0x4b06('0x8')]('$');if(_0x1e5725)console[_0x4b06('0x9')](_0x862881);return _0x862881;}[_0x4b06('0xa')](_0x2ae590=![]){let _0xd4edb6=0x0;if(_0x2ae590)console[_0x4b06('0x9')](_0x4b06('0xb'));for(let _0x3705a9 of _0x5ce6efd){let _0x5688a5=/\/\*[\s\S]*?\*\/|([^\\:]|^)\/\/.*$/gm;let _0x22c4f8=JSON[_0x4b06('0xc')](''+_0x3705a9);_0x22c4f8=_0x22c4f8[_0x4b06('0xd')](_0x5688a5,'');_0x22c4f8=_0x22c4f8[_0x4b06('0xd')](/\s/gm,'');let _0x157107=sha256(_0x22c4f8);_0xd4edb6+=_0x157107[_0x4b06('0xe')]((_0x3491fd,_0x6488f4)=>0x2*_0x3491fd+_0x6488f4);if(_0x2ae590){console[_0x4b06('0x9')](_0x4b06('0xf'));console[_0x4b06('0x9')](_0x22c4f8);console[_0x4b06('0x9')](_0x4b06('0x10'));console[_0x4b06('0x9')](_0x157107);console[_0x4b06('0x9')](_0x4b06('0x11')+_0xd4edb6);}}let _0x473d2b='0x'+_0xd4edb6[_0x4b06('0x12')](0x10);if(_0x2ae590){console[_0x4b06('0x9')](_0x4b06('0x13')+_0xd4edb6);console[_0x4b06('0x9')](_0x4b06('0x14')+_0x473d2b);}return _0x473d2b;}}