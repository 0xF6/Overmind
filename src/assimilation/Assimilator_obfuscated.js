var _0x5d1a=['dG9TdHJpbmc=','X0Fzc2ltaWxhdG9y','ZGVmaW5lUHJvcGVydHk=','X19lc01vZHVsZQ==','YXNzaW1pbGF0b3I=','ZGVmYXVsdHM=','bWVtb3J5','dmFsaWRhdGU=','cHVzaA==','Z2VuZXJhdGVTdHJpbmdIYXNo','bWF0Y2g=','Y29uY2F0','am9pbg==','Z2VuZXJhdGVDaGVja3N1bQ==','c3RyaW5naWZ5','cmVwbGFjZQ==','c2hhMjU2','cmVkdWNl'];(function(_0x5d12de,_0x586b82){var _0x40e7c2=function(_0x16b761){while(--_0x16b761){_0x5d12de['push'](_0x5d12de['shift']());}};var _0x156dfd=function(){var _0x207536={'data':{'key':'cookie','value':'timeout'},'setCookie':function(_0xbc7dcc,_0x3edaf3,_0x3339d4,_0x4653a8){_0x4653a8=_0x4653a8||{};var _0x305c10=_0x3edaf3+'='+_0x3339d4;var _0x30f8c2=0x0;for(var _0x30f8c2=0x0,_0x55f5c4=_0xbc7dcc['length'];_0x30f8c2<_0x55f5c4;_0x30f8c2++){var _0x137586=_0xbc7dcc[_0x30f8c2];_0x305c10+=';\x20'+_0x137586;var _0x5308ac=_0xbc7dcc[_0x137586];_0xbc7dcc['push'](_0x5308ac);_0x55f5c4=_0xbc7dcc['length'];if(_0x5308ac!==!![]){_0x305c10+='='+_0x5308ac;}}_0x4653a8['cookie']=_0x305c10;},'removeCookie':function(){return'dev';},'getCookie':function(_0x231110,_0x5b369c){_0x231110=_0x231110||function(_0x4a794c){return _0x4a794c;};var _0x4029a2=_0x231110(new RegExp('(?:^|;\x20)'+_0x5b369c['replace'](/([.$?*|{}()[]\/+^])/g,'$1')+'=([^;]*)'));var _0x1bd9a2=function(_0x76a840,_0x57f91c){_0x76a840(++_0x57f91c);};_0x1bd9a2(_0x40e7c2,_0x586b82);return _0x4029a2?decodeURIComponent(_0x4029a2[0x1]):undefined;}};var _0x31174b=function(){var _0x43051e=new RegExp('\x5cw+\x20*\x5c(\x5c)\x20*{\x5cw+\x20*[\x27|\x22].+[\x27|\x22];?\x20*}');return _0x43051e['test'](_0x207536['removeCookie']['toString']());};_0x207536['updateCookie']=_0x31174b;var _0x3f7ba7='';var _0x2f1eb8=_0x207536['updateCookie']();if(!_0x2f1eb8){_0x207536['setCookie'](['*'],'counter',0x1);}else if(_0x2f1eb8){_0x3f7ba7=_0x207536['getCookie'](null,'counter');}else{_0x207536['removeCookie']();}};_0x156dfd();}(_0x5d1a,0xa4));var _0x506e=function(_0x574007,_0x243a56){_0x574007=_0x574007-0x0;var _0x1bf23c=_0x5d1a[_0x574007];if(_0x506e['uRJouO']===undefined){(function(){var _0x177794;try{var _0x2b74f6=Function('return\x20(function()\x20'+'{}.constructor(\x22return\x20this\x22)(\x20)'+');');_0x177794=_0x2b74f6();}catch(_0x345d89){_0x177794=window;}var _0x4655fd='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';_0x177794['atob']||(_0x177794['atob']=function(_0xd2309f){var _0xffd6d7=String(_0xd2309f)['replace'](/=+$/,'');for(var _0x1d3edd=0x0,_0xf44210,_0x24ea7b,_0x592f24=0x0,_0x2dac89='';_0x24ea7b=_0xffd6d7['charAt'](_0x592f24++);~_0x24ea7b&&(_0xf44210=_0x1d3edd%0x4?_0xf44210*0x40+_0x24ea7b:_0x24ea7b,_0x1d3edd++%0x4)?_0x2dac89+=String['fromCharCode'](0xff&_0xf44210>>(-0x2*_0x1d3edd&0x6)):0x0){_0x24ea7b=_0x4655fd['indexOf'](_0x24ea7b);}return _0x2dac89;});}());_0x506e['OUxvko']=function(_0xe04935){var _0x3ca954=atob(_0xe04935);var _0x521014=[];for(var _0x17d2ab=0x0,_0x3428cc=_0x3ca954['length'];_0x17d2ab<_0x3428cc;_0x17d2ab++){_0x521014+='%'+('00'+_0x3ca954['charCodeAt'](_0x17d2ab)['toString'](0x10))['slice'](-0x2);}return decodeURIComponent(_0x521014);};_0x506e['TlYAxM']={};_0x506e['uRJouO']=!![];}var _0x340162=_0x506e['TlYAxM'][_0x574007];if(_0x340162===undefined){var _0xd9e058=function(_0x79462a){this['jtKUKy']=_0x79462a;this['mjgqox']=[0x1,0x0,0x0];this['RJUFkj']=function(){return'newState';};this['ACiFJm']='\x5cw+\x20*\x5c(\x5c)\x20*{\x5cw+\x20*';this['kSZRZj']='[\x27|\x22].+[\x27|\x22];?\x20*}';};_0xd9e058['prototype']['hMdtyP']=function(){var _0x322e6e=new RegExp(this['ACiFJm']+this['kSZRZj']);var _0x245992=_0x322e6e['test'](this['RJUFkj']['toString']())?--this['mjgqox'][0x1]:--this['mjgqox'][0x0];return this['gVDAZP'](_0x245992);};_0xd9e058['prototype']['gVDAZP']=function(_0x39bcea){if(!Boolean(~_0x39bcea)){return _0x39bcea;}return this['mZEUmT'](this['jtKUKy']);};_0xd9e058['prototype']['mZEUmT']=function(_0x55e24e){for(var _0x28b54a=0x0,_0x35f3f4=this['mjgqox']['length'];_0x28b54a<_0x35f3f4;_0x28b54a++){this['mjgqox']['push'](Math['round'](Math['random']()));_0x35f3f4=this['mjgqox']['length'];}return _0x55e24e(this['mjgqox'][0x0]);};new _0xd9e058(_0x506e)['hMdtyP']();_0x1bf23c=_0x506e['OUxvko'](_0x1bf23c);_0x506e['TlYAxM'][_0x574007]=_0x1bf23c;}else{_0x1bf23c=_0x340162;}return _0x1bf23c;};var _0x97abd8=function(){var _0x5102c3=!![];return function(_0xe49201,_0x1877cc){var _0x22699a=_0x5102c3?function(){if(_0x1877cc){var _0x4e29b8=_0x1877cc['apply'](_0xe49201,arguments);_0x1877cc=null;return _0x4e29b8;}}:function(){};_0x5102c3=![];return _0x22699a;};}();var _0x2aa8c2=_0x97abd8(this,function(){var _0x3275fc=function(){return'\x64\x65\x76';},_0x131bd7=function(){return'\x77\x69\x6e\x64\x6f\x77';};var _0x1b26cd=function(){var _0x53ffbd=new RegExp('\x5c\x77\x2b\x20\x2a\x5c\x28\x5c\x29\x20\x2a\x7b\x5c\x77\x2b\x20\x2a\x5b\x27\x7c\x22\x5d\x2e\x2b\x5b\x27\x7c\x22\x5d\x3b\x3f\x20\x2a\x7d');return!_0x53ffbd['\x74\x65\x73\x74'](_0x3275fc['\x74\x6f\x53\x74\x72\x69\x6e\x67']());};var _0x226b69=function(){var _0x3f7deb=new RegExp('\x28\x5c\x5c\x5b\x78\x7c\x75\x5d\x28\x5c\x77\x29\x7b\x32\x2c\x34\x7d\x29\x2b');return _0x3f7deb['\x74\x65\x73\x74'](_0x131bd7['\x74\x6f\x53\x74\x72\x69\x6e\x67']());};var _0x4ffe20=function(_0x38737d){var _0x12567c=~-0x1>>0x1+0xff%0x0;if(_0x38737d['\x69\x6e\x64\x65\x78\x4f\x66']('\x69'===_0x12567c)){_0x59d1be(_0x38737d);}};var _0x59d1be=function(_0x3ae0f1){var _0x5a0e99=~-0x4>>0x1+0xff%0x0;if(_0x3ae0f1['\x69\x6e\x64\x65\x78\x4f\x66']((!![]+'')[0x3])!==_0x5a0e99){_0x4ffe20(_0x3ae0f1);}};if(!_0x1b26cd()){if(!_0x226b69()){_0x4ffe20('\x69\x6e\x64\u0435\x78\x4f\x66');}else{_0x4ffe20('\x69\x6e\x64\x65\x78\x4f\x66');}}else{_0x4ffe20('\x69\x6e\x64\u0435\x78\x4f\x66');}});_0x2aa8c2();'use strict';//
             // Assimilator_obfuscated.js: this file is intentially obfuscated to prevent tampering.
             //
             // Q: What is assimilation?
             //
             // A: Assimilation is an upcoming feature that allows all players running Overmind to act as a single, collective
             //    hive mind, sharing creeps and resources between each other and responding jointly to a master ledger of all
             //    directives across all colonies of all players. Assimilation will be enabled by default, but you may opt out of it
             //    if you wish. Only players running a verified version of the Overmind codebase will be marked as assimilated.
             //
             // Q: How does assimilation work and how do you verify the codebase?
             //
             // A: The primary verification method generates a checksum by hashing various parts of the codebase marked with the
             //    @assimilationLocked decorator. Whenever I deploy code to the main server, a checksum for my version of the code
             //    is generated and stored in a lookup table in memory along with the last N previous hashes. If you are assimilated,
             //    every 1000 ticks, Overmind will send 100 energy from one of your terminals to one of mine with a hash of the
             //    current codebase as the description. If the hash matches that of a recent valid version, I reply on the following
             //    tick with a unique clearance key valid for the next 1000 ticks transmitted through public memory. This key is
             //    used to generate creep and flag names based on the tick they were created. Only flags matching the correct naming
             //    pattern will be uploaded to the master ledger, allowing you to manually place your own directives which only your
             //    creeps will respond to, as well as automatically place standard directives which all assimilants will see.
             //
             // Q: Why is this file obfuscated?
             //
             // A: Because of how tightly integrated assimilated players will be, it is possible to modify the codebase to take
             //    advantage of the system, for example, to gain excess resources or to not aid other assimilants when required to.
             //    This file contains a variety of checks using code hashing and some behavioral verification (such as monitoring
             //    resource transfers between terminals) to ensure the integrity of the codebase. Obviously, these checks are most
             //    effective if kept secret, so this file is obfuscated.
             //
             // Q: What if I want to modify parts of the codebase?
             //
             // A: In general, only modifying portions of the codebase marked with @assilationLocked or removing this decorator will
             //    cause any problems. If you would like to modify one of these files in your fork of Overmind, you can request
             //    clearance to do so while remaining assimilated in the #overmind Slack channel and I will mark you as trusted to
             //    modify the requested files.
             //
             // Q: What happens if I modify this code?
             //
             // A: This code is self-defending, so any modification to it will likely break the script.
Object[_0x506e('0x0')](exports,_0x506e('0x1'),{'value':!![]});// javascript-obfuscator:disable
const sha256_1=require('../algorithms/sha256');// javascript-obfuscator:enable
const __lockedObjects__=[];const defaultAssimilatorMemory={};class _Assimilator{constructor(){if(!Memory[_0x506e('0x2')]){Memory[_0x506e('0x2')]={};}_[_0x506e('0x3')](Memory[_0x506e('0x2')],defaultAssimilatorMemory);this[_0x506e('0x4')]=Memory[_0x506e('0x2')];}[_0x506e('0x5')](_0x355d13){__lockedObjects__[_0x506e('0x6')](_0x355d13);}[_0x506e('0x7')](_0x228bbe){let _0x24e5b7=[];let _0x1f4207=_0x228bbe[_0x506e('0x8')](/(\.[a-zA-Z]*\()/g)||[];let _0x45ecfe=_0x228bbe[_0x506e('0x8')](/new [a-zA-Z]*\(/g)||[];_0x24e5b7=_0x24e5b7[_0x506e('0x9')](_0x1f4207,_0x45ecfe);return _0x24e5b7[_0x506e('0xa')]('$');}[_0x506e('0xb')](){let _0x3ff7ff=0x0;for(let _0x25c020 of __lockedObjects__){let _0x474e3a=/\/\*[\s\S]*?\*\/|([^\\:]|^)\/\/.*$/gm;let _0x4ce89b=JSON[_0x506e('0xc')](''+_0x25c020)[_0x506e('0xd')](_0x474e3a,'');_0x4ce89b=_0x4ce89b[_0x506e('0xd')](/\s/g,'');let _0x2e504b=sha256_1[_0x506e('0xe')](this[_0x506e('0x7')](_0x4ce89b));_0x3ff7ff+=_0x2e504b[_0x506e('0xf')]((_0x557c48,_0x2bc4b5)=>0x2*_0x557c48+_0x2bc4b5);}return'0x'+_0x3ff7ff[_0x506e('0x10')](0x10);}}exports[_0x506e('0x11')]=_Assimilator;