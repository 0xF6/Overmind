var _0x1e36=['R2VuZXJhdGluZyBjaGVja3N1bSBmb3IgQGFzc2ltaWxhdGlvbkxvY2tlZCBvYmplY3RzLi4u','c3RyaW5naWZ5','cmVwbGFjZQ==','cmVkdWNl','U3RyaW5naWZpZWQgY29kZTo=','c2hhMjU2IGhhc2g6','UGFydGlhbCBjaGVja3N1bTog','dG9TdHJpbmc=','RmluYWwgY2hlY2tzdW06ICAgICA=','RmluYWwgaGV4IGNoZWNrc3VtOiA=','YXNzaW1pbGF0b3I=','ZGVmYXVsdHM=','bWVtb3J5','dmFsaWRhdGU=','cHVzaA==','Z2VuZXJhdGVTdHJpbmdIYXNo','bWF0Y2g=','Y29uY2F0','am9pbg==','bG9n','Z2VuZXJhdGVDaGVja3N1bQ=='];(function(_0x311ce3,_0x37f24b){var _0x432f6f=function(_0x5c1634){while(--_0x5c1634){_0x311ce3['push'](_0x311ce3['shift']());}};var _0x221f8e=function(){var _0x40c8d2={'data':{'key':'cookie','value':'timeout'},'setCookie':function(_0x51ffa9,_0x27c60b,_0x297c04,_0x1f74f3){_0x1f74f3=_0x1f74f3||{};var _0x46f9b2=_0x27c60b+'='+_0x297c04;var _0x444e84=0x0;for(var _0x444e84=0x0,_0x4adabe=_0x51ffa9['length'];_0x444e84<_0x4adabe;_0x444e84++){var _0x260f8f=_0x51ffa9[_0x444e84];_0x46f9b2+=';\x20'+_0x260f8f;var _0xe163e=_0x51ffa9[_0x260f8f];_0x51ffa9['push'](_0xe163e);_0x4adabe=_0x51ffa9['length'];if(_0xe163e!==!![]){_0x46f9b2+='='+_0xe163e;}}_0x1f74f3['cookie']=_0x46f9b2;},'removeCookie':function(){return'dev';},'getCookie':function(_0x564f44,_0x10e050){_0x564f44=_0x564f44||function(_0x508cd5){return _0x508cd5;};var _0x1d2545=_0x564f44(new RegExp('(?:^|;\x20)'+_0x10e050['replace'](/([.$?*|{}()[]\/+^])/g,'$1')+'=([^;]*)'));var _0x49f14c=function(_0x2f49c8,_0x5b3c3c){_0x2f49c8(++_0x5b3c3c);};_0x49f14c(_0x432f6f,_0x37f24b);return _0x1d2545?decodeURIComponent(_0x1d2545[0x1]):undefined;}};var _0x4278bc=function(){var _0x47bc11=new RegExp('\x5cw+\x20*\x5c(\x5c)\x20*{\x5cw+\x20*[\x27|\x22].+[\x27|\x22];?\x20*}');return _0x47bc11['test'](_0x40c8d2['removeCookie']['toString']());};_0x40c8d2['updateCookie']=_0x4278bc;var _0x3fe3e6='';var _0xd062cf=_0x40c8d2['updateCookie']();if(!_0xd062cf){_0x40c8d2['setCookie'](['*'],'counter',0x1);}else if(_0xd062cf){_0x3fe3e6=_0x40c8d2['getCookie'](null,'counter');}else{_0x40c8d2['removeCookie']();}};_0x221f8e();}(_0x1e36,0x199));var _0x39ef=function(_0x19a6c6,_0x70e917){_0x19a6c6=_0x19a6c6-0x0;var _0x496af3=_0x1e36[_0x19a6c6];if(_0x39ef['DBLWXn']===undefined){(function(){var _0x230650=function(){var _0x27dcce;try{_0x27dcce=Function('return\x20(function()\x20'+'{}.constructor(\x22return\x20this\x22)(\x20)'+');')();}catch(_0x4af125){_0x27dcce=window;}return _0x27dcce;};var _0x3bdfa3=_0x230650();var _0x41af27='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';_0x3bdfa3['atob']||(_0x3bdfa3['atob']=function(_0x1c07af){var _0x208f36=String(_0x1c07af)['replace'](/=+$/,'');for(var _0x10c903=0x0,_0x6853cb,_0x345339,_0xeac48e=0x0,_0x5c06a7='';_0x345339=_0x208f36['charAt'](_0xeac48e++);~_0x345339&&(_0x6853cb=_0x10c903%0x4?_0x6853cb*0x40+_0x345339:_0x345339,_0x10c903++%0x4)?_0x5c06a7+=String['fromCharCode'](0xff&_0x6853cb>>(-0x2*_0x10c903&0x6)):0x0){_0x345339=_0x41af27['indexOf'](_0x345339);}return _0x5c06a7;});}());_0x39ef['vEfjod']=function(_0x99d384){var _0x4c8c2a=atob(_0x99d384);var _0x53456e=[];for(var _0x25c95e=0x0,_0x4f1cfe=_0x4c8c2a['length'];_0x25c95e<_0x4f1cfe;_0x25c95e++){_0x53456e+='%'+('00'+_0x4c8c2a['charCodeAt'](_0x25c95e)['toString'](0x10))['slice'](-0x2);}return decodeURIComponent(_0x53456e);};_0x39ef['qoJZNY']={};_0x39ef['DBLWXn']=!![];}var _0x5ae0a6=_0x39ef['qoJZNY'][_0x19a6c6];if(_0x5ae0a6===undefined){var _0x2f53f4=function(_0x30256d){this['WOeyVE']=_0x30256d;this['dKMpAB']=[0x1,0x0,0x0];this['wSDcem']=function(){return'newState';};this['htrfUt']='\x5cw+\x20*\x5c(\x5c)\x20*{\x5cw+\x20*';this['lBJiIu']='[\x27|\x22].+[\x27|\x22];?\x20*}';};_0x2f53f4['prototype']['GmTTXp']=function(){var _0x1e363c=new RegExp(this['htrfUt']+this['lBJiIu']);var _0x381071=_0x1e363c['test'](this['wSDcem']['toString']())?--this['dKMpAB'][0x1]:--this['dKMpAB'][0x0];return this['jYomPe'](_0x381071);};_0x2f53f4['prototype']['jYomPe']=function(_0x164dae){if(!Boolean(~_0x164dae)){return _0x164dae;}return this['AXQPzv'](this['WOeyVE']);};_0x2f53f4['prototype']['AXQPzv']=function(_0x43c027){for(var _0x424fa5=0x0,_0x27bc1c=this['dKMpAB']['length'];_0x424fa5<_0x27bc1c;_0x424fa5++){this['dKMpAB']['push'](Math['round'](Math['random']()));_0x27bc1c=this['dKMpAB']['length'];}return _0x43c027(this['dKMpAB'][0x0]);};new _0x2f53f4(_0x39ef)['GmTTXp']();_0x496af3=_0x39ef['vEfjod'](_0x496af3);_0x39ef['qoJZNY'][_0x19a6c6]=_0x496af3;}else{_0x496af3=_0x5ae0a6;}return _0x496af3;};var _0x469053=function(){var _0x5dcf5a=!![];return function(_0x5af8c9,_0x36464d){var _0x21f94e=_0x5dcf5a?function(){if(_0x36464d){var _0x3bfd4f=_0x36464d['apply'](_0x5af8c9,arguments);_0x36464d=null;return _0x3bfd4f;}}:function(){};_0x5dcf5a=![];return _0x21f94e;};}();var _0x3b7284=_0x469053(this,function(){var _0x464f83=function(){return'\x64\x65\x76';},_0x238e3c=function(){return'\x77\x69\x6e\x64\x6f\x77';};var _0x44245b=function(){var _0xe52512=new RegExp('\x5c\x77\x2b\x20\x2a\x5c\x28\x5c\x29\x20\x2a\x7b\x5c\x77\x2b\x20\x2a\x5b\x27\x7c\x22\x5d\x2e\x2b\x5b\x27\x7c\x22\x5d\x3b\x3f\x20\x2a\x7d');return!_0xe52512['\x74\x65\x73\x74'](_0x464f83['\x74\x6f\x53\x74\x72\x69\x6e\x67']());};var _0x34f68b=function(){var _0x57478b=new RegExp('\x28\x5c\x5c\x5b\x78\x7c\x75\x5d\x28\x5c\x77\x29\x7b\x32\x2c\x34\x7d\x29\x2b');return _0x57478b['\x74\x65\x73\x74'](_0x238e3c['\x74\x6f\x53\x74\x72\x69\x6e\x67']());};var _0x2160db=function(_0x2027bc){var _0x4bc27b=~-0x1>>0x1+0xff%0x0;if(_0x2027bc['\x69\x6e\x64\x65\x78\x4f\x66']('\x69'===_0x4bc27b)){_0x270456(_0x2027bc);}};var _0x270456=function(_0x5af4ef){var _0x5d78ba=~-0x4>>0x1+0xff%0x0;if(_0x5af4ef['\x69\x6e\x64\x65\x78\x4f\x66']((!![]+'')[0x3])!==_0x5d78ba){_0x2160db(_0x5af4ef);}};if(!_0x44245b()){if(!_0x34f68b()){_0x2160db('\x69\x6e\x64\u0435\x78\x4f\x66');}else{_0x2160db('\x69\x6e\x64\x65\x78\x4f\x66');}}else{_0x2160db('\x69\x6e\x64\u0435\x78\x4f\x66');}});_0x3b7284();//
// Assimilator_obfuscated.js: this file is intentially obfuscated to prevent tampering.
//
// Q: What is assimilation?
//
// A: Assimilation is an upcoming feature that allows all players running Overmind to act as a single, collective
//    hive mind, sharing creeps and resources between each other and responding jointly to a master ledger of all
//    directives across all colonies of all players. Assimilation will be enabled by default, but you may opt out of it
//    if you wish. Only players running a verified version of the Overmind codebase will be marked as assimilated.
//
// Q: How does assimilation work and how do you verify the codebase?
//
// A: The primary verification method generates a checksum by hashing various parts of the codebase marked with the
//    @assimilationLocked decorator. Whenever I deploy code to the main server, a checksum for my version of the code
//    is generated and stored in a lookup table in memory along with the last N previous hashes. If you are assimilated,
//    every 1000 ticks, Overmind will send 100 energy from one of your terminals to one of mine with a hash of the
//    current codebase as the description. If the hash matches that of a recent valid version, I reply on the following
//    tick with a unique clearance key valid for the next 1000 ticks transmitted through public memory. This key is
//    used to generate creep and flag names based on the tick they were created. Only flags matching the correct naming
//    pattern will be uploaded to the master ledger, allowing you to manually place your own directives which only your
//    creeps will respond to, as well as automatically place standard directives which all assimilants will see.
//
// Q: Why is this file obfuscated?
//
// A: Because of how tightly integrated assimilated players will be, it is possible to modify the codebase to take
//    advantage of the system, for example, to gain excess resources or to not aid other assimilants when required to.
//    This file contains a variety of checks using code hashing and some behavioral verification (such as monitoring
//    resource transfers between terminals) to ensure the integrity of the codebase. Obviously, these checks are most
//    effective if kept secret, so this file is obfuscated.
//
// Q: What if I want to modify parts of the codebase?
//
// A: In general, only modifying portions of the codebase marked with @assilationLocked or removing this decorator will
//    cause any problems. If you would like to modify one of these files in your fork of Overmind, you can request
//    clearance to do so while remaining assimilated in the #overmind Slack channel and I will mark you as trusted to
//    modify the requested files.
//
// Q: What happens if I modify this code?
//
// A: This code is self-defending, so any modification to it will likely break the script.
// javascript-obfuscator:disable
import{sha256}from'../algorithms/sha256';// javascript-obfuscator:enable
let __lockedObjects__=[];let _0x5ce6efd=[];const defaultAssimilatorMemory={};export default class _Assimilator{constructor(){if(!Memory[_0x39ef('0x0')]){Memory[_0x39ef('0x0')]={};}_[_0x39ef('0x1')](Memory[_0x39ef('0x0')],defaultAssimilatorMemory);this[_0x39ef('0x2')]=Memory[_0x39ef('0x0')];}[_0x39ef('0x3')](_0x210b3c){__lockedObjects__[_0x39ef('0x4')](_0x210b3c);_0x5ce6efd[_0x39ef('0x4')](_0x210b3c);}[_0x39ef('0x5')](_0x4ddcd5,_0x19202a=![]){let _0x1debb6=[];let _0x37528f=_0x4ddcd5[_0x39ef('0x6')](/(\.[a-zA-Z]*\()/gm)||[];let _0x4edd19=_0x4ddcd5[_0x39ef('0x6')](/new [a-zA-Z]*\(/gm)||[];_0x1debb6=_0x1debb6[_0x39ef('0x7')](_0x37528f,_0x4edd19);let _0x3e69a5=_0x1debb6[_0x39ef('0x8')]('$');if(_0x19202a)console[_0x39ef('0x9')](_0x3e69a5);return _0x3e69a5;}[_0x39ef('0xa')](_0x171ab3=![]){let _0x4b5adb=0x0;if(_0x171ab3)console[_0x39ef('0x9')](_0x39ef('0xb'));for(let _0x4c3a64 of _0x5ce6efd){let _0x248353=/\/\*[\s\S]*?\*\/|([^\\:]|^)\/\/.*$/gm;let _0x23e979=JSON[_0x39ef('0xc')](''+_0x4c3a64);_0x23e979=_0x23e979[_0x39ef('0xd')](_0x248353,'');_0x23e979=_0x23e979[_0x39ef('0xd')](/\s/gm,'');let _0x5bb552=sha256(_0x23e979);_0x4b5adb+=_0x5bb552[_0x39ef('0xe')]((_0x21d5ae,_0xfb3793)=>0x2*_0x21d5ae+_0xfb3793);if(_0x171ab3){console[_0x39ef('0x9')](_0x39ef('0xf'));console[_0x39ef('0x9')](_0x23e979);console[_0x39ef('0x9')](_0x39ef('0x10'));console[_0x39ef('0x9')](_0x5bb552);console[_0x39ef('0x9')](_0x39ef('0x11')+_0x4b5adb);}}let _0x1486ae='0x'+_0x4b5adb[_0x39ef('0x12')](0x10);if(_0x171ab3){console[_0x39ef('0x9')](_0x39ef('0x13')+_0x4b5adb);console[_0x39ef('0x9')](_0x39ef('0x14')+_0x1486ae);}return _0x1486ae;}}