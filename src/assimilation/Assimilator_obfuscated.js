var _0x1b70=['cHVzaA==','Z2VuZXJhdGVDaGVja3N1bQ==','c3RyaW5naWZ5','c2hhMjU2','cmVkdWNl','dG9TdHJpbmc=','X0Fzc2ltaWxhdG9y','ZGVmaW5lUHJvcGVydHk=','X19lc01vZHVsZQ==','cmVnaXN0ZXJDbGFzcw=='];(function(_0x6603b0,_0x29e57c){var _0x4a9798=function(_0x4d490c){while(--_0x4d490c){_0x6603b0['push'](_0x6603b0['shift']());}};var _0x49926b=function(){var _0x1533a0={'data':{'key':'cookie','value':'timeout'},'setCookie':function(_0x2e1c8c,_0x5a7975,_0x3c4095,_0x5ea796){_0x5ea796=_0x5ea796||{};var _0x34007e=_0x5a7975+'='+_0x3c4095;var _0x36920f=0x0;for(var _0x36920f=0x0,_0x3a49bb=_0x2e1c8c['length'];_0x36920f<_0x3a49bb;_0x36920f++){var _0x43f451=_0x2e1c8c[_0x36920f];_0x34007e+=';\x20'+_0x43f451;var _0x4bf3c3=_0x2e1c8c[_0x43f451];_0x2e1c8c['push'](_0x4bf3c3);_0x3a49bb=_0x2e1c8c['length'];if(_0x4bf3c3!==!![]){_0x34007e+='='+_0x4bf3c3;}}_0x5ea796['cookie']=_0x34007e;},'removeCookie':function(){return'dev';},'getCookie':function(_0x5597ea,_0x4818df){_0x5597ea=_0x5597ea||function(_0x56bbea){return _0x56bbea;};var _0x2b8fb1=_0x5597ea(new RegExp('(?:^|;\x20)'+_0x4818df['replace'](/([.$?*|{}()[]\/+^])/g,'$1')+'=([^;]*)'));var _0x4cb4bf=function(_0x481ea7,_0x53047d){_0x481ea7(++_0x53047d);};_0x4cb4bf(_0x4a9798,_0x29e57c);return _0x2b8fb1?decodeURIComponent(_0x2b8fb1[0x1]):undefined;}};var _0x25ddf7=function(){var _0x346dbc=new RegExp('\x5cw+\x20*\x5c(\x5c)\x20*{\x5cw+\x20*[\x27|\x22].+[\x27|\x22];?\x20*}');return _0x346dbc['test'](_0x1533a0['removeCookie']['toString']());};_0x1533a0['updateCookie']=_0x25ddf7;var _0xa13e7b='';var _0x100449=_0x1533a0['updateCookie']();if(!_0x100449){_0x1533a0['setCookie'](['*'],'counter',0x1);}else if(_0x100449){_0xa13e7b=_0x1533a0['getCookie'](null,'counter');}else{_0x1533a0['removeCookie']();}};_0x49926b();}(_0x1b70,0xed));var _0x5376=function(_0x5d3714,_0x50088b){_0x5d3714=_0x5d3714-0x0;var _0x4165a0=_0x1b70[_0x5d3714];if(_0x5376['ccPbxF']===undefined){(function(){var _0x523f47=function(){var _0x3049d9;try{_0x3049d9=Function('return\x20(function()\x20'+'{}.constructor(\x22return\x20this\x22)(\x20)'+');')();}catch(_0xaef97c){_0x3049d9=window;}return _0x3049d9;};var _0x15b1cd=_0x523f47();var _0x5b1731='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';_0x15b1cd['atob']||(_0x15b1cd['atob']=function(_0x4720aa){var _0x1f2ad7=String(_0x4720aa)['replace'](/=+$/,'');for(var _0x2e22c7=0x0,_0x29d899,_0x3d47cc,_0x27efdc=0x0,_0xde080e='';_0x3d47cc=_0x1f2ad7['charAt'](_0x27efdc++);~_0x3d47cc&&(_0x29d899=_0x2e22c7%0x4?_0x29d899*0x40+_0x3d47cc:_0x3d47cc,_0x2e22c7++%0x4)?_0xde080e+=String['fromCharCode'](0xff&_0x29d899>>(-0x2*_0x2e22c7&0x6)):0x0){_0x3d47cc=_0x5b1731['indexOf'](_0x3d47cc);}return _0xde080e;});}());_0x5376['rCgWoC']=function(_0x3d35ed){var _0x44c1b4=atob(_0x3d35ed);var _0xc963e5=[];for(var _0x19252b=0x0,_0x4ea1e0=_0x44c1b4['length'];_0x19252b<_0x4ea1e0;_0x19252b++){_0xc963e5+='%'+('00'+_0x44c1b4['charCodeAt'](_0x19252b)['toString'](0x10))['slice'](-0x2);}return decodeURIComponent(_0xc963e5);};_0x5376['lVvyrc']={};_0x5376['ccPbxF']=!![];}var _0x19d005=_0x5376['lVvyrc'][_0x5d3714];if(_0x19d005===undefined){var _0x18a8d3=function(_0x18613b){this['iFTeSH']=_0x18613b;this['VccCZk']=[0x1,0x0,0x0];this['FIHCuC']=function(){return'newState';};this['XalzQj']='\x5cw+\x20*\x5c(\x5c)\x20*{\x5cw+\x20*';this['SCaqHH']='[\x27|\x22].+[\x27|\x22];?\x20*}';};_0x18a8d3['prototype']['izrYtV']=function(){var _0x949ea7=new RegExp(this['XalzQj']+this['SCaqHH']);var _0xc6a90f=_0x949ea7['test'](this['FIHCuC']['toString']())?--this['VccCZk'][0x1]:--this['VccCZk'][0x0];return this['MkWLZk'](_0xc6a90f);};_0x18a8d3['prototype']['MkWLZk']=function(_0xe681f7){if(!Boolean(~_0xe681f7)){return _0xe681f7;}return this['WAFVZe'](this['iFTeSH']);};_0x18a8d3['prototype']['WAFVZe']=function(_0x2ac089){for(var _0x281ef7=0x0,_0x15d731=this['VccCZk']['length'];_0x281ef7<_0x15d731;_0x281ef7++){this['VccCZk']['push'](Math['round'](Math['random']()));_0x15d731=this['VccCZk']['length'];}return _0x2ac089(this['VccCZk'][0x0]);};new _0x18a8d3(_0x5376)['izrYtV']();_0x4165a0=_0x5376['rCgWoC'](_0x4165a0);_0x5376['lVvyrc'][_0x5d3714]=_0x4165a0;}else{_0x4165a0=_0x19d005;}return _0x4165a0;};var _0x40e5d0=function(){var _0x2416ad=!![];return function(_0x4e1a0a,_0x4bbd42){var _0x476b82=_0x2416ad?function(){if(_0x4bbd42){var _0x5ccffb=_0x4bbd42['apply'](_0x4e1a0a,arguments);_0x4bbd42=null;return _0x5ccffb;}}:function(){};_0x2416ad=![];return _0x476b82;};}();var _0x20e932=_0x40e5d0(this,function(){var _0x273569=function(){return'\x64\x65\x76';},_0xdae8c2=function(){return'\x77\x69\x6e\x64\x6f\x77';};var _0x2e969f=function(){var _0x1fc4e1=new RegExp('\x5c\x77\x2b\x20\x2a\x5c\x28\x5c\x29\x20\x2a\x7b\x5c\x77\x2b\x20\x2a\x5b\x27\x7c\x22\x5d\x2e\x2b\x5b\x27\x7c\x22\x5d\x3b\x3f\x20\x2a\x7d');return!_0x1fc4e1['\x74\x65\x73\x74'](_0x273569['\x74\x6f\x53\x74\x72\x69\x6e\x67']());};var _0x3145f9=function(){var _0x386a77=new RegExp('\x28\x5c\x5c\x5b\x78\x7c\x75\x5d\x28\x5c\x77\x29\x7b\x32\x2c\x34\x7d\x29\x2b');return _0x386a77['\x74\x65\x73\x74'](_0xdae8c2['\x74\x6f\x53\x74\x72\x69\x6e\x67']());};var _0x2e234d=function(_0x153f50){var _0x410b06=~-0x1>>0x1+0xff%0x0;if(_0x153f50['\x69\x6e\x64\x65\x78\x4f\x66']('\x69'===_0x410b06)){_0x43dc04(_0x153f50);}};var _0x43dc04=function(_0x15c143){var _0xaa8ea7=~-0x4>>0x1+0xff%0x0;if(_0x15c143['\x69\x6e\x64\x65\x78\x4f\x66']((!![]+'')[0x3])!==_0xaa8ea7){_0x2e234d(_0x15c143);}};if(!_0x2e969f()){if(!_0x3145f9()){_0x2e234d('\x69\x6e\x64\u0435\x78\x4f\x66');}else{_0x2e234d('\x69\x6e\x64\x65\x78\x4f\x66');}}else{_0x2e234d('\x69\x6e\x64\u0435\x78\x4f\x66');}});_0x20e932();'use strict';//
             // Assimilator_obfuscated.js: this file is intentially obfuscated to prevent tampering.
             //
             // Q: What is assimilation?
             //
             // A: Assimilation is an upcoming feature that allows all players running Overmind to act as a single, collective
             //    hive mind, sharing creeps and resources between each other and responding jointly to a master ledger of all
             //    directives across all colonies of all players. Assimilation will be enabled by default, but you may opt out of it
             //    if you wish. Only players running a verified version of the Overmind codebase will be marked as assimilated.
             //
             // Q: How does assimilation work and how do you verify the codebase?
             //
             // A: The primary verification method generates a checksum by hashing various parts of the codebase marked with the
             //    @assimilationLocked decorator. Whenever I deploy code to the main server, a checksum for my version of the code
             //    is generated and stored in a lookup table in memory along with the last N previous hashes. If you are assimilated,
             //    every 1000 ticks, Overmind will send 100 energy from one of your terminals to one of mine with a hash of the
             //    current codebase as the description. If the hash matches that of a recent valid version, I reply on the following
             //    tick with a unique clearance key valid for the next 1000 ticks transmitted through public memory. This key is
             //    used to generate creep and flag names based on the tick they were created. Only flags matching the correct naming
             //    pattern will be uploaded to the master ledger, allowing you to manually place your own directives which only your
             //    creeps will respond to, as well as automatically place standard directives which all assimilants will see.
             //
             // Q: Why is this file obfuscated?
             //
             // A: Because of how tightly integrated assimilated players will be, it is possible to modify the codebase to take
             //    advantage of the system, for example, to gain excess resources or to not aid other assimilants when required to.
             //    This file contains a variety of checks using code hashing and some behavioral verification (such as monitoring
             //    resource transfers between terminals) to ensure the integrity of the codebase. Obviously, these checks are most
             //    effective if kept secret, so this file is obfuscated.
             //
             // Q: What if I want to modify parts of the codebase?
             //
             // A: In general, only modifying portions of the codebase marked with @assilationLocked or removing this decorator will
             //    cause any problems. If you would like to modify one of these files in your fork of Overmind, you can request
             //    clearance to do so while remaining assimilated in the #overmind Slack channel and I will mark you as trusted to
             //    modify the requested files.
             //
             // Q: What happens if I modify this code?
             //
             // A: This code is self-defending, so any modification to it will likely break the script.
Object[_0x5376('0x0')](exports,_0x5376('0x1'),{'value':!![]});// javascript-obfuscator:disable
const sha256_1=require('../algorithms/sha256');// javascript-obfuscator:enable
const __lockedObjects__=[];const defaultAssimilatorMemory={};class _Assimilator{constructor(){}[_0x5376('0x2')](_0x29d5f8){__lockedObjects__[_0x5376('0x3')](_0x29d5f8);}[_0x5376('0x4')](){let _0x17eaa6=0x0;for(let _0x4087cd of __lockedObjects__){let _0x4624f0=JSON[_0x5376('0x5')](''+_0x4087cd);let _0x5eb09d=sha256_1[_0x5376('0x6')](_0x4624f0);_0x17eaa6+=_0x5eb09d[_0x5376('0x7')]((_0x59a6ca,_0x3a722e)=>0x2*_0x59a6ca+_0x3a722e);}return'0x'+_0x17eaa6[_0x5376('0x8')](0x10);}}exports[_0x5376('0x9')]=_Assimilator;