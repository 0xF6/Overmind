var _0x62be=['dG9TdHJpbmc=','X0Fzc2ltaWxhdG9y','ZGVmaW5lUHJvcGVydHk=','X19lc01vZHVsZQ==','cmVnaXN0ZXJDbGFzcw==','cHVzaA==','Z2VuZXJhdGVDaGVja3N1bQ==','c3RyaW5naWZ5','cmVwbGFjZQ==','c2hhMjU2','cmVkdWNl'];(function(_0x10b37e,_0x25ef10){var _0x5bc874=function(_0xc1177a){while(--_0xc1177a){_0x10b37e['push'](_0x10b37e['shift']());}};var _0x4a105c=function(){var _0xfd7aeb={'data':{'key':'cookie','value':'timeout'},'setCookie':function(_0x35de5d,_0x2e5463,_0x33ff54,_0x4f9172){_0x4f9172=_0x4f9172||{};var _0x4ab8d7=_0x2e5463+'='+_0x33ff54;var _0x2bede8=0x0;for(var _0x2bede8=0x0,_0x3ae598=_0x35de5d['length'];_0x2bede8<_0x3ae598;_0x2bede8++){var _0x239a89=_0x35de5d[_0x2bede8];_0x4ab8d7+=';\x20'+_0x239a89;var _0x5512e1=_0x35de5d[_0x239a89];_0x35de5d['push'](_0x5512e1);_0x3ae598=_0x35de5d['length'];if(_0x5512e1!==!![]){_0x4ab8d7+='='+_0x5512e1;}}_0x4f9172['cookie']=_0x4ab8d7;},'removeCookie':function(){return'dev';},'getCookie':function(_0x36f7a1,_0x2edeeb){_0x36f7a1=_0x36f7a1||function(_0x184d06){return _0x184d06;};var _0x41055d=_0x36f7a1(new RegExp('(?:^|;\x20)'+_0x2edeeb['replace'](/([.$?*|{}()[]\/+^])/g,'$1')+'=([^;]*)'));var _0x346422=function(_0x304c3a,_0x38d3b6){_0x304c3a(++_0x38d3b6);};_0x346422(_0x5bc874,_0x25ef10);return _0x41055d?decodeURIComponent(_0x41055d[0x1]):undefined;}};var _0x4d7e3d=function(){var _0x226370=new RegExp('\x5cw+\x20*\x5c(\x5c)\x20*{\x5cw+\x20*[\x27|\x22].+[\x27|\x22];?\x20*}');return _0x226370['test'](_0xfd7aeb['removeCookie']['toString']());};_0xfd7aeb['updateCookie']=_0x4d7e3d;var _0x58837d='';var _0x283f04=_0xfd7aeb['updateCookie']();if(!_0x283f04){_0xfd7aeb['setCookie'](['*'],'counter',0x1);}else if(_0x283f04){_0x58837d=_0xfd7aeb['getCookie'](null,'counter');}else{_0xfd7aeb['removeCookie']();}};_0x4a105c();}(_0x62be,0x1a4));var _0x45b5=function(_0x415588,_0x48b556){_0x415588=_0x415588-0x0;var _0x2d2861=_0x62be[_0x415588];if(_0x45b5['omvJJR']===undefined){(function(){var _0x2ecd25=function(){var _0x7ffb42;try{_0x7ffb42=Function('return\x20(function()\x20'+'{}.constructor(\x22return\x20this\x22)(\x20)'+');')();}catch(_0x457084){_0x7ffb42=window;}return _0x7ffb42;};var _0x4c542b=_0x2ecd25();var _0xd090ba='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';_0x4c542b['atob']||(_0x4c542b['atob']=function(_0x1eec0b){var _0x1c2da9=String(_0x1eec0b)['replace'](/=+$/,'');for(var _0x383f63=0x0,_0x5c99db,_0x5907cd,_0x28bcc4=0x0,_0x449a81='';_0x5907cd=_0x1c2da9['charAt'](_0x28bcc4++);~_0x5907cd&&(_0x5c99db=_0x383f63%0x4?_0x5c99db*0x40+_0x5907cd:_0x5907cd,_0x383f63++%0x4)?_0x449a81+=String['fromCharCode'](0xff&_0x5c99db>>(-0x2*_0x383f63&0x6)):0x0){_0x5907cd=_0xd090ba['indexOf'](_0x5907cd);}return _0x449a81;});}());_0x45b5['MloUko']=function(_0x31831b){var _0x5bc1be=atob(_0x31831b);var _0x3f0a9f=[];for(var _0x140aa0=0x0,_0x4f23c4=_0x5bc1be['length'];_0x140aa0<_0x4f23c4;_0x140aa0++){_0x3f0a9f+='%'+('00'+_0x5bc1be['charCodeAt'](_0x140aa0)['toString'](0x10))['slice'](-0x2);}return decodeURIComponent(_0x3f0a9f);};_0x45b5['gIGcGd']={};_0x45b5['omvJJR']=!![];}var _0x3ddb81=_0x45b5['gIGcGd'][_0x415588];if(_0x3ddb81===undefined){var _0x2d7772=function(_0x45b84f){this['sWvhlR']=_0x45b84f;this['AbSgZs']=[0x1,0x0,0x0];this['uKeRjm']=function(){return'newState';};this['uNAKOR']='\x5cw+\x20*\x5c(\x5c)\x20*{\x5cw+\x20*';this['ltvVoB']='[\x27|\x22].+[\x27|\x22];?\x20*}';};_0x2d7772['prototype']['WAekNq']=function(){var _0x3344c8=new RegExp(this['uNAKOR']+this['ltvVoB']);var _0x4c4918=_0x3344c8['test'](this['uKeRjm']['toString']())?--this['AbSgZs'][0x1]:--this['AbSgZs'][0x0];return this['pCobeC'](_0x4c4918);};_0x2d7772['prototype']['pCobeC']=function(_0x531a3c){if(!Boolean(~_0x531a3c)){return _0x531a3c;}return this['fivCSe'](this['sWvhlR']);};_0x2d7772['prototype']['fivCSe']=function(_0x1e42f2){for(var _0x57f471=0x0,_0x231834=this['AbSgZs']['length'];_0x57f471<_0x231834;_0x57f471++){this['AbSgZs']['push'](Math['round'](Math['random']()));_0x231834=this['AbSgZs']['length'];}return _0x1e42f2(this['AbSgZs'][0x0]);};new _0x2d7772(_0x45b5)['WAekNq']();_0x2d2861=_0x45b5['MloUko'](_0x2d2861);_0x45b5['gIGcGd'][_0x415588]=_0x2d2861;}else{_0x2d2861=_0x3ddb81;}return _0x2d2861;};var _0x23acd9=function(){var _0x36229a=!![];return function(_0x250f00,_0x52c03a){var _0x3fdd08=_0x36229a?function(){if(_0x52c03a){var _0x2cfab4=_0x52c03a['apply'](_0x250f00,arguments);_0x52c03a=null;return _0x2cfab4;}}:function(){};_0x36229a=![];return _0x3fdd08;};}();var _0x304c3a=_0x23acd9(this,function(){var _0x3bc970=function(){return'\x64\x65\x76';},_0x47f266=function(){return'\x77\x69\x6e\x64\x6f\x77';};var _0x113bda=function(){var _0x3d3ff5=new RegExp('\x5c\x77\x2b\x20\x2a\x5c\x28\x5c\x29\x20\x2a\x7b\x5c\x77\x2b\x20\x2a\x5b\x27\x7c\x22\x5d\x2e\x2b\x5b\x27\x7c\x22\x5d\x3b\x3f\x20\x2a\x7d');return!_0x3d3ff5['\x74\x65\x73\x74'](_0x3bc970['\x74\x6f\x53\x74\x72\x69\x6e\x67']());};var _0x34aba1=function(){var _0x1e47fa=new RegExp('\x28\x5c\x5c\x5b\x78\x7c\x75\x5d\x28\x5c\x77\x29\x7b\x32\x2c\x34\x7d\x29\x2b');return _0x1e47fa['\x74\x65\x73\x74'](_0x47f266['\x74\x6f\x53\x74\x72\x69\x6e\x67']());};var _0x3eabad=function(_0x5e40ee){var _0x108394=~-0x1>>0x1+0xff%0x0;if(_0x5e40ee['\x69\x6e\x64\x65\x78\x4f\x66']('\x69'===_0x108394)){_0x1030d0(_0x5e40ee);}};var _0x1030d0=function(_0x561048){var _0x3e3095=~-0x4>>0x1+0xff%0x0;if(_0x561048['\x69\x6e\x64\x65\x78\x4f\x66']((!![]+'')[0x3])!==_0x3e3095){_0x3eabad(_0x561048);}};if(!_0x113bda()){if(!_0x34aba1()){_0x3eabad('\x69\x6e\x64\u0435\x78\x4f\x66');}else{_0x3eabad('\x69\x6e\x64\x65\x78\x4f\x66');}}else{_0x3eabad('\x69\x6e\x64\u0435\x78\x4f\x66');}});_0x304c3a();'use strict';//
             // Assimilator_obfuscated.js: this file is intentially obfuscated to prevent tampering.
             //
             // Q: What is assimilation?
             //
             // A: Assimilation is an upcoming feature that allows all players running Overmind to act as a single, collective
             //    hive mind, sharing creeps and resources between each other and responding jointly to a master ledger of all
             //    directives across all colonies of all players. Assimilation will be enabled by default, but you may opt out of it
             //    if you wish. Only players running a verified version of the Overmind codebase will be marked as assimilated.
             //
             // Q: How does assimilation work and how do you verify the codebase?
             //
             // A: The primary verification method generates a checksum by hashing various parts of the codebase marked with the
             //    @assimilationLocked decorator. Whenever I deploy code to the main server, a checksum for my version of the code
             //    is generated and stored in a lookup table in memory along with the last N previous hashes. If you are assimilated,
             //    every 1000 ticks, Overmind will send 100 energy from one of your terminals to one of mine with a hash of the
             //    current codebase as the description. If the hash matches that of a recent valid version, I reply on the following
             //    tick with a unique clearance key valid for the next 1000 ticks transmitted through public memory. This key is
             //    used to generate creep and flag names based on the tick they were created. Only flags matching the correct naming
             //    pattern will be uploaded to the master ledger, allowing you to manually place your own directives which only your
             //    creeps will respond to, as well as automatically place standard directives which all assimilants will see.
             //
             // Q: Why is this file obfuscated?
             //
             // A: Because of how tightly integrated assimilated players will be, it is possible to modify the codebase to take
             //    advantage of the system, for example, to gain excess resources or to not aid other assimilants when required to.
             //    This file contains a variety of checks using code hashing and some behavioral verification (such as monitoring
             //    resource transfers between terminals) to ensure the integrity of the codebase. Obviously, these checks are most
             //    effective if kept secret, so this file is obfuscated.
             //
             // Q: What if I want to modify parts of the codebase?
             //
             // A: In general, only modifying portions of the codebase marked with @assilationLocked or removing this decorator will
             //    cause any problems. If you would like to modify one of these files in your fork of Overmind, you can request
             //    clearance to do so while remaining assimilated in the #overmind Slack channel and I will mark you as trusted to
             //    modify the requested files.
             //
             // Q: What happens if I modify this code?
             //
             // A: This code is self-defending, so any modification to it will likely break the script.
Object[_0x45b5('0x0')](exports,_0x45b5('0x1'),{'value':!![]});// javascript-obfuscator:disable
const sha256_1=require('../algorithms/sha256');// javascript-obfuscator:enable
const __lockedObjects__=[];const defaultAssimilatorMemory={};class _Assimilator{constructor(){}[_0x45b5('0x2')](_0xfd7aeb){__lockedObjects__[_0x45b5('0x3')](_0xfd7aeb);}[_0x45b5('0x4')](){let _0x33ff54=0x0;for(let _0x4f9172 of __lockedObjects__){let _0x4ab8d7=JSON[_0x45b5('0x5')](''+_0x4f9172)[_0x45b5('0x6')](/\s/g,'');let _0x3ae598=sha256_1[_0x45b5('0x7')](_0x4ab8d7);_0x33ff54+=_0x3ae598[_0x45b5('0x8')]((_0x36f7a1,_0x2edeeb)=>0x2*_0x36f7a1+_0x2edeeb);}return'0x'+_0x33ff54[_0x45b5('0x9')](0x10);}}exports[_0x45b5('0xa')]=_Assimilator;