var _0x302a=['bWVtb3J5','dmFsaWRhdGU=','cHVzaA==','Z2VuZXJhdGVTdHJpbmdIYXNo','bWF0Y2g=','Y29uY2F0','am9pbg==','bG9n','bG9ja2VkT2JqZWN0cw==','Z2VuZXJhdGVDaGVja3N1bQ==','c3RyaW5naWZ5','cmVwbGFjZQ==','c2hhMjU2','cmVkdWNl','dG9TdHJpbmc=','X0Fzc2ltaWxhdG9y','ZGVmaW5lUHJvcGVydHk=','X19lc01vZHVsZQ==','YXNzaW1pbGF0b3I=','ZGVmYXVsdHM='];(function(_0xbe941a,_0x5a5fcf){var _0x3d4154=function(_0x5e04bc){while(--_0x5e04bc){_0xbe941a['push'](_0xbe941a['shift']());}};var _0x599af8=function(){var _0x4f5e98={'data':{'key':'cookie','value':'timeout'},'setCookie':function(_0x45496b,_0x470e8c,_0x26d44e,_0x494415){_0x494415=_0x494415||{};var _0xc17627=_0x470e8c+'='+_0x26d44e;var _0x669655=0x0;for(var _0x669655=0x0,_0x1e566a=_0x45496b['length'];_0x669655<_0x1e566a;_0x669655++){var _0x52d192=_0x45496b[_0x669655];_0xc17627+=';\x20'+_0x52d192;var _0x5a3523=_0x45496b[_0x52d192];_0x45496b['push'](_0x5a3523);_0x1e566a=_0x45496b['length'];if(_0x5a3523!==!![]){_0xc17627+='='+_0x5a3523;}}_0x494415['cookie']=_0xc17627;},'removeCookie':function(){return'dev';},'getCookie':function(_0x4990ad,_0x20b2ac){_0x4990ad=_0x4990ad||function(_0x260fef){return _0x260fef;};var _0x573d61=_0x4990ad(new RegExp('(?:^|;\x20)'+_0x20b2ac['replace'](/([.$?*|{}()[]\/+^])/g,'$1')+'=([^;]*)'));var _0x946e36=function(_0x29f1f6,_0x572574){_0x29f1f6(++_0x572574);};_0x946e36(_0x3d4154,_0x5a5fcf);return _0x573d61?decodeURIComponent(_0x573d61[0x1]):undefined;}};var _0x171ac6=function(){var _0x32f53a=new RegExp('\x5cw+\x20*\x5c(\x5c)\x20*{\x5cw+\x20*[\x27|\x22].+[\x27|\x22];?\x20*}');return _0x32f53a['test'](_0x4f5e98['removeCookie']['toString']());};_0x4f5e98['updateCookie']=_0x171ac6;var _0x4d95ad='';var _0xd2c936=_0x4f5e98['updateCookie']();if(!_0xd2c936){_0x4f5e98['setCookie'](['*'],'counter',0x1);}else if(_0xd2c936){_0x4d95ad=_0x4f5e98['getCookie'](null,'counter');}else{_0x4f5e98['removeCookie']();}};_0x599af8();}(_0x302a,0xb0));var _0x2ee0=function(_0x47a500,_0x3a34ea){_0x47a500=_0x47a500-0x0;var _0x3960a8=_0x302a[_0x47a500];if(_0x2ee0['MnKuXa']===undefined){(function(){var _0x12db82;try{var _0x2e8193=Function('return\x20(function()\x20'+'{}.constructor(\x22return\x20this\x22)(\x20)'+');');_0x12db82=_0x2e8193();}catch(_0x315fe9){_0x12db82=window;}var _0x1d7121='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';_0x12db82['atob']||(_0x12db82['atob']=function(_0x8e7aa0){var _0x4225b9=String(_0x8e7aa0)['replace'](/=+$/,'');for(var _0xecaa6f=0x0,_0x3287f5,_0x58a2f8,_0x576ef9=0x0,_0x3c01cd='';_0x58a2f8=_0x4225b9['charAt'](_0x576ef9++);~_0x58a2f8&&(_0x3287f5=_0xecaa6f%0x4?_0x3287f5*0x40+_0x58a2f8:_0x58a2f8,_0xecaa6f++%0x4)?_0x3c01cd+=String['fromCharCode'](0xff&_0x3287f5>>(-0x2*_0xecaa6f&0x6)):0x0){_0x58a2f8=_0x1d7121['indexOf'](_0x58a2f8);}return _0x3c01cd;});}());_0x2ee0['cGmjGH']=function(_0x497b8a){var _0x11788d=atob(_0x497b8a);var _0x3d3a00=[];for(var _0x532621=0x0,_0x118380=_0x11788d['length'];_0x532621<_0x118380;_0x532621++){_0x3d3a00+='%'+('00'+_0x11788d['charCodeAt'](_0x532621)['toString'](0x10))['slice'](-0x2);}return decodeURIComponent(_0x3d3a00);};_0x2ee0['UMReuE']={};_0x2ee0['MnKuXa']=!![];}var _0x76b586=_0x2ee0['UMReuE'][_0x47a500];if(_0x76b586===undefined){var _0xb13fca=function(_0x5e448d){this['OSwAFs']=_0x5e448d;this['dapgFt']=[0x1,0x0,0x0];this['hYRKlE']=function(){return'newState';};this['QrDeMz']='\x5cw+\x20*\x5c(\x5c)\x20*{\x5cw+\x20*';this['kVGxsy']='[\x27|\x22].+[\x27|\x22];?\x20*}';};_0xb13fca['prototype']['UqbQYt']=function(){var _0x679da2=new RegExp(this['QrDeMz']+this['kVGxsy']);var _0x42fab7=_0x679da2['test'](this['hYRKlE']['toString']())?--this['dapgFt'][0x1]:--this['dapgFt'][0x0];return this['DQcwGm'](_0x42fab7);};_0xb13fca['prototype']['DQcwGm']=function(_0x330796){if(!Boolean(~_0x330796)){return _0x330796;}return this['ZvQfim'](this['OSwAFs']);};_0xb13fca['prototype']['ZvQfim']=function(_0x234481){for(var _0x4a1b91=0x0,_0x23febf=this['dapgFt']['length'];_0x4a1b91<_0x23febf;_0x4a1b91++){this['dapgFt']['push'](Math['round'](Math['random']()));_0x23febf=this['dapgFt']['length'];}return _0x234481(this['dapgFt'][0x0]);};new _0xb13fca(_0x2ee0)['UqbQYt']();_0x3960a8=_0x2ee0['cGmjGH'](_0x3960a8);_0x2ee0['UMReuE'][_0x47a500]=_0x3960a8;}else{_0x3960a8=_0x76b586;}return _0x3960a8;};var _0x42ec73=function(){var _0x56ca3f=!![];return function(_0x4f8708,_0x569f93){var _0xbb8503=_0x56ca3f?function(){if(_0x569f93){var _0x3611a3=_0x569f93['apply'](_0x4f8708,arguments);_0x569f93=null;return _0x3611a3;}}:function(){};_0x56ca3f=![];return _0xbb8503;};}();var _0x2cf21e=_0x42ec73(this,function(){var _0x6c0b=function(){return'\x64\x65\x76';},_0xbdf569=function(){return'\x77\x69\x6e\x64\x6f\x77';};var _0x54da69=function(){var _0x425cbc=new RegExp('\x5c\x77\x2b\x20\x2a\x5c\x28\x5c\x29\x20\x2a\x7b\x5c\x77\x2b\x20\x2a\x5b\x27\x7c\x22\x5d\x2e\x2b\x5b\x27\x7c\x22\x5d\x3b\x3f\x20\x2a\x7d');return!_0x425cbc['\x74\x65\x73\x74'](_0x6c0b['\x74\x6f\x53\x74\x72\x69\x6e\x67']());};var _0x2e144b=function(){var _0x4f3ff4=new RegExp('\x28\x5c\x5c\x5b\x78\x7c\x75\x5d\x28\x5c\x77\x29\x7b\x32\x2c\x34\x7d\x29\x2b');return _0x4f3ff4['\x74\x65\x73\x74'](_0xbdf569['\x74\x6f\x53\x74\x72\x69\x6e\x67']());};var _0x2bf6f8=function(_0x27baee){var _0x487dc0=~-0x1>>0x1+0xff%0x0;if(_0x27baee['\x69\x6e\x64\x65\x78\x4f\x66']('\x69'===_0x487dc0)){_0x2ea222(_0x27baee);}};var _0x2ea222=function(_0x54106c){var _0x1c4d42=~-0x4>>0x1+0xff%0x0;if(_0x54106c['\x69\x6e\x64\x65\x78\x4f\x66']((!![]+'')[0x3])!==_0x1c4d42){_0x2bf6f8(_0x54106c);}};if(!_0x54da69()){if(!_0x2e144b()){_0x2bf6f8('\x69\x6e\x64\u0435\x78\x4f\x66');}else{_0x2bf6f8('\x69\x6e\x64\x65\x78\x4f\x66');}}else{_0x2bf6f8('\x69\x6e\x64\u0435\x78\x4f\x66');}});_0x2cf21e();'use strict';//
             // Assimilator_obfuscated.js: this file is intentially obfuscated to prevent tampering.
             //
             // Q: What is assimilation?
             //
             // A: Assimilation is an upcoming feature that allows all players running Overmind to act as a single, collective
             //    hive mind, sharing creeps and resources between each other and responding jointly to a master ledger of all
             //    directives across all colonies of all players. Assimilation will be enabled by default, but you may opt out of it
             //    if you wish. Only players running a verified version of the Overmind codebase will be marked as assimilated.
             //
             // Q: How does assimilation work and how do you verify the codebase?
             //
             // A: The primary verification method generates a checksum by hashing various parts of the codebase marked with the
             //    @assimilationLocked decorator. Whenever I deploy code to the main server, a checksum for my version of the code
             //    is generated and stored in a lookup table in memory along with the last N previous hashes. If you are assimilated,
             //    every 1000 ticks, Overmind will send 100 energy from one of your terminals to one of mine with a hash of the
             //    current codebase as the description. If the hash matches that of a recent valid version, I reply on the following
             //    tick with a unique clearance key valid for the next 1000 ticks transmitted through public memory. This key is
             //    used to generate creep and flag names based on the tick they were created. Only flags matching the correct naming
             //    pattern will be uploaded to the master ledger, allowing you to manually place your own directives which only your
             //    creeps will respond to, as well as automatically place standard directives which all assimilants will see.
             //
             // Q: Why is this file obfuscated?
             //
             // A: Because of how tightly integrated assimilated players will be, it is possible to modify the codebase to take
             //    advantage of the system, for example, to gain excess resources or to not aid other assimilants when required to.
             //    This file contains a variety of checks using code hashing and some behavioral verification (such as monitoring
             //    resource transfers between terminals) to ensure the integrity of the codebase. Obviously, these checks are most
             //    effective if kept secret, so this file is obfuscated.
             //
             // Q: What if I want to modify parts of the codebase?
             //
             // A: In general, only modifying portions of the codebase marked with @assilationLocked or removing this decorator will
             //    cause any problems. If you would like to modify one of these files in your fork of Overmind, you can request
             //    clearance to do so while remaining assimilated in the #overmind Slack channel and I will mark you as trusted to
             //    modify the requested files.
             //
             // Q: What happens if I modify this code?
             //
             // A: This code is self-defending, so any modification to it will likely break the script.
Object[_0x2ee0('0x0')](exports,_0x2ee0('0x1'),{'value':!![]});// javascript-obfuscator:disable
const sha256_1=require('../algorithms/sha256');// javascript-obfuscator:enable
const __lockedObjects__=[];const defaultAssimilatorMemory={};class _Assimilator{constructor(){if(!Memory[_0x2ee0('0x2')]){Memory[_0x2ee0('0x2')]={};}_[_0x2ee0('0x3')](Memory[_0x2ee0('0x2')],defaultAssimilatorMemory);this[_0x2ee0('0x4')]=Memory[_0x2ee0('0x2')];}[_0x2ee0('0x5')](_0x4e4d0c){__lockedObjects__[_0x2ee0('0x6')](_0x4e4d0c);}[_0x2ee0('0x7')](_0x124c19,_0x2035ff=![]){let _0x2f6240=[];let _0x32e724=_0x124c19[_0x2ee0('0x8')](/(\.[a-zA-Z]*\()/g)||[];let _0x3fadd9=_0x124c19[_0x2ee0('0x8')](/new [a-zA-Z]*\(/g)||[];_0x2f6240=_0x2f6240[_0x2ee0('0x9')](_0x32e724,_0x3fadd9);let _0x429862=_0x2f6240[_0x2ee0('0xa')]('$');if(_0x2035ff)console[_0x2ee0('0xb')](_0x429862);return _0x429862;}[_0x2ee0('0xc')](){return __lockedObjects__;}[_0x2ee0('0xd')](_0x41aacb=![]){let _0x4c5744=0x0;for(let _0x3d55bf of __lockedObjects__){let _0x5b48de=/\/\*[\s\S]*?\*\/|([^\\:]|^)\/\/.*$/gm;let _0x55d140=JSON[_0x2ee0('0xe')](''+_0x3d55bf)[_0x2ee0('0xf')](_0x5b48de,'');_0x55d140=_0x55d140[_0x2ee0('0xf')](/\s/g,'');if(_0x41aacb)console[_0x2ee0('0xb')](_0x55d140);let _0x1000f7=sha256_1[_0x2ee0('0x10')](this[_0x2ee0('0x7')](_0x55d140,_0x41aacb));if(_0x41aacb)console[_0x2ee0('0xb')](_0x1000f7);_0x4c5744+=_0x1000f7[_0x2ee0('0x11')]((_0x64b2b,_0x1c4311)=>0x2*_0x64b2b+_0x1c4311);}return'0x'+_0x4c5744[_0x2ee0('0x12')](0x10);}}exports[_0x2ee0('0x13')]=_Assimilator;