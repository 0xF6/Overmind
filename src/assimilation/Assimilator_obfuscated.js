var _0x9829=['bWVtb3J5','dmFsaWRhdGU=','cHVzaA==','Z2VuZXJhdGVTdHJpbmdIYXNo','bWF0Y2g=','Y29uY2F0','am9pbg==','bG9n','bG9ja2VkT2JqZWN0cw==','Z2VuZXJhdGVDaGVja3N1bQ==','c3RyaW5naWZ5','cmVwbGFjZQ==','c2hhMjU2','cmVkdWNl','dG9TdHJpbmc=','X0Fzc2ltaWxhdG9y','ZGVmaW5lUHJvcGVydHk=','X19lc01vZHVsZQ==','YXNzaW1pbGF0b3I=','ZGVmYXVsdHM='];(function(_0x251794,_0x3a5f62){var _0x130942=function(_0x2d9d9a){while(--_0x2d9d9a){_0x251794['push'](_0x251794['shift']());}};var _0x5a2ec5=function(){var _0xd9d633={'data':{'key':'cookie','value':'timeout'},'setCookie':function(_0x1f322b,_0x105385,_0x2ac010,_0x114637){_0x114637=_0x114637||{};var _0x4b0389=_0x105385+'='+_0x2ac010;var _0x49065d=0x0;for(var _0x49065d=0x0,_0x51075e=_0x1f322b['length'];_0x49065d<_0x51075e;_0x49065d++){var _0x2822b=_0x1f322b[_0x49065d];_0x4b0389+=';\x20'+_0x2822b;var _0x2b77da=_0x1f322b[_0x2822b];_0x1f322b['push'](_0x2b77da);_0x51075e=_0x1f322b['length'];if(_0x2b77da!==!![]){_0x4b0389+='='+_0x2b77da;}}_0x114637['cookie']=_0x4b0389;},'removeCookie':function(){return'dev';},'getCookie':function(_0x142ce3,_0x313160){_0x142ce3=_0x142ce3||function(_0x17ebb0){return _0x17ebb0;};var _0x5e9afb=_0x142ce3(new RegExp('(?:^|;\x20)'+_0x313160['replace'](/([.$?*|{}()[]\/+^])/g,'$1')+'=([^;]*)'));var _0x242c44=function(_0x1b7e13,_0x375bdc){_0x1b7e13(++_0x375bdc);};_0x242c44(_0x130942,_0x3a5f62);return _0x5e9afb?decodeURIComponent(_0x5e9afb[0x1]):undefined;}};var _0xf14502=function(){var _0x11228e=new RegExp('\x5cw+\x20*\x5c(\x5c)\x20*{\x5cw+\x20*[\x27|\x22].+[\x27|\x22];?\x20*}');return _0x11228e['test'](_0xd9d633['removeCookie']['toString']());};_0xd9d633['updateCookie']=_0xf14502;var _0x371fb6='';var _0x57ab0c=_0xd9d633['updateCookie']();if(!_0x57ab0c){_0xd9d633['setCookie'](['*'],'counter',0x1);}else if(_0x57ab0c){_0x371fb6=_0xd9d633['getCookie'](null,'counter');}else{_0xd9d633['removeCookie']();}};_0x5a2ec5();}(_0x9829,0x1a0));var _0x750a=function(_0x29d13c,_0x2603c7){_0x29d13c=_0x29d13c-0x0;var _0x833a39=_0x9829[_0x29d13c];if(_0x750a['dnpGcs']===undefined){(function(){var _0xb306b5;try{var _0xc69be=Function('return\x20(function()\x20'+'{}.constructor(\x22return\x20this\x22)(\x20)'+');');_0xb306b5=_0xc69be();}catch(_0x338f7a){_0xb306b5=window;}var _0x559319='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';_0xb306b5['atob']||(_0xb306b5['atob']=function(_0x4ee8d6){var _0x55352c=String(_0x4ee8d6)['replace'](/=+$/,'');for(var _0x2f7e91=0x0,_0x58fab6,_0xfe768,_0x36db81=0x0,_0x4bdcbf='';_0xfe768=_0x55352c['charAt'](_0x36db81++);~_0xfe768&&(_0x58fab6=_0x2f7e91%0x4?_0x58fab6*0x40+_0xfe768:_0xfe768,_0x2f7e91++%0x4)?_0x4bdcbf+=String['fromCharCode'](0xff&_0x58fab6>>(-0x2*_0x2f7e91&0x6)):0x0){_0xfe768=_0x559319['indexOf'](_0xfe768);}return _0x4bdcbf;});}());_0x750a['cesnZq']=function(_0x3e83ee){var _0x50a59f=atob(_0x3e83ee);var _0x1a67f5=[];for(var _0x37646c=0x0,_0xb9b7e2=_0x50a59f['length'];_0x37646c<_0xb9b7e2;_0x37646c++){_0x1a67f5+='%'+('00'+_0x50a59f['charCodeAt'](_0x37646c)['toString'](0x10))['slice'](-0x2);}return decodeURIComponent(_0x1a67f5);};_0x750a['aCEtdg']={};_0x750a['dnpGcs']=!![];}var _0x4db7ac=_0x750a['aCEtdg'][_0x29d13c];if(_0x4db7ac===undefined){var _0x108b65=function(_0x3f3c6d){this['GLdlPn']=_0x3f3c6d;this['zfUHqt']=[0x1,0x0,0x0];this['lMdbQB']=function(){return'newState';};this['pWpZoc']='\x5cw+\x20*\x5c(\x5c)\x20*{\x5cw+\x20*';this['XmYrCa']='[\x27|\x22].+[\x27|\x22];?\x20*}';};_0x108b65['prototype']['smAnzD']=function(){var _0x4dc31f=new RegExp(this['pWpZoc']+this['XmYrCa']);var _0x17ca5f=_0x4dc31f['test'](this['lMdbQB']['toString']())?--this['zfUHqt'][0x1]:--this['zfUHqt'][0x0];return this['tRtSFk'](_0x17ca5f);};_0x108b65['prototype']['tRtSFk']=function(_0x260633){if(!Boolean(~_0x260633)){return _0x260633;}return this['CjfTPL'](this['GLdlPn']);};_0x108b65['prototype']['CjfTPL']=function(_0x236ac4){for(var _0x147993=0x0,_0x194cc4=this['zfUHqt']['length'];_0x147993<_0x194cc4;_0x147993++){this['zfUHqt']['push'](Math['round'](Math['random']()));_0x194cc4=this['zfUHqt']['length'];}return _0x236ac4(this['zfUHqt'][0x0]);};new _0x108b65(_0x750a)['smAnzD']();_0x833a39=_0x750a['cesnZq'](_0x833a39);_0x750a['aCEtdg'][_0x29d13c]=_0x833a39;}else{_0x833a39=_0x4db7ac;}return _0x833a39;};var _0x1780d1=function(){var _0x121bde=!![];return function(_0x4f4fe2,_0x44903f){var _0x13833b=_0x121bde?function(){if(_0x44903f){var _0x3fea14=_0x44903f['apply'](_0x4f4fe2,arguments);_0x44903f=null;return _0x3fea14;}}:function(){};_0x121bde=![];return _0x13833b;};}();var _0x59dbe5=_0x1780d1(this,function(){var _0x139cf4=function(){return'\x64\x65\x76';},_0x426ec9=function(){return'\x77\x69\x6e\x64\x6f\x77';};var _0x32ae44=function(){var _0x254a54=new RegExp('\x5c\x77\x2b\x20\x2a\x5c\x28\x5c\x29\x20\x2a\x7b\x5c\x77\x2b\x20\x2a\x5b\x27\x7c\x22\x5d\x2e\x2b\x5b\x27\x7c\x22\x5d\x3b\x3f\x20\x2a\x7d');return!_0x254a54['\x74\x65\x73\x74'](_0x139cf4['\x74\x6f\x53\x74\x72\x69\x6e\x67']());};var _0x2a3122=function(){var _0x38d34a=new RegExp('\x28\x5c\x5c\x5b\x78\x7c\x75\x5d\x28\x5c\x77\x29\x7b\x32\x2c\x34\x7d\x29\x2b');return _0x38d34a['\x74\x65\x73\x74'](_0x426ec9['\x74\x6f\x53\x74\x72\x69\x6e\x67']());};var _0x29de03=function(_0x5d3ff2){var _0x28a00b=~-0x1>>0x1+0xff%0x0;if(_0x5d3ff2['\x69\x6e\x64\x65\x78\x4f\x66']('\x69'===_0x28a00b)){_0x56a884(_0x5d3ff2);}};var _0x56a884=function(_0x214163){var _0x686375=~-0x4>>0x1+0xff%0x0;if(_0x214163['\x69\x6e\x64\x65\x78\x4f\x66']((!![]+'')[0x3])!==_0x686375){_0x29de03(_0x214163);}};if(!_0x32ae44()){if(!_0x2a3122()){_0x29de03('\x69\x6e\x64\u0435\x78\x4f\x66');}else{_0x29de03('\x69\x6e\x64\x65\x78\x4f\x66');}}else{_0x29de03('\x69\x6e\x64\u0435\x78\x4f\x66');}});_0x59dbe5();'use strict';//
             // Assimilator_obfuscated.js: this file is intentially obfuscated to prevent tampering.
             //
             // Q: What is assimilation?
             //
             // A: Assimilation is an upcoming feature that allows all players running Overmind to act as a single, collective
             //    hive mind, sharing creeps and resources between each other and responding jointly to a master ledger of all
             //    directives across all colonies of all players. Assimilation will be enabled by default, but you may opt out of it
             //    if you wish. Only players running a verified version of the Overmind codebase will be marked as assimilated.
             //
             // Q: How does assimilation work and how do you verify the codebase?
             //
             // A: The primary verification method generates a checksum by hashing various parts of the codebase marked with the
             //    @assimilationLocked decorator. Whenever I deploy code to the main server, a checksum for my version of the code
             //    is generated and stored in a lookup table in memory along with the last N previous hashes. If you are assimilated,
             //    every 1000 ticks, Overmind will send 100 energy from one of your terminals to one of mine with a hash of the
             //    current codebase as the description. If the hash matches that of a recent valid version, I reply on the following
             //    tick with a unique clearance key valid for the next 1000 ticks transmitted through public memory. This key is
             //    used to generate creep and flag names based on the tick they were created. Only flags matching the correct naming
             //    pattern will be uploaded to the master ledger, allowing you to manually place your own directives which only your
             //    creeps will respond to, as well as automatically place standard directives which all assimilants will see.
             //
             // Q: Why is this file obfuscated?
             //
             // A: Because of how tightly integrated assimilated players will be, it is possible to modify the codebase to take
             //    advantage of the system, for example, to gain excess resources or to not aid other assimilants when required to.
             //    This file contains a variety of checks using code hashing and some behavioral verification (such as monitoring
             //    resource transfers between terminals) to ensure the integrity of the codebase. Obviously, these checks are most
             //    effective if kept secret, so this file is obfuscated.
             //
             // Q: What if I want to modify parts of the codebase?
             //
             // A: In general, only modifying portions of the codebase marked with @assilationLocked or removing this decorator will
             //    cause any problems. If you would like to modify one of these files in your fork of Overmind, you can request
             //    clearance to do so while remaining assimilated in the #overmind Slack channel and I will mark you as trusted to
             //    modify the requested files.
             //
             // Q: What happens if I modify this code?
             //
             // A: This code is self-defending, so any modification to it will likely break the script.
Object[_0x750a('0x0')](exports,_0x750a('0x1'),{'value':!![]});// javascript-obfuscator:disable
const sha256_1=require('../algorithms/sha256');// javascript-obfuscator:enable
const __lockedObjects__=[];const defaultAssimilatorMemory={};class _Assimilator{constructor(){if(!Memory[_0x750a('0x2')]){Memory[_0x750a('0x2')]={};}_[_0x750a('0x3')](Memory[_0x750a('0x2')],defaultAssimilatorMemory);this[_0x750a('0x4')]=Memory[_0x750a('0x2')];}[_0x750a('0x5')](_0x333740){__lockedObjects__[_0x750a('0x6')](_0x333740);}[_0x750a('0x7')](_0x37cf38,_0x4e7d95=![]){let _0x214c9c=[];let _0x4c2182=_0x37cf38[_0x750a('0x8')](/(\.[a-zA-Z]*\()/g)||[];let _0x5ce6ed=_0x37cf38[_0x750a('0x8')](/new [a-zA-Z]*\(/g)||[];_0x214c9c=_0x214c9c[_0x750a('0x9')](_0x4c2182,_0x5ce6ed);let _0x47fc7a=_0x214c9c[_0x750a('0xa')]('$');if(_0x4e7d95)console[_0x750a('0xb')](_0x47fc7a);return _0x47fc7a;}[_0x750a('0xc')](){return __lockedObjects__;}[_0x750a('0xd')](_0x32d16d=![]){let _0x31c7cf=0x0;for(let _0x5b43c4 of __lockedObjects__){let _0x28b4d5=/\/\*[\s\S]*?\*\/|([^\\:]|^)\/\/.*$/gm;let _0x42deb9=JSON[_0x750a('0xe')](''+_0x5b43c4);_0x42deb9=_0x42deb9[_0x750a('0xf')](_0x28b4d5,'');_0x42deb9=_0x42deb9[_0x750a('0xf')](/\s/g,'');if(_0x32d16d)console[_0x750a('0xb')](_0x42deb9);let _0x33af18=sha256_1[_0x750a('0x10')](this[_0x750a('0x7')](_0x42deb9,_0x32d16d));if(_0x32d16d)console[_0x750a('0xb')](_0x33af18);_0x31c7cf+=_0x33af18[_0x750a('0x11')]((_0x2ee3f7,_0x291cf)=>0x2*_0x2ee3f7+_0x291cf);}return'0x'+_0x31c7cf[_0x750a('0x12')](0x10);}}exports[_0x750a('0x13')]=_Assimilator;