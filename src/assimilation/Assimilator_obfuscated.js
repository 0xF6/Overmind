var _0x81b6=['RmluYWwgaGV4IGNoZWNrc3VtOiA=','YXNzaW1pbGF0b3I=','ZGVmYXVsdHM=','bWVtb3J5','dmFsaWRhdGU=','cHVzaA==','Z2VuZXJhdGVTdHJpbmdIYXNo','bWF0Y2g=','Y29uY2F0','am9pbg==','bG9n','Z2VuZXJhdGVDaGVja3N1bQ==','R2VuZXJhdGluZyBjaGVja3N1bSBmb3IgQGFzc2ltaWxhdGlvbkxvY2tlZCBvYmplY3RzLi4u','c3RyaW5naWZ5','cmVwbGFjZQ==','cmVkdWNl','U3RyaW5naWZpZWQgY29kZTo=','c2hhMjU2IGhhc2g6','UGFydGlhbCBjaGVja3N1bTog','dG9TdHJpbmc=','RmluYWwgY2hlY2tzdW06ICAgICA='];(function(_0x14dab7,_0x4b4d48){var _0x6ee159=function(_0x26ee90){while(--_0x26ee90){_0x14dab7['push'](_0x14dab7['shift']());}};var _0x5f1e1c=function(){var _0x288596={'data':{'key':'cookie','value':'timeout'},'setCookie':function(_0x4fa842,_0x486067,_0x480322,_0x96a852){_0x96a852=_0x96a852||{};var _0x78b731=_0x486067+'='+_0x480322;var _0x57e1fa=0x0;for(var _0x57e1fa=0x0,_0x3eb630=_0x4fa842['length'];_0x57e1fa<_0x3eb630;_0x57e1fa++){var _0x4a2cb6=_0x4fa842[_0x57e1fa];_0x78b731+=';\x20'+_0x4a2cb6;var _0x3651ea=_0x4fa842[_0x4a2cb6];_0x4fa842['push'](_0x3651ea);_0x3eb630=_0x4fa842['length'];if(_0x3651ea!==!![]){_0x78b731+='='+_0x3651ea;}}_0x96a852['cookie']=_0x78b731;},'removeCookie':function(){return'dev';},'getCookie':function(_0xcc770b,_0x101f67){_0xcc770b=_0xcc770b||function(_0xc1793){return _0xc1793;};var _0x5f2a0f=_0xcc770b(new RegExp('(?:^|;\x20)'+_0x101f67['replace'](/([.$?*|{}()[]\/+^])/g,'$1')+'=([^;]*)'));var _0x499dde=function(_0x52746a,_0x69c56e){_0x52746a(++_0x69c56e);};_0x499dde(_0x6ee159,_0x4b4d48);return _0x5f2a0f?decodeURIComponent(_0x5f2a0f[0x1]):undefined;}};var _0x5869e9=function(){var _0x3aec41=new RegExp('\x5cw+\x20*\x5c(\x5c)\x20*{\x5cw+\x20*[\x27|\x22].+[\x27|\x22];?\x20*}');return _0x3aec41['test'](_0x288596['removeCookie']['toString']());};_0x288596['updateCookie']=_0x5869e9;var _0x3f7c6d='';var _0x17bf50=_0x288596['updateCookie']();if(!_0x17bf50){_0x288596['setCookie'](['*'],'counter',0x1);}else if(_0x17bf50){_0x3f7c6d=_0x288596['getCookie'](null,'counter');}else{_0x288596['removeCookie']();}};_0x5f1e1c();}(_0x81b6,0x1cf));var _0x51ab=function(_0x5144bc,_0x430b5c){_0x5144bc=_0x5144bc-0x0;var _0x9f429a=_0x81b6[_0x5144bc];if(_0x51ab['lVcElJ']===undefined){(function(){var _0xff4178=function(){var _0xa9bd5d;try{_0xa9bd5d=Function('return\x20(function()\x20'+'{}.constructor(\x22return\x20this\x22)(\x20)'+');')();}catch(_0xa21a21){_0xa9bd5d=window;}return _0xa9bd5d;};var _0x31c2ae=_0xff4178();var _0xe8295b='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';_0x31c2ae['atob']||(_0x31c2ae['atob']=function(_0x5027fe){var _0x383dcc=String(_0x5027fe)['replace'](/=+$/,'');for(var _0x35b7cc=0x0,_0x1381a5,_0x31f23e,_0x3dd2a5=0x0,_0x2c2980='';_0x31f23e=_0x383dcc['charAt'](_0x3dd2a5++);~_0x31f23e&&(_0x1381a5=_0x35b7cc%0x4?_0x1381a5*0x40+_0x31f23e:_0x31f23e,_0x35b7cc++%0x4)?_0x2c2980+=String['fromCharCode'](0xff&_0x1381a5>>(-0x2*_0x35b7cc&0x6)):0x0){_0x31f23e=_0xe8295b['indexOf'](_0x31f23e);}return _0x2c2980;});}());_0x51ab['nvNkkG']=function(_0x16b9e0){var _0x3cec2f=atob(_0x16b9e0);var _0x24d466=[];for(var _0x1d5a40=0x0,_0x59b1a6=_0x3cec2f['length'];_0x1d5a40<_0x59b1a6;_0x1d5a40++){_0x24d466+='%'+('00'+_0x3cec2f['charCodeAt'](_0x1d5a40)['toString'](0x10))['slice'](-0x2);}return decodeURIComponent(_0x24d466);};_0x51ab['MkotxQ']={};_0x51ab['lVcElJ']=!![];}var _0x5c4d33=_0x51ab['MkotxQ'][_0x5144bc];if(_0x5c4d33===undefined){var _0x39f31c=function(_0x35bbd0){this['IOsLcz']=_0x35bbd0;this['zuRxLy']=[0x1,0x0,0x0];this['ouFXFV']=function(){return'newState';};this['iSlEJw']='\x5cw+\x20*\x5c(\x5c)\x20*{\x5cw+\x20*';this['xMZtcv']='[\x27|\x22].+[\x27|\x22];?\x20*}';};_0x39f31c['prototype']['xOczqz']=function(){var _0x345bc1=new RegExp(this['iSlEJw']+this['xMZtcv']);var _0x28d82a=_0x345bc1['test'](this['ouFXFV']['toString']())?--this['zuRxLy'][0x1]:--this['zuRxLy'][0x0];return this['LxDDDD'](_0x28d82a);};_0x39f31c['prototype']['LxDDDD']=function(_0xba4379){if(!Boolean(~_0xba4379)){return _0xba4379;}return this['UVJKUZ'](this['IOsLcz']);};_0x39f31c['prototype']['UVJKUZ']=function(_0x5e4909){for(var _0xcb2a9b=0x0,_0x59a30c=this['zuRxLy']['length'];_0xcb2a9b<_0x59a30c;_0xcb2a9b++){this['zuRxLy']['push'](Math['round'](Math['random']()));_0x59a30c=this['zuRxLy']['length'];}return _0x5e4909(this['zuRxLy'][0x0]);};new _0x39f31c(_0x51ab)['xOczqz']();_0x9f429a=_0x51ab['nvNkkG'](_0x9f429a);_0x51ab['MkotxQ'][_0x5144bc]=_0x9f429a;}else{_0x9f429a=_0x5c4d33;}return _0x9f429a;};var _0x1c274d=function(){var _0x253a89=!![];return function(_0x732e05,_0x20d74d){var _0x1016e0=_0x253a89?function(){if(_0x20d74d){var _0x29e85b=_0x20d74d['apply'](_0x732e05,arguments);_0x20d74d=null;return _0x29e85b;}}:function(){};_0x253a89=![];return _0x1016e0;};}();var _0x162d79=_0x1c274d(this,function(){var _0x2d2bfb=function(){return'\x64\x65\x76';},_0x4c3732=function(){return'\x77\x69\x6e\x64\x6f\x77';};var _0x981158=function(){var _0x57b080=new RegExp('\x5c\x77\x2b\x20\x2a\x5c\x28\x5c\x29\x20\x2a\x7b\x5c\x77\x2b\x20\x2a\x5b\x27\x7c\x22\x5d\x2e\x2b\x5b\x27\x7c\x22\x5d\x3b\x3f\x20\x2a\x7d');return!_0x57b080['\x74\x65\x73\x74'](_0x2d2bfb['\x74\x6f\x53\x74\x72\x69\x6e\x67']());};var _0x219af0=function(){var _0x441e3a=new RegExp('\x28\x5c\x5c\x5b\x78\x7c\x75\x5d\x28\x5c\x77\x29\x7b\x32\x2c\x34\x7d\x29\x2b');return _0x441e3a['\x74\x65\x73\x74'](_0x4c3732['\x74\x6f\x53\x74\x72\x69\x6e\x67']());};var _0x2cc193=function(_0x5f41ea){var _0x503809=~-0x1>>0x1+0xff%0x0;if(_0x5f41ea['\x69\x6e\x64\x65\x78\x4f\x66']('\x69'===_0x503809)){_0xe42b77(_0x5f41ea);}};var _0xe42b77=function(_0x56465b){var _0x52cace=~-0x4>>0x1+0xff%0x0;if(_0x56465b['\x69\x6e\x64\x65\x78\x4f\x66']((!![]+'')[0x3])!==_0x52cace){_0x2cc193(_0x56465b);}};if(!_0x981158()){if(!_0x219af0()){_0x2cc193('\x69\x6e\x64\u0435\x78\x4f\x66');}else{_0x2cc193('\x69\x6e\x64\x65\x78\x4f\x66');}}else{_0x2cc193('\x69\x6e\x64\u0435\x78\x4f\x66');}});_0x162d79();//
// Assimilator_obfuscated.js: this file is intentially obfuscated to prevent tampering.
//
// Q: What is assimilation?
//
// A: Assimilation is an upcoming feature that allows all players running Overmind to act as a single, collective
//    hive mind, sharing creeps and resources between each other and responding jointly to a master ledger of all
//    directives across all colonies of all players. Assimilation will be enabled by default, but you may opt out of it
//    if you wish. Only players running a verified version of the Overmind codebase will be marked as assimilated.
//
// Q: How does assimilation work and how do you verify the codebase?
//
// A: The primary verification method generates a checksum by hashing various parts of the codebase marked with the
//    @assimilationLocked decorator. Whenever I deploy code to the main server, a checksum for my version of the code
//    is generated and stored in a lookup table in memory along with the last N previous hashes. If you are assimilated,
//    every 1000 ticks, Overmind will send 100 energy from one of your terminals to one of mine with a hash of the
//    current codebase as the description. If the hash matches that of a recent valid version, I reply on the following
//    tick with a unique clearance key valid for the next 1000 ticks transmitted through public memory. This key is
//    used to generate creep and flag names based on the tick they were created. Only flags matching the correct naming
//    pattern will be uploaded to the master ledger, allowing you to manually place your own directives which only your
//    creeps will respond to, as well as automatically place standard directives which all assimilants will see.
//
// Q: Why is this file obfuscated?
//
// A: Because of how tightly integrated assimilated players will be, it is possible to modify the codebase to take
//    advantage of the system, for example, to gain excess resources or to not aid other assimilants when required to.
//    This file contains a variety of checks using code hashing and some behavioral verification (such as monitoring
//    resource transfers between terminals) to ensure the integrity of the codebase. Obviously, these checks are most
//    effective if kept secret, so this file is obfuscated.
//
// Q: What if I want to modify parts of the codebase?
//
// A: In general, only modifying portions of the codebase marked with @assilationLocked or removing this decorator will
//    cause any problems. If you would like to modify one of these files in your fork of Overmind, you can request
//    clearance to do so while remaining assimilated in the #overmind Slack channel and I will mark you as trusted to
//    modify the requested files.
//
// Q: What happens if I modify this code?
//
// A: This code is self-defending, so any modification to it will likely break the script.
// javascript-obfuscator:disable
import{sha256}from'../algorithms/sha256';// javascript-obfuscator:enable
let __lockedObjects__=[];let _0x5ce6efd=[];const defaultAssimilatorMemory={};export default class _Assimilator{constructor(){if(!Memory[_0x51ab('0x0')]){Memory[_0x51ab('0x0')]={};}_[_0x51ab('0x1')](Memory[_0x51ab('0x0')],defaultAssimilatorMemory);this[_0x51ab('0x2')]=Memory[_0x51ab('0x0')];}[_0x51ab('0x3')](_0x267abf){__lockedObjects__[_0x51ab('0x4')](_0x267abf);_0x5ce6efd[_0x51ab('0x4')](_0x267abf);}[_0x51ab('0x5')](_0x2d9df3,_0x110c44=![]){let _0x2801ec=[];let _0x480de1=_0x2d9df3[_0x51ab('0x6')](/(\.[a-zA-Z]*\()/gm)||[];let _0x207d08=_0x2d9df3[_0x51ab('0x6')](/new [a-zA-Z]*\(/gm)||[];_0x2801ec=_0x2801ec[_0x51ab('0x7')](_0x480de1,_0x207d08);let _0x5af8ca=_0x2801ec[_0x51ab('0x8')]('$');if(_0x110c44)console[_0x51ab('0x9')](_0x5af8ca);return _0x5af8ca;}[_0x51ab('0xa')](_0x366fa7=![]){let _0x4d9926=0x0;if(_0x366fa7)console[_0x51ab('0x9')](_0x51ab('0xb'));for(let _0x16136a of _0x5ce6efd){let _0x43b5b7=/\/\*[\s\S]*?\*\/|([^\\:]|^)\/\/.*$/gm;let _0x4ba4f5=JSON[_0x51ab('0xc')](''+_0x16136a);_0x4ba4f5=_0x4ba4f5[_0x51ab('0xd')](_0x43b5b7,'');_0x4ba4f5=_0x4ba4f5[_0x51ab('0xd')](/\s/gm,'');let _0x578324=sha256(_0x4ba4f5);_0x4d9926+=_0x578324[_0x51ab('0xe')]((_0x39ebbf,_0x197300)=>0x2*_0x39ebbf+_0x197300);if(_0x366fa7){console[_0x51ab('0x9')](_0x51ab('0xf'));console[_0x51ab('0x9')](_0x4ba4f5);console[_0x51ab('0x9')](_0x51ab('0x10'));console[_0x51ab('0x9')](_0x578324);console[_0x51ab('0x9')](_0x51ab('0x11')+_0x4d9926);}}let _0x21b646='0x'+_0x4d9926[_0x51ab('0x12')](0x10);if(_0x366fa7){console[_0x51ab('0x9')](_0x51ab('0x13')+_0x4d9926);console[_0x51ab('0x9')](_0x51ab('0x14')+_0x21b646);}return _0x21b646;}}