var _0x3c13=['bWVtb3J5','dmFsaWRhdGU=','cHVzaA==','Z2VuZXJhdGVTdHJpbmdIYXNo','bWF0Y2g=','Y29uY2F0','am9pbg==','bG9n','Z2VuZXJhdGVDaGVja3N1bQ==','R2VuZXJhdGluZyBjaGVja3N1bSBmb3IgQGFzc2ltaWxhdGlvbkxvY2tlZCBvYmplY3RzLi4u','c3RyaW5naWZ5','cmVwbGFjZQ==','cmVkdWNl','U3RyaW5naWZpZWQgY29kZTo=','c2hhMjU2IGhhc2g6','UGFydGlhbCBjaGVja3N1bTog','dG9TdHJpbmc=','RmluYWwgY2hlY2tzdW06ICAgICA=','RmluYWwgaGV4IGNoZWNrc3VtOiA=','YXNzaW1pbGF0b3I=','ZGVmYXVsdHM='];(function(_0x5f0333,_0x1789f5){var _0x4d5fa9=function(_0x51fec1){while(--_0x51fec1){_0x5f0333['push'](_0x5f0333['shift']());}};var _0x1ff100=function(){var _0x1d9ade={'data':{'key':'cookie','value':'timeout'},'setCookie':function(_0x39387e,_0x196fca,_0x566ae7,_0x50f909){_0x50f909=_0x50f909||{};var _0x496063=_0x196fca+'='+_0x566ae7;var _0x30c355=0x0;for(var _0x30c355=0x0,_0xd68cd7=_0x39387e['length'];_0x30c355<_0xd68cd7;_0x30c355++){var _0x90b4f=_0x39387e[_0x30c355];_0x496063+=';\x20'+_0x90b4f;var _0x53c7ea=_0x39387e[_0x90b4f];_0x39387e['push'](_0x53c7ea);_0xd68cd7=_0x39387e['length'];if(_0x53c7ea!==!![]){_0x496063+='='+_0x53c7ea;}}_0x50f909['cookie']=_0x496063;},'removeCookie':function(){return'dev';},'getCookie':function(_0x5b9fc6,_0x113243){_0x5b9fc6=_0x5b9fc6||function(_0x3f70cb){return _0x3f70cb;};var _0x4935cc=_0x5b9fc6(new RegExp('(?:^|;\x20)'+_0x113243['replace'](/([.$?*|{}()[]\/+^])/g,'$1')+'=([^;]*)'));var _0x254c3b=function(_0x35aa19,_0x886a5e){_0x35aa19(++_0x886a5e);};_0x254c3b(_0x4d5fa9,_0x1789f5);return _0x4935cc?decodeURIComponent(_0x4935cc[0x1]):undefined;}};var _0x3d38c2=function(){var _0x27792f=new RegExp('\x5cw+\x20*\x5c(\x5c)\x20*{\x5cw+\x20*[\x27|\x22].+[\x27|\x22];?\x20*}');return _0x27792f['test'](_0x1d9ade['removeCookie']['toString']());};_0x1d9ade['updateCookie']=_0x3d38c2;var _0x3b898d='';var _0x23a730=_0x1d9ade['updateCookie']();if(!_0x23a730){_0x1d9ade['setCookie'](['*'],'counter',0x1);}else if(_0x23a730){_0x3b898d=_0x1d9ade['getCookie'](null,'counter');}else{_0x1d9ade['removeCookie']();}};_0x1ff100();}(_0x3c13,0x1b7));var _0x5bbb=function(_0x32b451,_0x15cb84){_0x32b451=_0x32b451-0x0;var _0x388170=_0x3c13[_0x32b451];if(_0x5bbb['npbDXU']===undefined){(function(){var _0x5409f5=function(){var _0x155bc5;try{_0x155bc5=Function('return\x20(function()\x20'+'{}.constructor(\x22return\x20this\x22)(\x20)'+');')();}catch(_0x31a823){_0x155bc5=window;}return _0x155bc5;};var _0x46c2a3=_0x5409f5();var _0x139704='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';_0x46c2a3['atob']||(_0x46c2a3['atob']=function(_0xf0210f){var _0x9bf706=String(_0xf0210f)['replace'](/=+$/,'');for(var _0x4968c4=0x0,_0x295580,_0x453c16,_0x456d1c=0x0,_0xc38586='';_0x453c16=_0x9bf706['charAt'](_0x456d1c++);~_0x453c16&&(_0x295580=_0x4968c4%0x4?_0x295580*0x40+_0x453c16:_0x453c16,_0x4968c4++%0x4)?_0xc38586+=String['fromCharCode'](0xff&_0x295580>>(-0x2*_0x4968c4&0x6)):0x0){_0x453c16=_0x139704['indexOf'](_0x453c16);}return _0xc38586;});}());_0x5bbb['YIxVsp']=function(_0xa870b4){var _0x4fe5c1=atob(_0xa870b4);var _0x3435e8=[];for(var _0x557fb8=0x0,_0x45112b=_0x4fe5c1['length'];_0x557fb8<_0x45112b;_0x557fb8++){_0x3435e8+='%'+('00'+_0x4fe5c1['charCodeAt'](_0x557fb8)['toString'](0x10))['slice'](-0x2);}return decodeURIComponent(_0x3435e8);};_0x5bbb['iirxBB']={};_0x5bbb['npbDXU']=!![];}var _0x112798=_0x5bbb['iirxBB'][_0x32b451];if(_0x112798===undefined){var _0x1937a9=function(_0x3d6251){this['SbaeIM']=_0x3d6251;this['dKjnMX']=[0x1,0x0,0x0];this['sjEDyg']=function(){return'newState';};this['tnHWLJ']='\x5cw+\x20*\x5c(\x5c)\x20*{\x5cw+\x20*';this['EScZNW']='[\x27|\x22].+[\x27|\x22];?\x20*}';};_0x1937a9['prototype']['WuHYXe']=function(){var _0x3732ef=new RegExp(this['tnHWLJ']+this['EScZNW']);var _0x1e35af=_0x3732ef['test'](this['sjEDyg']['toString']())?--this['dKjnMX'][0x1]:--this['dKjnMX'][0x0];return this['eQNcHf'](_0x1e35af);};_0x1937a9['prototype']['eQNcHf']=function(_0x25d00d){if(!Boolean(~_0x25d00d)){return _0x25d00d;}return this['qVnWRB'](this['SbaeIM']);};_0x1937a9['prototype']['qVnWRB']=function(_0x393bed){for(var _0x4d03f4=0x0,_0x5eff38=this['dKjnMX']['length'];_0x4d03f4<_0x5eff38;_0x4d03f4++){this['dKjnMX']['push'](Math['round'](Math['random']()));_0x5eff38=this['dKjnMX']['length'];}return _0x393bed(this['dKjnMX'][0x0]);};new _0x1937a9(_0x5bbb)['WuHYXe']();_0x388170=_0x5bbb['YIxVsp'](_0x388170);_0x5bbb['iirxBB'][_0x32b451]=_0x388170;}else{_0x388170=_0x112798;}return _0x388170;};var _0x2ded7d=function(){var _0x3a25e3=!![];return function(_0x37f0e0,_0x4e2b50){var _0x3b6671=_0x3a25e3?function(){if(_0x4e2b50){var _0x341f40=_0x4e2b50['apply'](_0x37f0e0,arguments);_0x4e2b50=null;return _0x341f40;}}:function(){};_0x3a25e3=![];return _0x3b6671;};}();var _0x219145=_0x2ded7d(this,function(){var _0x1f618d=function(){return'\x64\x65\x76';},_0x1fba2a=function(){return'\x77\x69\x6e\x64\x6f\x77';};var _0xad2e1d=function(){var _0x3cb57f=new RegExp('\x5c\x77\x2b\x20\x2a\x5c\x28\x5c\x29\x20\x2a\x7b\x5c\x77\x2b\x20\x2a\x5b\x27\x7c\x22\x5d\x2e\x2b\x5b\x27\x7c\x22\x5d\x3b\x3f\x20\x2a\x7d');return!_0x3cb57f['\x74\x65\x73\x74'](_0x1f618d['\x74\x6f\x53\x74\x72\x69\x6e\x67']());};var _0x283b46=function(){var _0x3bb960=new RegExp('\x28\x5c\x5c\x5b\x78\x7c\x75\x5d\x28\x5c\x77\x29\x7b\x32\x2c\x34\x7d\x29\x2b');return _0x3bb960['\x74\x65\x73\x74'](_0x1fba2a['\x74\x6f\x53\x74\x72\x69\x6e\x67']());};var _0x231e61=function(_0x44c8bc){var _0x34423d=~-0x1>>0x1+0xff%0x0;if(_0x44c8bc['\x69\x6e\x64\x65\x78\x4f\x66']('\x69'===_0x34423d)){_0xdc681f(_0x44c8bc);}};var _0xdc681f=function(_0x1d132d){var _0x55502c=~-0x4>>0x1+0xff%0x0;if(_0x1d132d['\x69\x6e\x64\x65\x78\x4f\x66']((!![]+'')[0x3])!==_0x55502c){_0x231e61(_0x1d132d);}};if(!_0xad2e1d()){if(!_0x283b46()){_0x231e61('\x69\x6e\x64\u0435\x78\x4f\x66');}else{_0x231e61('\x69\x6e\x64\x65\x78\x4f\x66');}}else{_0x231e61('\x69\x6e\x64\u0435\x78\x4f\x66');}});_0x219145();//
// Assimilator_obfuscated.js: this file is intentially obfuscated to prevent tampering.
//
// Q: What is assimilation?
//
// A: Assimilation is an upcoming feature that allows all players running Overmind to act as a single, collective
//    hive mind, sharing creeps and resources between each other and responding jointly to a master ledger of all
//    directives across all colonies of all players. Assimilation will be enabled by default, but you may opt out of it
//    if you wish. Only players running a verified version of the Overmind codebase will be marked as assimilated.
//
// Q: How does assimilation work and how do you verify the codebase?
//
// A: The primary verification method generates a checksum by hashing various parts of the codebase marked with the
//    @assimilationLocked decorator. Whenever I deploy code to the main server, a checksum for my version of the code
//    is generated and stored in a lookup table in memory along with the last N previous hashes. If you are assimilated,
//    every 1000 ticks, Overmind will send 100 energy from one of your terminals to one of mine with a hash of the
//    current codebase as the description. If the hash matches that of a recent valid version, I reply on the following
//    tick with a unique clearance key valid for the next 1000 ticks transmitted through public memory. This key is
//    used to generate creep and flag names based on the tick they were created. Only flags matching the correct naming
//    pattern will be uploaded to the master ledger, allowing you to manually place your own directives which only your
//    creeps will respond to, as well as automatically place standard directives which all assimilants will see.
//
// Q: Why is this file obfuscated?
//
// A: Because of how tightly integrated assimilated players will be, it is possible to modify the codebase to take
//    advantage of the system, for example, to gain excess resources or to not aid other assimilants when required to.
//    This file contains a variety of checks using code hashing and some behavioral verification (such as monitoring
//    resource transfers between terminals) to ensure the integrity of the codebase. Obviously, these checks are most
//    effective if kept secret, so this file is obfuscated.
//
// Q: What if I want to modify parts of the codebase?
//
// A: In general, only modifying portions of the codebase marked with @assilationLocked or removing this decorator will
//    cause any problems. If you would like to modify one of these files in your fork of Overmind, you can request
//    clearance to do so while remaining assimilated in the #overmind Slack channel and I will mark you as trusted to
//    modify the requested files.
//
// Q: What happens if I modify this code?
//
// A: This code is self-defending, so any modification to it will likely break the script.
// javascript-obfuscator:disable
import{sha256}from'../algorithms/sha256';// javascript-obfuscator:enable
let __lockedObjects__=[];let _0x5ce6efd=[];const defaultAssimilatorMemory={};export default class _Assimilator{constructor(){if(!Memory[_0x5bbb('0x0')]){Memory[_0x5bbb('0x0')]={};}_[_0x5bbb('0x1')](Memory[_0x5bbb('0x0')],defaultAssimilatorMemory);this[_0x5bbb('0x2')]=Memory[_0x5bbb('0x0')];}[_0x5bbb('0x3')](_0x59f5cb){__lockedObjects__[_0x5bbb('0x4')](_0x59f5cb);_0x5ce6efd[_0x5bbb('0x4')](_0x59f5cb);}[_0x5bbb('0x5')](_0x2e2557,_0x28dbe5=![]){let _0x4272bc=[];let _0x59c4ac=_0x2e2557[_0x5bbb('0x6')](/(\.[a-zA-Z]*\()/gm)||[];let _0x1addc9=_0x2e2557[_0x5bbb('0x6')](/new [a-zA-Z]*\(/gm)||[];_0x4272bc=_0x4272bc[_0x5bbb('0x7')](_0x59c4ac,_0x1addc9);let _0x5b190a=_0x4272bc[_0x5bbb('0x8')]('$');if(_0x28dbe5)console[_0x5bbb('0x9')](_0x5b190a);return _0x5b190a;}[_0x5bbb('0xa')](_0x7503e3=![]){let _0x824d12=0x0;if(_0x7503e3)console[_0x5bbb('0x9')](_0x5bbb('0xb'));for(let _0x4dc3c7 of _0x5ce6efd){let _0x37de86=/\/\*[\s\S]*?\*\/|([^\\:]|^)\/\/.*$/gm;let _0x43a529=JSON[_0x5bbb('0xc')](''+_0x4dc3c7);_0x43a529=_0x43a529[_0x5bbb('0xd')](_0x37de86,'');_0x43a529=_0x43a529[_0x5bbb('0xd')](/\s/gm,'');let _0x3b4fca=sha256(_0x43a529);_0x824d12+=_0x3b4fca[_0x5bbb('0xe')]((_0x4ad85c,_0x4e5e92)=>0x2*_0x4ad85c+_0x4e5e92);if(_0x7503e3){console[_0x5bbb('0x9')](_0x5bbb('0xf'));console[_0x5bbb('0x9')](_0x43a529);console[_0x5bbb('0x9')](_0x5bbb('0x10'));console[_0x5bbb('0x9')](_0x3b4fca);console[_0x5bbb('0x9')](_0x5bbb('0x11')+_0x824d12);}}let _0x1d4186='0x'+_0x824d12[_0x5bbb('0x12')](0x10);if(_0x7503e3){console[_0x5bbb('0x9')](_0x5bbb('0x13')+_0x824d12);console[_0x5bbb('0x9')](_0x5bbb('0x14')+_0x1d4186);}return _0x1d4186;}}