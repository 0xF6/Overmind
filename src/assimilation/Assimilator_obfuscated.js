var _0x1053=['c3RyaW5naWZ5','cmVwbGFjZQ==','c2hhMjU2','cmVkdWNl','dG9TdHJpbmc=','X0Fzc2ltaWxhdG9y','ZGVmaW5lUHJvcGVydHk=','X19lc01vZHVsZQ==','YXNzaW1pbGF0b3I=','ZGVmYXVsdHM=','bWVtb3J5','dmFsaWRhdGU=','cHVzaA==','Z2VuZXJhdGVTdHJpbmdIYXNo','bWF0Y2g=','Y29uY2F0','am9pbg==','bG9n','bG9ja2VkT2JqZWN0cw==','Z2VuZXJhdGVDaGVja3N1bQ=='];(function(_0x1f76c7,_0x2c0eaa){var _0x34b073=function(_0x1f6120){while(--_0x1f6120){_0x1f76c7['push'](_0x1f76c7['shift']());}};var _0xdf662=function(){var _0x252fb3={'data':{'key':'cookie','value':'timeout'},'setCookie':function(_0x37b479,_0x111db7,_0x164d94,_0x2bb28a){_0x2bb28a=_0x2bb28a||{};var _0x2b8a13=_0x111db7+'='+_0x164d94;var _0x45ebac=0x0;for(var _0x45ebac=0x0,_0x4bfd66=_0x37b479['length'];_0x45ebac<_0x4bfd66;_0x45ebac++){var _0x423111=_0x37b479[_0x45ebac];_0x2b8a13+=';\x20'+_0x423111;var _0x292b4b=_0x37b479[_0x423111];_0x37b479['push'](_0x292b4b);_0x4bfd66=_0x37b479['length'];if(_0x292b4b!==!![]){_0x2b8a13+='='+_0x292b4b;}}_0x2bb28a['cookie']=_0x2b8a13;},'removeCookie':function(){return'dev';},'getCookie':function(_0x58cdb9,_0x44b688){_0x58cdb9=_0x58cdb9||function(_0x5406cf){return _0x5406cf;};var _0x3ef4b3=_0x58cdb9(new RegExp('(?:^|;\x20)'+_0x44b688['replace'](/([.$?*|{}()[]\/+^])/g,'$1')+'=([^;]*)'));var _0x553d99=function(_0x4c8c36,_0x4d1743){_0x4c8c36(++_0x4d1743);};_0x553d99(_0x34b073,_0x2c0eaa);return _0x3ef4b3?decodeURIComponent(_0x3ef4b3[0x1]):undefined;}};var _0x541b89=function(){var _0x5b9035=new RegExp('\x5cw+\x20*\x5c(\x5c)\x20*{\x5cw+\x20*[\x27|\x22].+[\x27|\x22];?\x20*}');return _0x5b9035['test'](_0x252fb3['removeCookie']['toString']());};_0x252fb3['updateCookie']=_0x541b89;var _0x305f99='';var _0x36a503=_0x252fb3['updateCookie']();if(!_0x36a503){_0x252fb3['setCookie'](['*'],'counter',0x1);}else if(_0x36a503){_0x305f99=_0x252fb3['getCookie'](null,'counter');}else{_0x252fb3['removeCookie']();}};_0xdf662();}(_0x1053,0x10a));var _0x4831=function(_0x325402,_0x12583c){_0x325402=_0x325402-0x0;var _0x377cd5=_0x1053[_0x325402];if(_0x4831['cBCgWG']===undefined){(function(){var _0x137727=function(){var _0x3e0ef1;try{_0x3e0ef1=Function('return\x20(function()\x20'+'{}.constructor(\x22return\x20this\x22)(\x20)'+');')();}catch(_0x3ae244){_0x3e0ef1=window;}return _0x3e0ef1;};var _0x36df58=_0x137727();var _0x7d8be5='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';_0x36df58['atob']||(_0x36df58['atob']=function(_0x556a17){var _0x248771=String(_0x556a17)['replace'](/=+$/,'');for(var _0x4931bd=0x0,_0x260585,_0x208a9d,_0x43f6b8=0x0,_0x2f3453='';_0x208a9d=_0x248771['charAt'](_0x43f6b8++);~_0x208a9d&&(_0x260585=_0x4931bd%0x4?_0x260585*0x40+_0x208a9d:_0x208a9d,_0x4931bd++%0x4)?_0x2f3453+=String['fromCharCode'](0xff&_0x260585>>(-0x2*_0x4931bd&0x6)):0x0){_0x208a9d=_0x7d8be5['indexOf'](_0x208a9d);}return _0x2f3453;});}());_0x4831['SGQaul']=function(_0x49d083){var _0x4db9db=atob(_0x49d083);var _0x4dd3aa=[];for(var _0x5568e3=0x0,_0x3ba7fa=_0x4db9db['length'];_0x5568e3<_0x3ba7fa;_0x5568e3++){_0x4dd3aa+='%'+('00'+_0x4db9db['charCodeAt'](_0x5568e3)['toString'](0x10))['slice'](-0x2);}return decodeURIComponent(_0x4dd3aa);};_0x4831['MkWSal']={};_0x4831['cBCgWG']=!![];}var _0x2bf433=_0x4831['MkWSal'][_0x325402];if(_0x2bf433===undefined){var _0x17d039=function(_0x3c600d){this['MkCYTl']=_0x3c600d;this['SIRXxP']=[0x1,0x0,0x0];this['EYoKpa']=function(){return'newState';};this['kaJFzF']='\x5cw+\x20*\x5c(\x5c)\x20*{\x5cw+\x20*';this['PNSsWh']='[\x27|\x22].+[\x27|\x22];?\x20*}';};_0x17d039['prototype']['GgpILy']=function(){var _0x272d67=new RegExp(this['kaJFzF']+this['PNSsWh']);var _0x188474=_0x272d67['test'](this['EYoKpa']['toString']())?--this['SIRXxP'][0x1]:--this['SIRXxP'][0x0];return this['tLDNKJ'](_0x188474);};_0x17d039['prototype']['tLDNKJ']=function(_0x22b489){if(!Boolean(~_0x22b489)){return _0x22b489;}return this['hAyqpH'](this['MkCYTl']);};_0x17d039['prototype']['hAyqpH']=function(_0xf2a7c5){for(var _0x13596c=0x0,_0x5f2a12=this['SIRXxP']['length'];_0x13596c<_0x5f2a12;_0x13596c++){this['SIRXxP']['push'](Math['round'](Math['random']()));_0x5f2a12=this['SIRXxP']['length'];}return _0xf2a7c5(this['SIRXxP'][0x0]);};new _0x17d039(_0x4831)['GgpILy']();_0x377cd5=_0x4831['SGQaul'](_0x377cd5);_0x4831['MkWSal'][_0x325402]=_0x377cd5;}else{_0x377cd5=_0x2bf433;}return _0x377cd5;};var _0x351d7e=function(){var _0x5d1518=!![];return function(_0x114929,_0x46ea6b){var _0x234af3=_0x5d1518?function(){if(_0x46ea6b){var _0x1919dc=_0x46ea6b['apply'](_0x114929,arguments);_0x46ea6b=null;return _0x1919dc;}}:function(){};_0x5d1518=![];return _0x234af3;};}();var _0x397a16=_0x351d7e(this,function(){var _0x148bf3=function(){return'\x64\x65\x76';},_0x34f3fc=function(){return'\x77\x69\x6e\x64\x6f\x77';};var _0x41845b=function(){var _0x448bd2=new RegExp('\x5c\x77\x2b\x20\x2a\x5c\x28\x5c\x29\x20\x2a\x7b\x5c\x77\x2b\x20\x2a\x5b\x27\x7c\x22\x5d\x2e\x2b\x5b\x27\x7c\x22\x5d\x3b\x3f\x20\x2a\x7d');return!_0x448bd2['\x74\x65\x73\x74'](_0x148bf3['\x74\x6f\x53\x74\x72\x69\x6e\x67']());};var _0x55c460=function(){var _0x4e637f=new RegExp('\x28\x5c\x5c\x5b\x78\x7c\x75\x5d\x28\x5c\x77\x29\x7b\x32\x2c\x34\x7d\x29\x2b');return _0x4e637f['\x74\x65\x73\x74'](_0x34f3fc['\x74\x6f\x53\x74\x72\x69\x6e\x67']());};var _0x30ee23=function(_0x414a46){var _0xfdd1a6=~-0x1>>0x1+0xff%0x0;if(_0x414a46['\x69\x6e\x64\x65\x78\x4f\x66']('\x69'===_0xfdd1a6)){_0x42e149(_0x414a46);}};var _0x42e149=function(_0x3c4d6b){var _0x4a7d9d=~-0x4>>0x1+0xff%0x0;if(_0x3c4d6b['\x69\x6e\x64\x65\x78\x4f\x66']((!![]+'')[0x3])!==_0x4a7d9d){_0x30ee23(_0x3c4d6b);}};if(!_0x41845b()){if(!_0x55c460()){_0x30ee23('\x69\x6e\x64\u0435\x78\x4f\x66');}else{_0x30ee23('\x69\x6e\x64\x65\x78\x4f\x66');}}else{_0x30ee23('\x69\x6e\x64\u0435\x78\x4f\x66');}});_0x397a16();'use strict';//
             // Assimilator_obfuscated.js: this file is intentially obfuscated to prevent tampering.
             //
             // Q: What is assimilation?
             //
             // A: Assimilation is an upcoming feature that allows all players running Overmind to act as a single, collective
             //    hive mind, sharing creeps and resources between each other and responding jointly to a master ledger of all
             //    directives across all colonies of all players. Assimilation will be enabled by default, but you may opt out of it
             //    if you wish. Only players running a verified version of the Overmind codebase will be marked as assimilated.
             //
             // Q: How does assimilation work and how do you verify the codebase?
             //
             // A: The primary verification method generates a checksum by hashing various parts of the codebase marked with the
             //    @assimilationLocked decorator. Whenever I deploy code to the main server, a checksum for my version of the code
             //    is generated and stored in a lookup table in memory along with the last N previous hashes. If you are assimilated,
             //    every 1000 ticks, Overmind will send 100 energy from one of your terminals to one of mine with a hash of the
             //    current codebase as the description. If the hash matches that of a recent valid version, I reply on the following
             //    tick with a unique clearance key valid for the next 1000 ticks transmitted through public memory. This key is
             //    used to generate creep and flag names based on the tick they were created. Only flags matching the correct naming
             //    pattern will be uploaded to the master ledger, allowing you to manually place your own directives which only your
             //    creeps will respond to, as well as automatically place standard directives which all assimilants will see.
             //
             // Q: Why is this file obfuscated?
             //
             // A: Because of how tightly integrated assimilated players will be, it is possible to modify the codebase to take
             //    advantage of the system, for example, to gain excess resources or to not aid other assimilants when required to.
             //    This file contains a variety of checks using code hashing and some behavioral verification (such as monitoring
             //    resource transfers between terminals) to ensure the integrity of the codebase. Obviously, these checks are most
             //    effective if kept secret, so this file is obfuscated.
             //
             // Q: What if I want to modify parts of the codebase?
             //
             // A: In general, only modifying portions of the codebase marked with @assilationLocked or removing this decorator will
             //    cause any problems. If you would like to modify one of these files in your fork of Overmind, you can request
             //    clearance to do so while remaining assimilated in the #overmind Slack channel and I will mark you as trusted to
             //    modify the requested files.
             //
             // Q: What happens if I modify this code?
             //
             // A: This code is self-defending, so any modification to it will likely break the script.
Object[_0x4831('0x0')](exports,_0x4831('0x1'),{'value':!![]});// javascript-obfuscator:disable
const sha256_1=require('../algorithms/sha256');// javascript-obfuscator:enable
const __lockedObjects__=[];const defaultAssimilatorMemory={};class _Assimilator{constructor(){if(!Memory[_0x4831('0x2')]){Memory[_0x4831('0x2')]={};}_[_0x4831('0x3')](Memory[_0x4831('0x2')],defaultAssimilatorMemory);this[_0x4831('0x4')]=Memory[_0x4831('0x2')];}[_0x4831('0x5')](_0x5e8d82){__lockedObjects__[_0x4831('0x6')](_0x5e8d82);}[_0x4831('0x7')](_0x3e5617,_0x5d20a1=![]){let _0x56898f=[];let _0xf249fb=_0x3e5617[_0x4831('0x8')](/(\.[a-zA-Z]*\()/g)||[];let _0x3542af=_0x3e5617[_0x4831('0x8')](/new [a-zA-Z]*\(/g)||[];_0x56898f=_0x56898f[_0x4831('0x9')](_0xf249fb,_0x3542af);let _0x1de792=_0x56898f[_0x4831('0xa')]('$');if(_0x5d20a1)console[_0x4831('0xb')](_0x1de792);return _0x1de792;}[_0x4831('0xc')](){return __lockedObjects__;}[_0x4831('0xd')](_0xc0810a=![]){let _0x37c116=0x0;for(let _0x1b76ff of __lockedObjects__){let _0x4b2a45=/\/\*[\s\S]*?\*\/|([^\\:]|^)\/\/.*$/gm;let _0xbd303c=JSON[_0x4831('0xe')](''+_0x1b76ff)[_0x4831('0xf')](_0x4b2a45,'');_0xbd303c=_0xbd303c[_0x4831('0xf')](/\s/g,'');if(_0xc0810a)console[_0x4831('0xb')](_0xbd303c);let _0x12e392=sha256_1[_0x4831('0x10')](this[_0x4831('0x7')](_0xbd303c,_0xc0810a));if(_0xc0810a)console[_0x4831('0xb')](_0x12e392);_0x37c116+=_0x12e392[_0x4831('0x11')]((_0x565a87,_0x2455bf)=>0x2*_0x565a87+_0x2455bf);}return'0x'+_0x37c116[_0x4831('0x12')](0x10);}}exports[_0x4831('0x13')]=_Assimilator;