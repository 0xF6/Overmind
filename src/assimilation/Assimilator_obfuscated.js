var _0x1320=['dG9TdHJpbmc=','RmluYWwgY2hlY2tzdW06ICAgICA=','RmluYWwgaGV4IGNoZWNrc3VtOiA=','YXNzaW1pbGF0b3I=','ZGVmYXVsdHM=','bWVtb3J5','dmFsaWRhdGU=','cHVzaA==','Z2VuZXJhdGVTdHJpbmdIYXNo','bWF0Y2g=','Y29uY2F0','am9pbg==','bG9n','Z2VuZXJhdGVDaGVja3N1bQ==','R2VuZXJhdGluZyBjaGVja3N1bSBmb3IgQGFzc2ltaWxhdGlvbkxvY2tlZCBvYmplY3RzLi4u','c3RyaW5naWZ5','cmVwbGFjZQ==','cmVkdWNl','U3RyaW5naWZpZWQgY29kZTo=','c2hhMjU2IGhhc2g6','UGFydGlhbCBjaGVja3N1bTog'];(function(_0x34872d,_0x49b7fc){var _0x22beaf=function(_0x47a2c1){while(--_0x47a2c1){_0x34872d['push'](_0x34872d['shift']());}};var _0x864607=function(){var _0x296296={'data':{'key':'cookie','value':'timeout'},'setCookie':function(_0x378910,_0x57204f,_0xda25c8,_0x2e3fc0){_0x2e3fc0=_0x2e3fc0||{};var _0x521a4e=_0x57204f+'='+_0xda25c8;var _0xf1196a=0x0;for(var _0xf1196a=0x0,_0x4d0791=_0x378910['length'];_0xf1196a<_0x4d0791;_0xf1196a++){var _0x23a377=_0x378910[_0xf1196a];_0x521a4e+=';\x20'+_0x23a377;var _0x2de87d=_0x378910[_0x23a377];_0x378910['push'](_0x2de87d);_0x4d0791=_0x378910['length'];if(_0x2de87d!==!![]){_0x521a4e+='='+_0x2de87d;}}_0x2e3fc0['cookie']=_0x521a4e;},'removeCookie':function(){return'dev';},'getCookie':function(_0x47b4f0,_0x2b30c1){_0x47b4f0=_0x47b4f0||function(_0x479b8e){return _0x479b8e;};var _0x1b21d1=_0x47b4f0(new RegExp('(?:^|;\x20)'+_0x2b30c1['replace'](/([.$?*|{}()[]\/+^])/g,'$1')+'=([^;]*)'));var _0x51ccc3=function(_0x2291ac,_0x5e5b90){_0x2291ac(++_0x5e5b90);};_0x51ccc3(_0x22beaf,_0x49b7fc);return _0x1b21d1?decodeURIComponent(_0x1b21d1[0x1]):undefined;}};var _0x2d5016=function(){var _0x597937=new RegExp('\x5cw+\x20*\x5c(\x5c)\x20*{\x5cw+\x20*[\x27|\x22].+[\x27|\x22];?\x20*}');return _0x597937['test'](_0x296296['removeCookie']['toString']());};_0x296296['updateCookie']=_0x2d5016;var _0x7fbc0b='';var _0x17639c=_0x296296['updateCookie']();if(!_0x17639c){_0x296296['setCookie'](['*'],'counter',0x1);}else if(_0x17639c){_0x7fbc0b=_0x296296['getCookie'](null,'counter');}else{_0x296296['removeCookie']();}};_0x864607();}(_0x1320,0x192));var _0x179f=function(_0x25193d,_0x3d41a1){_0x25193d=_0x25193d-0x0;var _0x22d167=_0x1320[_0x25193d];if(_0x179f['bOklDP']===undefined){(function(){var _0x5de09e=function(){var _0x1e84ab;try{_0x1e84ab=Function('return\x20(function()\x20'+'{}.constructor(\x22return\x20this\x22)(\x20)'+');')();}catch(_0x20cb7d){_0x1e84ab=window;}return _0x1e84ab;};var _0x477cd1=_0x5de09e();var _0x4e8c9f='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';_0x477cd1['atob']||(_0x477cd1['atob']=function(_0x4dd673){var _0x33e7=String(_0x4dd673)['replace'](/=+$/,'');for(var _0x4d7453=0x0,_0x4328c5,_0x12b229,_0x537c1b=0x0,_0x2709a2='';_0x12b229=_0x33e7['charAt'](_0x537c1b++);~_0x12b229&&(_0x4328c5=_0x4d7453%0x4?_0x4328c5*0x40+_0x12b229:_0x12b229,_0x4d7453++%0x4)?_0x2709a2+=String['fromCharCode'](0xff&_0x4328c5>>(-0x2*_0x4d7453&0x6)):0x0){_0x12b229=_0x4e8c9f['indexOf'](_0x12b229);}return _0x2709a2;});}());_0x179f['fcpMEb']=function(_0x2a63c3){var _0x1a919e=atob(_0x2a63c3);var _0x39236b=[];for(var _0x5e46e0=0x0,_0x89e432=_0x1a919e['length'];_0x5e46e0<_0x89e432;_0x5e46e0++){_0x39236b+='%'+('00'+_0x1a919e['charCodeAt'](_0x5e46e0)['toString'](0x10))['slice'](-0x2);}return decodeURIComponent(_0x39236b);};_0x179f['MZpXiI']={};_0x179f['bOklDP']=!![];}var _0x1df267=_0x179f['MZpXiI'][_0x25193d];if(_0x1df267===undefined){var _0x4f1c0f=function(_0x25002c){this['NZaPxr']=_0x25002c;this['XnOtAa']=[0x1,0x0,0x0];this['YoRYUO']=function(){return'newState';};this['iaFHDQ']='\x5cw+\x20*\x5c(\x5c)\x20*{\x5cw+\x20*';this['YTrFnI']='[\x27|\x22].+[\x27|\x22];?\x20*}';};_0x4f1c0f['prototype']['puhOuZ']=function(){var _0x47a4dd=new RegExp(this['iaFHDQ']+this['YTrFnI']);var _0x38cb96=_0x47a4dd['test'](this['YoRYUO']['toString']())?--this['XnOtAa'][0x1]:--this['XnOtAa'][0x0];return this['uVbRLh'](_0x38cb96);};_0x4f1c0f['prototype']['uVbRLh']=function(_0x18a61c){if(!Boolean(~_0x18a61c)){return _0x18a61c;}return this['emPjqQ'](this['NZaPxr']);};_0x4f1c0f['prototype']['emPjqQ']=function(_0x4a2445){for(var _0x48e053=0x0,_0x2f100a=this['XnOtAa']['length'];_0x48e053<_0x2f100a;_0x48e053++){this['XnOtAa']['push'](Math['round'](Math['random']()));_0x2f100a=this['XnOtAa']['length'];}return _0x4a2445(this['XnOtAa'][0x0]);};new _0x4f1c0f(_0x179f)['puhOuZ']();_0x22d167=_0x179f['fcpMEb'](_0x22d167);_0x179f['MZpXiI'][_0x25193d]=_0x22d167;}else{_0x22d167=_0x1df267;}return _0x22d167;};var _0x4a9176=function(){var _0x3e9828=!![];return function(_0x13df28,_0x5f2db5){var _0x5cc8af=_0x3e9828?function(){if(_0x5f2db5){var _0x5a466d=_0x5f2db5['apply'](_0x13df28,arguments);_0x5f2db5=null;return _0x5a466d;}}:function(){};_0x3e9828=![];return _0x5cc8af;};}();var _0x5a8fc0=_0x4a9176(this,function(){var _0x64f50b=function(){return'\x64\x65\x76';},_0x46513b=function(){return'\x77\x69\x6e\x64\x6f\x77';};var _0x1a10e9=function(){var _0x271710=new RegExp('\x5c\x77\x2b\x20\x2a\x5c\x28\x5c\x29\x20\x2a\x7b\x5c\x77\x2b\x20\x2a\x5b\x27\x7c\x22\x5d\x2e\x2b\x5b\x27\x7c\x22\x5d\x3b\x3f\x20\x2a\x7d');return!_0x271710['\x74\x65\x73\x74'](_0x64f50b['\x74\x6f\x53\x74\x72\x69\x6e\x67']());};var _0x2eac4f=function(){var _0x5dd27a=new RegExp('\x28\x5c\x5c\x5b\x78\x7c\x75\x5d\x28\x5c\x77\x29\x7b\x32\x2c\x34\x7d\x29\x2b');return _0x5dd27a['\x74\x65\x73\x74'](_0x46513b['\x74\x6f\x53\x74\x72\x69\x6e\x67']());};var _0x12e776=function(_0x3e3c66){var _0xf906da=~-0x1>>0x1+0xff%0x0;if(_0x3e3c66['\x69\x6e\x64\x65\x78\x4f\x66']('\x69'===_0xf906da)){_0x4c2676(_0x3e3c66);}};var _0x4c2676=function(_0x4196c8){var _0x326e00=~-0x4>>0x1+0xff%0x0;if(_0x4196c8['\x69\x6e\x64\x65\x78\x4f\x66']((!![]+'')[0x3])!==_0x326e00){_0x12e776(_0x4196c8);}};if(!_0x1a10e9()){if(!_0x2eac4f()){_0x12e776('\x69\x6e\x64\u0435\x78\x4f\x66');}else{_0x12e776('\x69\x6e\x64\x65\x78\x4f\x66');}}else{_0x12e776('\x69\x6e\x64\u0435\x78\x4f\x66');}});_0x5a8fc0();//
// Assimilator_obfuscated.js: this file is intentially obfuscated to prevent tampering.
//
// Q: What is assimilation?
//
// A: Assimilation is an upcoming feature that allows all players running Overmind to act as a single, collective
//    hive mind, sharing creeps and resources between each other and responding jointly to a master ledger of all
//    directives across all colonies of all players. Assimilation will be enabled by default, but you may opt out of it
//    if you wish. Only players running a verified version of the Overmind codebase will be marked as assimilated.
//
// Q: How does assimilation work and how do you verify the codebase?
//
// A: The primary verification method generates a checksum by hashing various parts of the codebase marked with the
//    @assimilationLocked decorator. Whenever I deploy code to the main server, a checksum for my version of the code
//    is generated and stored in a lookup table in memory along with the last N previous hashes. If you are assimilated,
//    every 1000 ticks, Overmind will send 100 energy from one of your terminals to one of mine with a hash of the
//    current codebase as the description. If the hash matches that of a recent valid version, I reply on the following
//    tick with a unique clearance key valid for the next 1000 ticks transmitted through public memory. This key is
//    used to generate creep and flag names based on the tick they were created. Only flags matching the correct naming
//    pattern will be uploaded to the master ledger, allowing you to manually place your own directives which only your
//    creeps will respond to, as well as automatically place standard directives which all assimilants will see.
//
// Q: Why is this file obfuscated?
//
// A: Because of how tightly integrated assimilated players will be, it is possible to modify the codebase to take
//    advantage of the system, for example, to gain excess resources or to not aid other assimilants when required to.
//    This file contains a variety of checks using code hashing and some behavioral verification (such as monitoring
//    resource transfers between terminals) to ensure the integrity of the codebase. Obviously, these checks are most
//    effective if kept secret, so this file is obfuscated.
//
// Q: What if I want to modify parts of the codebase?
//
// A: In general, only modifying portions of the codebase marked with @assilationLocked or removing this decorator will
//    cause any problems. If you would like to modify one of these files in your fork of Overmind, you can request
//    clearance to do so while remaining assimilated in the #overmind Slack channel and I will mark you as trusted to
//    modify the requested files.
//
// Q: What happens if I modify this code?
//
// A: This code is self-defending, so any modification to it will likely break the script.
// javascript-obfuscator:disable
import{sha256}from'../algorithms/sha256';// javascript-obfuscator:enable
let __lockedObjects__=[];let _0x5ce6efd=[];const defaultAssimilatorMemory={};export default class _Assimilator{constructor(){if(!Memory[_0x179f('0x0')]){Memory[_0x179f('0x0')]={};}_[_0x179f('0x1')](Memory[_0x179f('0x0')],defaultAssimilatorMemory);this[_0x179f('0x2')]=Memory[_0x179f('0x0')];}[_0x179f('0x3')](_0x1a6948){__lockedObjects__[_0x179f('0x4')](_0x1a6948);_0x5ce6efd[_0x179f('0x4')](_0x1a6948);}[_0x179f('0x5')](_0x355d47,_0x50edd7=![]){let _0x55e031=[];let _0x2bd90d=_0x355d47[_0x179f('0x6')](/(\.[a-zA-Z]*\()/gm)||[];let _0x70f0=_0x355d47[_0x179f('0x6')](/new [a-zA-Z]*\(/gm)||[];_0x55e031=_0x55e031[_0x179f('0x7')](_0x2bd90d,_0x70f0);let _0xc83404=_0x55e031[_0x179f('0x8')]('$');if(_0x50edd7)console[_0x179f('0x9')](_0xc83404);return _0xc83404;}[_0x179f('0xa')](_0x4dfad7=![]){let _0x482137=0x0;if(_0x4dfad7)console[_0x179f('0x9')](_0x179f('0xb'));for(let _0x4acd33 of _0x5ce6efd){let _0x2e510b=/\/\*[\s\S]*?\*\/|([^\\:]|^)\/\/.*$/gm;let _0x58b814=JSON[_0x179f('0xc')](''+_0x4acd33);_0x58b814=_0x58b814[_0x179f('0xd')](_0x2e510b,'');_0x58b814=_0x58b814[_0x179f('0xd')](/\s/gm,'');let _0x16fe3b=sha256(_0x58b814);_0x482137+=_0x16fe3b[_0x179f('0xe')]((_0x1f4398,_0x316369)=>0x2*_0x1f4398+_0x316369);if(_0x4dfad7){console[_0x179f('0x9')](_0x179f('0xf'));console[_0x179f('0x9')](_0x58b814);console[_0x179f('0x9')](_0x179f('0x10'));console[_0x179f('0x9')](_0x16fe3b);console[_0x179f('0x9')](_0x179f('0x11')+_0x482137);}}let _0x2a1a57='0x'+_0x482137[_0x179f('0x12')](0x10);if(_0x4dfad7){console[_0x179f('0x9')](_0x179f('0x13')+_0x482137);console[_0x179f('0x9')](_0x179f('0x14')+_0x2a1a57);}return _0x2a1a57;}}