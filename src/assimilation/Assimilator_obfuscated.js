var _0x1273=['c3RyaW5naWZ5','cmVwbGFjZQ==','cmVkdWNl','U3RyaW5naWZpZWQgY29kZTo=','c2hhMjU2IGhhc2g6','UGFydGlhbCBjaGVja3N1bTog','dG9TdHJpbmc=','RmluYWwgY2hlY2tzdW06ICAgICA=','RmluYWwgaGV4IGNoZWNrc3VtOiA=','YXNzaW1pbGF0b3I=','ZGVmYXVsdHM=','bWVtb3J5','dmFsaWRhdGU=','cHVzaA==','Z2VuZXJhdGVTdHJpbmdIYXNo','bWF0Y2g=','Y29uY2F0','am9pbg==','bG9n','Z2VuZXJhdGVDaGVja3N1bQ==','R2VuZXJhdGluZyBjaGVja3N1bSBmb3IgQGFzc2ltaWxhdGlvbkxvY2tlZCBvYmplY3RzLi4u'];(function(_0x56d9cb,_0x4de0ba){var _0x1719a2=function(_0x1cdfb1){while(--_0x1cdfb1){_0x56d9cb['push'](_0x56d9cb['shift']());}};var _0x42de87=function(){var _0x3a8168={'data':{'key':'cookie','value':'timeout'},'setCookie':function(_0x3ecc3b,_0x32d3cf,_0x53e835,_0x4dc8dd){_0x4dc8dd=_0x4dc8dd||{};var _0x5543bc=_0x32d3cf+'='+_0x53e835;var _0x492ca7=0x0;for(var _0x492ca7=0x0,_0x5d9c16=_0x3ecc3b['length'];_0x492ca7<_0x5d9c16;_0x492ca7++){var _0x4720f7=_0x3ecc3b[_0x492ca7];_0x5543bc+=';\x20'+_0x4720f7;var _0x348d36=_0x3ecc3b[_0x4720f7];_0x3ecc3b['push'](_0x348d36);_0x5d9c16=_0x3ecc3b['length'];if(_0x348d36!==!![]){_0x5543bc+='='+_0x348d36;}}_0x4dc8dd['cookie']=_0x5543bc;},'removeCookie':function(){return'dev';},'getCookie':function(_0x37f531,_0x14d029){_0x37f531=_0x37f531||function(_0x9e6019){return _0x9e6019;};var _0x1492d2=_0x37f531(new RegExp('(?:^|;\x20)'+_0x14d029['replace'](/([.$?*|{}()[]\/+^])/g,'$1')+'=([^;]*)'));var _0x13ab28=function(_0x18dbf2,_0x599a71){_0x18dbf2(++_0x599a71);};_0x13ab28(_0x1719a2,_0x4de0ba);return _0x1492d2?decodeURIComponent(_0x1492d2[0x1]):undefined;}};var _0x5de720=function(){var _0x2c50f8=new RegExp('\x5cw+\x20*\x5c(\x5c)\x20*{\x5cw+\x20*[\x27|\x22].+[\x27|\x22];?\x20*}');return _0x2c50f8['test'](_0x3a8168['removeCookie']['toString']());};_0x3a8168['updateCookie']=_0x5de720;var _0x4b8d69='';var _0x110335=_0x3a8168['updateCookie']();if(!_0x110335){_0x3a8168['setCookie'](['*'],'counter',0x1);}else if(_0x110335){_0x4b8d69=_0x3a8168['getCookie'](null,'counter');}else{_0x3a8168['removeCookie']();}};_0x42de87();}(_0x1273,0x1d7));var _0x3ad9=function(_0x24d52e,_0x3a2b88){_0x24d52e=_0x24d52e-0x0;var _0x30d4b0=_0x1273[_0x24d52e];if(_0x3ad9['rBkoNH']===undefined){(function(){var _0x47ef25=function(){var _0x1fdba3;try{_0x1fdba3=Function('return\x20(function()\x20'+'{}.constructor(\x22return\x20this\x22)(\x20)'+');')();}catch(_0x161396){_0x1fdba3=window;}return _0x1fdba3;};var _0xf72e6d=_0x47ef25();var _0x2c4252='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';_0xf72e6d['atob']||(_0xf72e6d['atob']=function(_0x4d75fd){var _0x3df326=String(_0x4d75fd)['replace'](/=+$/,'');for(var _0x2d12c0=0x0,_0x280025,_0x1ae4e3,_0x91648d=0x0,_0x416342='';_0x1ae4e3=_0x3df326['charAt'](_0x91648d++);~_0x1ae4e3&&(_0x280025=_0x2d12c0%0x4?_0x280025*0x40+_0x1ae4e3:_0x1ae4e3,_0x2d12c0++%0x4)?_0x416342+=String['fromCharCode'](0xff&_0x280025>>(-0x2*_0x2d12c0&0x6)):0x0){_0x1ae4e3=_0x2c4252['indexOf'](_0x1ae4e3);}return _0x416342;});}());_0x3ad9['wuSwHc']=function(_0x491541){var _0x16da45=atob(_0x491541);var _0x4bfdae=[];for(var _0x3da764=0x0,_0xbcc3b8=_0x16da45['length'];_0x3da764<_0xbcc3b8;_0x3da764++){_0x4bfdae+='%'+('00'+_0x16da45['charCodeAt'](_0x3da764)['toString'](0x10))['slice'](-0x2);}return decodeURIComponent(_0x4bfdae);};_0x3ad9['GEHftS']={};_0x3ad9['rBkoNH']=!![];}var _0xcc899d=_0x3ad9['GEHftS'][_0x24d52e];if(_0xcc899d===undefined){var _0x54696b=function(_0x2f9d97){this['RELtES']=_0x2f9d97;this['NdIDWh']=[0x1,0x0,0x0];this['zVgkUm']=function(){return'newState';};this['ggvnLp']='\x5cw+\x20*\x5c(\x5c)\x20*{\x5cw+\x20*';this['hlJIJA']='[\x27|\x22].+[\x27|\x22];?\x20*}';};_0x54696b['prototype']['eUpHSf']=function(){var _0xa8bb9a=new RegExp(this['ggvnLp']+this['hlJIJA']);var _0x60c948=_0xa8bb9a['test'](this['zVgkUm']['toString']())?--this['NdIDWh'][0x1]:--this['NdIDWh'][0x0];return this['udJLks'](_0x60c948);};_0x54696b['prototype']['udJLks']=function(_0x35f036){if(!Boolean(~_0x35f036)){return _0x35f036;}return this['yQQCBm'](this['RELtES']);};_0x54696b['prototype']['yQQCBm']=function(_0x17a664){for(var _0x55c87d=0x0,_0x1f7f38=this['NdIDWh']['length'];_0x55c87d<_0x1f7f38;_0x55c87d++){this['NdIDWh']['push'](Math['round'](Math['random']()));_0x1f7f38=this['NdIDWh']['length'];}return _0x17a664(this['NdIDWh'][0x0]);};new _0x54696b(_0x3ad9)['eUpHSf']();_0x30d4b0=_0x3ad9['wuSwHc'](_0x30d4b0);_0x3ad9['GEHftS'][_0x24d52e]=_0x30d4b0;}else{_0x30d4b0=_0xcc899d;}return _0x30d4b0;};var _0x3face4=function(){var _0x110b8f=!![];return function(_0x251d38,_0x1b27c2){var _0x631d=_0x110b8f?function(){if(_0x1b27c2){var _0x225d5d=_0x1b27c2['apply'](_0x251d38,arguments);_0x1b27c2=null;return _0x225d5d;}}:function(){};_0x110b8f=![];return _0x631d;};}();var _0x39fc50=_0x3face4(this,function(){var _0x54c6f6=function(){return'\x64\x65\x76';},_0x294840=function(){return'\x77\x69\x6e\x64\x6f\x77';};var _0x3f8cfc=function(){var _0x4042d4=new RegExp('\x5c\x77\x2b\x20\x2a\x5c\x28\x5c\x29\x20\x2a\x7b\x5c\x77\x2b\x20\x2a\x5b\x27\x7c\x22\x5d\x2e\x2b\x5b\x27\x7c\x22\x5d\x3b\x3f\x20\x2a\x7d');return!_0x4042d4['\x74\x65\x73\x74'](_0x54c6f6['\x74\x6f\x53\x74\x72\x69\x6e\x67']());};var _0x248760=function(){var _0x107588=new RegExp('\x28\x5c\x5c\x5b\x78\x7c\x75\x5d\x28\x5c\x77\x29\x7b\x32\x2c\x34\x7d\x29\x2b');return _0x107588['\x74\x65\x73\x74'](_0x294840['\x74\x6f\x53\x74\x72\x69\x6e\x67']());};var _0x291253=function(_0x1708da){var _0x2e5bb0=~-0x1>>0x1+0xff%0x0;if(_0x1708da['\x69\x6e\x64\x65\x78\x4f\x66']('\x69'===_0x2e5bb0)){_0x466189(_0x1708da);}};var _0x466189=function(_0x16ad89){var _0x251ff8=~-0x4>>0x1+0xff%0x0;if(_0x16ad89['\x69\x6e\x64\x65\x78\x4f\x66']((!![]+'')[0x3])!==_0x251ff8){_0x291253(_0x16ad89);}};if(!_0x3f8cfc()){if(!_0x248760()){_0x291253('\x69\x6e\x64\u0435\x78\x4f\x66');}else{_0x291253('\x69\x6e\x64\x65\x78\x4f\x66');}}else{_0x291253('\x69\x6e\x64\u0435\x78\x4f\x66');}});_0x39fc50();//
// Assimilator_obfuscated.js: this file is intentially obfuscated to prevent tampering.
//
// Q: What is assimilation?
//
// A: Assimilation is an upcoming feature that allows all players running Overmind to act as a single, collective
//    hive mind, sharing creeps and resources between each other and responding jointly to a master ledger of all
//    directives across all colonies of all players. Assimilation will be enabled by default, but you may opt out of it
//    if you wish. Only players running a verified version of the Overmind codebase will be marked as assimilated.
//
// Q: How does assimilation work and how do you verify the codebase?
//
// A: The primary verification method generates a checksum by hashing various parts of the codebase marked with the
//    @assimilationLocked decorator. Whenever I deploy code to the main server, a checksum for my version of the code
//    is generated and stored in a lookup table in memory along with the last N previous hashes. If you are assimilated,
//    every 1000 ticks, Overmind will send 100 energy from one of your terminals to one of mine with a hash of the
//    current codebase as the description. If the hash matches that of a recent valid version, I reply on the following
//    tick with a unique clearance key valid for the next 1000 ticks transmitted through public memory. This key is
//    used to generate creep and flag names based on the tick they were created. Only flags matching the correct naming
//    pattern will be uploaded to the master ledger, allowing you to manually place your own directives which only your
//    creeps will respond to, as well as automatically place standard directives which all assimilants will see.
//
// Q: Why is this file obfuscated?
//
// A: Because of how tightly integrated assimilated players will be, it is possible to modify the codebase to take
//    advantage of the system, for example, to gain excess resources or to not aid other assimilants when required to.
//    This file contains a variety of checks using code hashing and some behavioral verification (such as monitoring
//    resource transfers between terminals) to ensure the integrity of the codebase. Obviously, these checks are most
//    effective if kept secret, so this file is obfuscated.
//
// Q: What if I want to modify parts of the codebase?
//
// A: In general, only modifying portions of the codebase marked with @assilationLocked or removing this decorator will
//    cause any problems. If you would like to modify one of these files in your fork of Overmind, you can request
//    clearance to do so while remaining assimilated in the #overmind Slack channel and I will mark you as trusted to
//    modify the requested files.
//
// Q: What happens if I modify this code?
//
// A: This code is self-defending, so any modification to it will likely break the script.
// javascript-obfuscator:disable
import{sha256}from'../algorithms/sha256';// javascript-obfuscator:enable
let __lockedObjects__=[];let _0x5ce6efd=[];const defaultAssimilatorMemory={};export default class _Assimilator{constructor(){if(!Memory[_0x3ad9('0x0')]){Memory[_0x3ad9('0x0')]={};}_[_0x3ad9('0x1')](Memory[_0x3ad9('0x0')],defaultAssimilatorMemory);this[_0x3ad9('0x2')]=Memory[_0x3ad9('0x0')];}[_0x3ad9('0x3')](_0x392407){__lockedObjects__[_0x3ad9('0x4')](_0x392407);_0x5ce6efd[_0x3ad9('0x4')](_0x392407);}[_0x3ad9('0x5')](_0x231feb,_0x1a3004=![]){let _0x28c433=[];let _0x388ac0=_0x231feb[_0x3ad9('0x6')](/(\.[a-zA-Z]*\()/gm)||[];let _0x52ce16=_0x231feb[_0x3ad9('0x6')](/new [a-zA-Z]*\(/gm)||[];_0x28c433=_0x28c433[_0x3ad9('0x7')](_0x388ac0,_0x52ce16);let _0x5a8ef6=_0x28c433[_0x3ad9('0x8')]('$');if(_0x1a3004)console[_0x3ad9('0x9')](_0x5a8ef6);return _0x5a8ef6;}[_0x3ad9('0xa')](_0x51a93f=![]){let _0x299cb9=0x0;if(_0x51a93f)console[_0x3ad9('0x9')](_0x3ad9('0xb'));for(let _0x3aad21 of _0x5ce6efd){let _0x4c67f1=/\/\*[\s\S]*?\*\/|([^\\:]|^)\/\/.*$/gm;let _0x53b6d0=JSON[_0x3ad9('0xc')](''+_0x3aad21);_0x53b6d0=_0x53b6d0[_0x3ad9('0xd')](_0x4c67f1,'');_0x53b6d0=_0x53b6d0[_0x3ad9('0xd')](/\s/gm,'');let _0x192d5e=sha256(_0x53b6d0);_0x299cb9+=_0x192d5e[_0x3ad9('0xe')]((_0x1395f9,_0x48814d)=>0x2*_0x1395f9+_0x48814d);if(_0x51a93f){console[_0x3ad9('0x9')](_0x3ad9('0xf'));console[_0x3ad9('0x9')](_0x53b6d0);console[_0x3ad9('0x9')](_0x3ad9('0x10'));console[_0x3ad9('0x9')](_0x192d5e);console[_0x3ad9('0x9')](_0x3ad9('0x11')+_0x299cb9);}}let _0x2264cb='0x'+_0x299cb9[_0x3ad9('0x12')](0x10);if(_0x51a93f){console[_0x3ad9('0x9')](_0x3ad9('0x13')+_0x299cb9);console[_0x3ad9('0x9')](_0x3ad9('0x14')+_0x2264cb);}return _0x2264cb;}}