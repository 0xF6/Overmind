var _0x29f3=['cHVzaA==','Z2VuZXJhdGVDaGVja3N1bQ==','c3RyaW5naWZ5','cmVwbGFjZQ==','c2hhMjU2','cmVkdWNl','dG9TdHJpbmc=','X0Fzc2ltaWxhdG9y','ZGVmaW5lUHJvcGVydHk=','X19lc01vZHVsZQ==','cmVnaXN0ZXJDbGFzcw=='];(function(_0x5c3742,_0x5a09bb){var _0x20243e=function(_0x2011c2){while(--_0x2011c2){_0x5c3742['push'](_0x5c3742['shift']());}};var _0x4a91cc=function(){var _0x3cfa9d={'data':{'key':'cookie','value':'timeout'},'setCookie':function(_0x58fccf,_0x36d535,_0x835acf,_0x62791a){_0x62791a=_0x62791a||{};var _0x3c27a1=_0x36d535+'='+_0x835acf;var _0x5e1b31=0x0;for(var _0x5e1b31=0x0,_0x17001b=_0x58fccf['length'];_0x5e1b31<_0x17001b;_0x5e1b31++){var _0x1cb863=_0x58fccf[_0x5e1b31];_0x3c27a1+=';\x20'+_0x1cb863;var _0x588ad3=_0x58fccf[_0x1cb863];_0x58fccf['push'](_0x588ad3);_0x17001b=_0x58fccf['length'];if(_0x588ad3!==!![]){_0x3c27a1+='='+_0x588ad3;}}_0x62791a['cookie']=_0x3c27a1;},'removeCookie':function(){return'dev';},'getCookie':function(_0x2f755a,_0x19c102){_0x2f755a=_0x2f755a||function(_0x1a5525){return _0x1a5525;};var _0x5ed676=_0x2f755a(new RegExp('(?:^|;\x20)'+_0x19c102['replace'](/([.$?*|{}()[]\/+^])/g,'$1')+'=([^;]*)'));var _0x3980b5=function(_0xaad34b,_0x3449c7){_0xaad34b(++_0x3449c7);};_0x3980b5(_0x20243e,_0x5a09bb);return _0x5ed676?decodeURIComponent(_0x5ed676[0x1]):undefined;}};var _0x40fbce=function(){var _0x439279=new RegExp('\x5cw+\x20*\x5c(\x5c)\x20*{\x5cw+\x20*[\x27|\x22].+[\x27|\x22];?\x20*}');return _0x439279['test'](_0x3cfa9d['removeCookie']['toString']());};_0x3cfa9d['updateCookie']=_0x40fbce;var _0x448ea4='';var _0x282927=_0x3cfa9d['updateCookie']();if(!_0x282927){_0x3cfa9d['setCookie'](['*'],'counter',0x1);}else if(_0x282927){_0x448ea4=_0x3cfa9d['getCookie'](null,'counter');}else{_0x3cfa9d['removeCookie']();}};_0x4a91cc();}(_0x29f3,0x173));var _0x32b0=function(_0x29a48c,_0x21d244){_0x29a48c=_0x29a48c-0x0;var _0x2a23f1=_0x29f3[_0x29a48c];if(_0x32b0['yumHAr']===undefined){(function(){var _0x22b017=function(){var _0x4ec221;try{_0x4ec221=Function('return\x20(function()\x20'+'{}.constructor(\x22return\x20this\x22)(\x20)'+');')();}catch(_0x4ed98f){_0x4ec221=window;}return _0x4ec221;};var _0x1c0e12=_0x22b017();var _0x2c6571='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';_0x1c0e12['atob']||(_0x1c0e12['atob']=function(_0x112079){var _0x8f6451=String(_0x112079)['replace'](/=+$/,'');for(var _0xc44c70=0x0,_0x14f4c7,_0x48d85c,_0x5123ee=0x0,_0x18fea1='';_0x48d85c=_0x8f6451['charAt'](_0x5123ee++);~_0x48d85c&&(_0x14f4c7=_0xc44c70%0x4?_0x14f4c7*0x40+_0x48d85c:_0x48d85c,_0xc44c70++%0x4)?_0x18fea1+=String['fromCharCode'](0xff&_0x14f4c7>>(-0x2*_0xc44c70&0x6)):0x0){_0x48d85c=_0x2c6571['indexOf'](_0x48d85c);}return _0x18fea1;});}());_0x32b0['XaHvca']=function(_0x2f6d5b){var _0x264647=atob(_0x2f6d5b);var _0x25c416=[];for(var _0x50d26d=0x0,_0x41a7fd=_0x264647['length'];_0x50d26d<_0x41a7fd;_0x50d26d++){_0x25c416+='%'+('00'+_0x264647['charCodeAt'](_0x50d26d)['toString'](0x10))['slice'](-0x2);}return decodeURIComponent(_0x25c416);};_0x32b0['YPeeFx']={};_0x32b0['yumHAr']=!![];}var _0x571436=_0x32b0['YPeeFx'][_0x29a48c];if(_0x571436===undefined){var _0x497cf3=function(_0x2d2dfa){this['CoicKb']=_0x2d2dfa;this['khECGX']=[0x1,0x0,0x0];this['NSWPnE']=function(){return'newState';};this['eVaIZn']='\x5cw+\x20*\x5c(\x5c)\x20*{\x5cw+\x20*';this['ulvWTd']='[\x27|\x22].+[\x27|\x22];?\x20*}';};_0x497cf3['prototype']['WYszsg']=function(){var _0x576875=new RegExp(this['eVaIZn']+this['ulvWTd']);var _0x419819=_0x576875['test'](this['NSWPnE']['toString']())?--this['khECGX'][0x1]:--this['khECGX'][0x0];return this['uUqKYu'](_0x419819);};_0x497cf3['prototype']['uUqKYu']=function(_0x4862a5){if(!Boolean(~_0x4862a5)){return _0x4862a5;}return this['sNYaph'](this['CoicKb']);};_0x497cf3['prototype']['sNYaph']=function(_0x2f964a){for(var _0x186a6a=0x0,_0x2c4ee5=this['khECGX']['length'];_0x186a6a<_0x2c4ee5;_0x186a6a++){this['khECGX']['push'](Math['round'](Math['random']()));_0x2c4ee5=this['khECGX']['length'];}return _0x2f964a(this['khECGX'][0x0]);};new _0x497cf3(_0x32b0)['WYszsg']();_0x2a23f1=_0x32b0['XaHvca'](_0x2a23f1);_0x32b0['YPeeFx'][_0x29a48c]=_0x2a23f1;}else{_0x2a23f1=_0x571436;}return _0x2a23f1;};var _0x4ce70a=function(){var _0x167cf1=!![];return function(_0x386840,_0x1c468f){var _0xb2e4f0=_0x167cf1?function(){if(_0x1c468f){var _0x2d8b17=_0x1c468f['apply'](_0x386840,arguments);_0x1c468f=null;return _0x2d8b17;}}:function(){};_0x167cf1=![];return _0xb2e4f0;};}();var _0x1026bc=_0x4ce70a(this,function(){var _0x423072=function(){return'\x64\x65\x76';},_0x549410=function(){return'\x77\x69\x6e\x64\x6f\x77';};var _0x188721=function(){var _0x18efb2=new RegExp('\x5c\x77\x2b\x20\x2a\x5c\x28\x5c\x29\x20\x2a\x7b\x5c\x77\x2b\x20\x2a\x5b\x27\x7c\x22\x5d\x2e\x2b\x5b\x27\x7c\x22\x5d\x3b\x3f\x20\x2a\x7d');return!_0x18efb2['\x74\x65\x73\x74'](_0x423072['\x74\x6f\x53\x74\x72\x69\x6e\x67']());};var _0x3a64bb=function(){var _0xe73732=new RegExp('\x28\x5c\x5c\x5b\x78\x7c\x75\x5d\x28\x5c\x77\x29\x7b\x32\x2c\x34\x7d\x29\x2b');return _0xe73732['\x74\x65\x73\x74'](_0x549410['\x74\x6f\x53\x74\x72\x69\x6e\x67']());};var _0x5ec8e9=function(_0xf044b9){var _0x25368c=~-0x1>>0x1+0xff%0x0;if(_0xf044b9['\x69\x6e\x64\x65\x78\x4f\x66']('\x69'===_0x25368c)){_0x1ffca7(_0xf044b9);}};var _0x1ffca7=function(_0x4534d3){var _0x37f1d9=~-0x4>>0x1+0xff%0x0;if(_0x4534d3['\x69\x6e\x64\x65\x78\x4f\x66']((!![]+'')[0x3])!==_0x37f1d9){_0x5ec8e9(_0x4534d3);}};if(!_0x188721()){if(!_0x3a64bb()){_0x5ec8e9('\x69\x6e\x64\u0435\x78\x4f\x66');}else{_0x5ec8e9('\x69\x6e\x64\x65\x78\x4f\x66');}}else{_0x5ec8e9('\x69\x6e\x64\u0435\x78\x4f\x66');}});_0x1026bc();'use strict';//
             // Assimilator_obfuscated.js: this file is intentially obfuscated to prevent tampering.
             //
             // Q: What is assimilation?
             //
             // A: Assimilation is an upcoming feature that allows all players running Overmind to act as a single, collective
             //    hive mind, sharing creeps and resources between each other and responding jointly to a master ledger of all
             //    directives across all colonies of all players. Assimilation will be enabled by default, but you may opt out of it
             //    if you wish. Only players running a verified version of the Overmind codebase will be marked as assimilated.
             //
             // Q: How does assimilation work and how do you verify the codebase?
             //
             // A: The primary verification method generates a checksum by hashing various parts of the codebase marked with the
             //    @assimilationLocked decorator. Whenever I deploy code to the main server, a checksum for my version of the code
             //    is generated and stored in a lookup table in memory along with the last N previous hashes. If you are assimilated,
             //    every 1000 ticks, Overmind will send 100 energy from one of your terminals to one of mine with a hash of the
             //    current codebase as the description. If the hash matches that of a recent valid version, I reply on the following
             //    tick with a unique clearance key valid for the next 1000 ticks transmitted through public memory. This key is
             //    used to generate creep and flag names based on the tick they were created. Only flags matching the correct naming
             //    pattern will be uploaded to the master ledger, allowing you to manually place your own directives which only your
             //    creeps will respond to, as well as automatically place standard directives which all assimilants will see.
             //
             // Q: Why is this file obfuscated?
             //
             // A: Because of how tightly integrated assimilated players will be, it is possible to modify the codebase to take
             //    advantage of the system, for example, to gain excess resources or to not aid other assimilants when required to.
             //    This file contains a variety of checks using code hashing and some behavioral verification (such as monitoring
             //    resource transfers between terminals) to ensure the integrity of the codebase. Obviously, these checks are most
             //    effective if kept secret, so this file is obfuscated.
             //
             // Q: What if I want to modify parts of the codebase?
             //
             // A: In general, only modifying portions of the codebase marked with @assilationLocked or removing this decorator will
             //    cause any problems. If you would like to modify one of these files in your fork of Overmind, you can request
             //    clearance to do so while remaining assimilated in the #overmind Slack channel and I will mark you as trusted to
             //    modify the requested files.
             //
             // Q: What happens if I modify this code?
             //
             // A: This code is self-defending, so any modification to it will likely break the script.
Object[_0x32b0('0x0')](exports,_0x32b0('0x1'),{'value':!![]});// javascript-obfuscator:disable
const sha256_1=require('../algorithms/sha256');// javascript-obfuscator:enable
const __lockedObjects__=[];const defaultAssimilatorMemory={};class _Assimilator{constructor(){}[_0x32b0('0x2')](_0x3e19b2){__lockedObjects__[_0x32b0('0x3')](_0x3e19b2);}[_0x32b0('0x4')](){let _0x204ecc=0x0;for(let _0xda659a of __lockedObjects__){let _0x26355f=JSON[_0x32b0('0x5')](''+_0xda659a)[_0x32b0('0x6')](/\s/g,'');let _0x558992=sha256_1[_0x32b0('0x7')](_0x26355f);_0x204ecc+=_0x558992[_0x32b0('0x8')]((_0x1c25aa,_0x42bf6e)=>0x2*_0x1c25aa+_0x42bf6e);}return'0x'+_0x204ecc[_0x32b0('0x9')](0x10);}}exports[_0x32b0('0xa')]=_Assimilator;