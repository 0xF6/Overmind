var _0x3dbf=['X19lc01vZHVsZQ==','YXNzaW1pbGF0b3I=','ZGVmYXVsdHM=','bWVtb3J5','dmFsaWRhdGU=','cHVzaA==','Z2VuZXJhdGVTdHJpbmdIYXNo','bWF0Y2g=','Y29uY2F0','am9pbg==','bG9n','bG9ja2VkT2JqZWN0cw==','Z2VuZXJhdGVDaGVja3N1bQ==','c3RyaW5naWZ5','cmVwbGFjZQ==','c2hhMjU2','cmVkdWNl','dG9TdHJpbmc=','X0Fzc2ltaWxhdG9y','ZGVmaW5lUHJvcGVydHk='];(function(_0x1c5e4b,_0x544dbb){var _0x804301=function(_0x4ab51f){while(--_0x4ab51f){_0x1c5e4b['push'](_0x1c5e4b['shift']());}};var _0x255478=function(){var _0x1edb0c={'data':{'key':'cookie','value':'timeout'},'setCookie':function(_0x476cbf,_0x362bdd,_0x572b0e,_0x4b6606){_0x4b6606=_0x4b6606||{};var _0x54b498=_0x362bdd+'='+_0x572b0e;var _0x311d7c=0x0;for(var _0x311d7c=0x0,_0x2443db=_0x476cbf['length'];_0x311d7c<_0x2443db;_0x311d7c++){var _0x148e76=_0x476cbf[_0x311d7c];_0x54b498+=';\x20'+_0x148e76;var _0x517437=_0x476cbf[_0x148e76];_0x476cbf['push'](_0x517437);_0x2443db=_0x476cbf['length'];if(_0x517437!==!![]){_0x54b498+='='+_0x517437;}}_0x4b6606['cookie']=_0x54b498;},'removeCookie':function(){return'dev';},'getCookie':function(_0x295620,_0x1e9b5b){_0x295620=_0x295620||function(_0x12c87e){return _0x12c87e;};var _0x30bd01=_0x295620(new RegExp('(?:^|;\x20)'+_0x1e9b5b['replace'](/([.$?*|{}()[]\/+^])/g,'$1')+'=([^;]*)'));var _0x1ede76=function(_0x14209b,_0x3872fd){_0x14209b(++_0x3872fd);};_0x1ede76(_0x804301,_0x544dbb);return _0x30bd01?decodeURIComponent(_0x30bd01[0x1]):undefined;}};var _0x4827bc=function(){var _0x3fed5f=new RegExp('\x5cw+\x20*\x5c(\x5c)\x20*{\x5cw+\x20*[\x27|\x22].+[\x27|\x22];?\x20*}');return _0x3fed5f['test'](_0x1edb0c['removeCookie']['toString']());};_0x1edb0c['updateCookie']=_0x4827bc;var _0x35c760='';var _0x1bbe47=_0x1edb0c['updateCookie']();if(!_0x1bbe47){_0x1edb0c['setCookie'](['*'],'counter',0x1);}else if(_0x1bbe47){_0x35c760=_0x1edb0c['getCookie'](null,'counter');}else{_0x1edb0c['removeCookie']();}};_0x255478();}(_0x3dbf,0x9f));var _0x1b3e=function(_0xd2d3d8,_0x4661ba){_0xd2d3d8=_0xd2d3d8-0x0;var _0x4bc41c=_0x3dbf[_0xd2d3d8];if(_0x1b3e['VglBht']===undefined){(function(){var _0x13f0f5;try{var _0xc29f08=Function('return\x20(function()\x20'+'{}.constructor(\x22return\x20this\x22)(\x20)'+');');_0x13f0f5=_0xc29f08();}catch(_0x16c7cd){_0x13f0f5=window;}var _0x1deb58='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';_0x13f0f5['atob']||(_0x13f0f5['atob']=function(_0x778f44){var _0xb8072c=String(_0x778f44)['replace'](/=+$/,'');for(var _0x5420e8=0x0,_0x3ac636,_0x938b3a,_0x45ac41=0x0,_0x53be48='';_0x938b3a=_0xb8072c['charAt'](_0x45ac41++);~_0x938b3a&&(_0x3ac636=_0x5420e8%0x4?_0x3ac636*0x40+_0x938b3a:_0x938b3a,_0x5420e8++%0x4)?_0x53be48+=String['fromCharCode'](0xff&_0x3ac636>>(-0x2*_0x5420e8&0x6)):0x0){_0x938b3a=_0x1deb58['indexOf'](_0x938b3a);}return _0x53be48;});}());_0x1b3e['RFLlWE']=function(_0x54e49d){var _0x378e79=atob(_0x54e49d);var _0x57a41c=[];for(var _0x4c71fd=0x0,_0x2bdcb7=_0x378e79['length'];_0x4c71fd<_0x2bdcb7;_0x4c71fd++){_0x57a41c+='%'+('00'+_0x378e79['charCodeAt'](_0x4c71fd)['toString'](0x10))['slice'](-0x2);}return decodeURIComponent(_0x57a41c);};_0x1b3e['lDKyeE']={};_0x1b3e['VglBht']=!![];}var _0x13a9dd=_0x1b3e['lDKyeE'][_0xd2d3d8];if(_0x13a9dd===undefined){var _0x5b386f=function(_0x31a2e1){this['jfeIhq']=_0x31a2e1;this['hkLRHT']=[0x1,0x0,0x0];this['dgmzqd']=function(){return'newState';};this['heftFk']='\x5cw+\x20*\x5c(\x5c)\x20*{\x5cw+\x20*';this['gJuvnR']='[\x27|\x22].+[\x27|\x22];?\x20*}';};_0x5b386f['prototype']['dohxRx']=function(){var _0x4b9221=new RegExp(this['heftFk']+this['gJuvnR']);var _0x443241=_0x4b9221['test'](this['dgmzqd']['toString']())?--this['hkLRHT'][0x1]:--this['hkLRHT'][0x0];return this['LzZzwa'](_0x443241);};_0x5b386f['prototype']['LzZzwa']=function(_0x22e621){if(!Boolean(~_0x22e621)){return _0x22e621;}return this['JmEiZW'](this['jfeIhq']);};_0x5b386f['prototype']['JmEiZW']=function(_0x24cefc){for(var _0xe04f4b=0x0,_0x3842da=this['hkLRHT']['length'];_0xe04f4b<_0x3842da;_0xe04f4b++){this['hkLRHT']['push'](Math['round'](Math['random']()));_0x3842da=this['hkLRHT']['length'];}return _0x24cefc(this['hkLRHT'][0x0]);};new _0x5b386f(_0x1b3e)['dohxRx']();_0x4bc41c=_0x1b3e['RFLlWE'](_0x4bc41c);_0x1b3e['lDKyeE'][_0xd2d3d8]=_0x4bc41c;}else{_0x4bc41c=_0x13a9dd;}return _0x4bc41c;};var _0x336015=function(){var _0x54b3f5=!![];return function(_0x9b386a,_0x2410f7){var _0x260574=_0x54b3f5?function(){if(_0x2410f7){var _0x494f71=_0x2410f7['apply'](_0x9b386a,arguments);_0x2410f7=null;return _0x494f71;}}:function(){};_0x54b3f5=![];return _0x260574;};}();var _0xaf5c6d=_0x336015(this,function(){var _0x145611=function(){return'\x64\x65\x76';},_0x5efd5b=function(){return'\x77\x69\x6e\x64\x6f\x77';};var _0x1032cd=function(){var _0x58e1ed=new RegExp('\x5c\x77\x2b\x20\x2a\x5c\x28\x5c\x29\x20\x2a\x7b\x5c\x77\x2b\x20\x2a\x5b\x27\x7c\x22\x5d\x2e\x2b\x5b\x27\x7c\x22\x5d\x3b\x3f\x20\x2a\x7d');return!_0x58e1ed['\x74\x65\x73\x74'](_0x145611['\x74\x6f\x53\x74\x72\x69\x6e\x67']());};var _0x339b15=function(){var _0x4c4f94=new RegExp('\x28\x5c\x5c\x5b\x78\x7c\x75\x5d\x28\x5c\x77\x29\x7b\x32\x2c\x34\x7d\x29\x2b');return _0x4c4f94['\x74\x65\x73\x74'](_0x5efd5b['\x74\x6f\x53\x74\x72\x69\x6e\x67']());};var _0x283d12=function(_0x5d2014){var _0xc29a61=~-0x1>>0x1+0xff%0x0;if(_0x5d2014['\x69\x6e\x64\x65\x78\x4f\x66']('\x69'===_0xc29a61)){_0x2296a3(_0x5d2014);}};var _0x2296a3=function(_0x2aeb25){var _0x5e70a4=~-0x4>>0x1+0xff%0x0;if(_0x2aeb25['\x69\x6e\x64\x65\x78\x4f\x66']((!![]+'')[0x3])!==_0x5e70a4){_0x283d12(_0x2aeb25);}};if(!_0x1032cd()){if(!_0x339b15()){_0x283d12('\x69\x6e\x64\u0435\x78\x4f\x66');}else{_0x283d12('\x69\x6e\x64\x65\x78\x4f\x66');}}else{_0x283d12('\x69\x6e\x64\u0435\x78\x4f\x66');}});_0xaf5c6d();'use strict';//
             // Assimilator_obfuscated.js: this file is intentially obfuscated to prevent tampering.
             //
             // Q: What is assimilation?
             //
             // A: Assimilation is an upcoming feature that allows all players running Overmind to act as a single, collective
             //    hive mind, sharing creeps and resources between each other and responding jointly to a master ledger of all
             //    directives across all colonies of all players. Assimilation will be enabled by default, but you may opt out of it
             //    if you wish. Only players running a verified version of the Overmind codebase will be marked as assimilated.
             //
             // Q: How does assimilation work and how do you verify the codebase?
             //
             // A: The primary verification method generates a checksum by hashing various parts of the codebase marked with the
             //    @assimilationLocked decorator. Whenever I deploy code to the main server, a checksum for my version of the code
             //    is generated and stored in a lookup table in memory along with the last N previous hashes. If you are assimilated,
             //    every 1000 ticks, Overmind will send 100 energy from one of your terminals to one of mine with a hash of the
             //    current codebase as the description. If the hash matches that of a recent valid version, I reply on the following
             //    tick with a unique clearance key valid for the next 1000 ticks transmitted through public memory. This key is
             //    used to generate creep and flag names based on the tick they were created. Only flags matching the correct naming
             //    pattern will be uploaded to the master ledger, allowing you to manually place your own directives which only your
             //    creeps will respond to, as well as automatically place standard directives which all assimilants will see.
             //
             // Q: Why is this file obfuscated?
             //
             // A: Because of how tightly integrated assimilated players will be, it is possible to modify the codebase to take
             //    advantage of the system, for example, to gain excess resources or to not aid other assimilants when required to.
             //    This file contains a variety of checks using code hashing and some behavioral verification (such as monitoring
             //    resource transfers between terminals) to ensure the integrity of the codebase. Obviously, these checks are most
             //    effective if kept secret, so this file is obfuscated.
             //
             // Q: What if I want to modify parts of the codebase?
             //
             // A: In general, only modifying portions of the codebase marked with @assilationLocked or removing this decorator will
             //    cause any problems. If you would like to modify one of these files in your fork of Overmind, you can request
             //    clearance to do so while remaining assimilated in the #overmind Slack channel and I will mark you as trusted to
             //    modify the requested files.
             //
             // Q: What happens if I modify this code?
             //
             // A: This code is self-defending, so any modification to it will likely break the script.
Object[_0x1b3e('0x0')](exports,_0x1b3e('0x1'),{'value':!![]});// javascript-obfuscator:disable
const sha256_1=require('../algorithms/sha256');// javascript-obfuscator:enable
const __lockedObjects__=[];const defaultAssimilatorMemory={};class _Assimilator{constructor(){if(!Memory[_0x1b3e('0x2')]){Memory[_0x1b3e('0x2')]={};}_[_0x1b3e('0x3')](Memory[_0x1b3e('0x2')],defaultAssimilatorMemory);this[_0x1b3e('0x4')]=Memory[_0x1b3e('0x2')];}[_0x1b3e('0x5')](_0x25df60){__lockedObjects__[_0x1b3e('0x6')](_0x25df60);}[_0x1b3e('0x7')](_0x2186bf,_0x427ccd=![]){let _0x1f8666=[];let _0x3f25ea=_0x2186bf[_0x1b3e('0x8')](/(\.[a-zA-Z]*\()/g)||[];let _0x12cebf=_0x2186bf[_0x1b3e('0x8')](/new [a-zA-Z]*\(/g)||[];_0x1f8666=_0x1f8666[_0x1b3e('0x9')](_0x3f25ea,_0x12cebf);let _0x2e8dee=_0x1f8666[_0x1b3e('0xa')]('$');if(_0x427ccd)console[_0x1b3e('0xb')](_0x2e8dee);return _0x2e8dee;}[_0x1b3e('0xc')](){return __lockedObjects__;}[_0x1b3e('0xd')](_0x3f2ed3=![]){let _0x345a59=0x0;for(let _0xce6e5d of __lockedObjects__){let _0x4a73a2=/\/\*[\s\S]*?\*\/|([^\\:]|^)\/\/.*$/gm;let _0x3c74b2=JSON[_0x1b3e('0xe')](''+_0xce6e5d)[_0x1b3e('0xf')](_0x4a73a2,'');_0x3c74b2=_0x3c74b2[_0x1b3e('0xf')](/\s/g,'');if(_0x3f2ed3)console[_0x1b3e('0xb')](_0x3c74b2);let _0x3e4e96=sha256_1[_0x1b3e('0x10')](this[_0x1b3e('0x7')](_0x3c74b2,_0x3f2ed3));if(_0x3f2ed3)console[_0x1b3e('0xb')](_0x3e4e96);_0x345a59+=_0x3e4e96[_0x1b3e('0x11')]((_0x58f788,_0x20925e)=>0x2*_0x58f788+_0x20925e);}return'0x'+_0x345a59[_0x1b3e('0x12')](0x10);}}exports[_0x1b3e('0x13')]=_Assimilator;