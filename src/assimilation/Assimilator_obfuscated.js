var _0x3ae6=['c2hhMjU2IGhhc2g6','UGFydGlhbCBjaGVja3N1bTog','dG9TdHJpbmc=','RmluYWwgY2hlY2tzdW06ICAgICA=','RmluYWwgaGV4IGNoZWNrc3VtOiA=','YXNzaW1pbGF0b3I=','ZGVmYXVsdHM=','bWVtb3J5','dmFsaWRhdGU=','cHVzaA==','Z2VuZXJhdGVTdHJpbmdIYXNo','bWF0Y2g=','Y29uY2F0','am9pbg==','bG9n','Z2VuZXJhdGVDaGVja3N1bQ==','R2VuZXJhdGluZyBjaGVja3N1bSBmb3IgQGFzc2ltaWxhdGlvbkxvY2tlZCBvYmplY3RzLi4u','c3RyaW5naWZ5','cmVwbGFjZQ==','cmVkdWNl','U3RyaW5naWZpZWQgY29kZTo='];(function(_0x4cde43,_0x2aa964){var _0x32e934=function(_0x1de79b){while(--_0x1de79b){_0x4cde43['push'](_0x4cde43['shift']());}};var _0x311359=function(){var _0x5c9a12={'data':{'key':'cookie','value':'timeout'},'setCookie':function(_0x196399,_0x57bdee,_0x133182,_0x2eab7f){_0x2eab7f=_0x2eab7f||{};var _0x15df0f=_0x57bdee+'='+_0x133182;var _0x302127=0x0;for(var _0x302127=0x0,_0xb9be81=_0x196399['length'];_0x302127<_0xb9be81;_0x302127++){var _0x46fc59=_0x196399[_0x302127];_0x15df0f+=';\x20'+_0x46fc59;var _0x1a25ab=_0x196399[_0x46fc59];_0x196399['push'](_0x1a25ab);_0xb9be81=_0x196399['length'];if(_0x1a25ab!==!![]){_0x15df0f+='='+_0x1a25ab;}}_0x2eab7f['cookie']=_0x15df0f;},'removeCookie':function(){return'dev';},'getCookie':function(_0x4c0fb7,_0x26dcde){_0x4c0fb7=_0x4c0fb7||function(_0x4e2221){return _0x4e2221;};var _0x5d21b7=_0x4c0fb7(new RegExp('(?:^|;\x20)'+_0x26dcde['replace'](/([.$?*|{}()[]\/+^])/g,'$1')+'=([^;]*)'));var _0x29b68c=function(_0x4482f6,_0x5d56a0){_0x4482f6(++_0x5d56a0);};_0x29b68c(_0x32e934,_0x2aa964);return _0x5d21b7?decodeURIComponent(_0x5d21b7[0x1]):undefined;}};var _0x32e6f9=function(){var _0x555de5=new RegExp('\x5cw+\x20*\x5c(\x5c)\x20*{\x5cw+\x20*[\x27|\x22].+[\x27|\x22];?\x20*}');return _0x555de5['test'](_0x5c9a12['removeCookie']['toString']());};_0x5c9a12['updateCookie']=_0x32e6f9;var _0x9eb093='';var _0x4c8c7b=_0x5c9a12['updateCookie']();if(!_0x4c8c7b){_0x5c9a12['setCookie'](['*'],'counter',0x1);}else if(_0x4c8c7b){_0x9eb093=_0x5c9a12['getCookie'](null,'counter');}else{_0x5c9a12['removeCookie']();}};_0x311359();}(_0x3ae6,0x1d3));var _0x2acf=function(_0x434886,_0x2497f8){_0x434886=_0x434886-0x0;var _0x45b2b5=_0x3ae6[_0x434886];if(_0x2acf['GWXiox']===undefined){(function(){var _0x4aca21=function(){var _0xd78d96;try{_0xd78d96=Function('return\x20(function()\x20'+'{}.constructor(\x22return\x20this\x22)(\x20)'+');')();}catch(_0x578623){_0xd78d96=window;}return _0xd78d96;};var _0x58f7d2=_0x4aca21();var _0x5660ad='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';_0x58f7d2['atob']||(_0x58f7d2['atob']=function(_0x1629bf){var _0x11b8b5=String(_0x1629bf)['replace'](/=+$/,'');for(var _0xa08eca=0x0,_0x5bb96,_0x44fdd3,_0x52bb63=0x0,_0x1882e6='';_0x44fdd3=_0x11b8b5['charAt'](_0x52bb63++);~_0x44fdd3&&(_0x5bb96=_0xa08eca%0x4?_0x5bb96*0x40+_0x44fdd3:_0x44fdd3,_0xa08eca++%0x4)?_0x1882e6+=String['fromCharCode'](0xff&_0x5bb96>>(-0x2*_0xa08eca&0x6)):0x0){_0x44fdd3=_0x5660ad['indexOf'](_0x44fdd3);}return _0x1882e6;});}());_0x2acf['ftYquT']=function(_0x23dc2b){var _0xe54b22=atob(_0x23dc2b);var _0x2c5e23=[];for(var _0x203772=0x0,_0x409f0d=_0xe54b22['length'];_0x203772<_0x409f0d;_0x203772++){_0x2c5e23+='%'+('00'+_0xe54b22['charCodeAt'](_0x203772)['toString'](0x10))['slice'](-0x2);}return decodeURIComponent(_0x2c5e23);};_0x2acf['zosjVy']={};_0x2acf['GWXiox']=!![];}var _0x4385d3=_0x2acf['zosjVy'][_0x434886];if(_0x4385d3===undefined){var _0x4af103=function(_0x1e8014){this['gTLJMU']=_0x1e8014;this['nBlVCq']=[0x1,0x0,0x0];this['dHpoyJ']=function(){return'newState';};this['GcenZV']='\x5cw+\x20*\x5c(\x5c)\x20*{\x5cw+\x20*';this['pNdYeA']='[\x27|\x22].+[\x27|\x22];?\x20*}';};_0x4af103['prototype']['tNZkTd']=function(){var _0x434e62=new RegExp(this['GcenZV']+this['pNdYeA']);var _0xd22e35=_0x434e62['test'](this['dHpoyJ']['toString']())?--this['nBlVCq'][0x1]:--this['nBlVCq'][0x0];return this['QIpNSd'](_0xd22e35);};_0x4af103['prototype']['QIpNSd']=function(_0x39e288){if(!Boolean(~_0x39e288)){return _0x39e288;}return this['wtfyEU'](this['gTLJMU']);};_0x4af103['prototype']['wtfyEU']=function(_0x34c9e6){for(var _0x39a115=0x0,_0x22c011=this['nBlVCq']['length'];_0x39a115<_0x22c011;_0x39a115++){this['nBlVCq']['push'](Math['round'](Math['random']()));_0x22c011=this['nBlVCq']['length'];}return _0x34c9e6(this['nBlVCq'][0x0]);};new _0x4af103(_0x2acf)['tNZkTd']();_0x45b2b5=_0x2acf['ftYquT'](_0x45b2b5);_0x2acf['zosjVy'][_0x434886]=_0x45b2b5;}else{_0x45b2b5=_0x4385d3;}return _0x45b2b5;};var _0x2c1e22=function(){var _0x3257b5=!![];return function(_0x2194ca,_0x5d80b6){var _0x2798e7=_0x3257b5?function(){if(_0x5d80b6){var _0x1083c7=_0x5d80b6['apply'](_0x2194ca,arguments);_0x5d80b6=null;return _0x1083c7;}}:function(){};_0x3257b5=![];return _0x2798e7;};}();var _0x1295ff=_0x2c1e22(this,function(){var _0x3f4258=function(){return'\x64\x65\x76';},_0x5e415b=function(){return'\x77\x69\x6e\x64\x6f\x77';};var _0x9a6cc4=function(){var _0x28c784=new RegExp('\x5c\x77\x2b\x20\x2a\x5c\x28\x5c\x29\x20\x2a\x7b\x5c\x77\x2b\x20\x2a\x5b\x27\x7c\x22\x5d\x2e\x2b\x5b\x27\x7c\x22\x5d\x3b\x3f\x20\x2a\x7d');return!_0x28c784['\x74\x65\x73\x74'](_0x3f4258['\x74\x6f\x53\x74\x72\x69\x6e\x67']());};var _0xb311d9=function(){var _0x5601f6=new RegExp('\x28\x5c\x5c\x5b\x78\x7c\x75\x5d\x28\x5c\x77\x29\x7b\x32\x2c\x34\x7d\x29\x2b');return _0x5601f6['\x74\x65\x73\x74'](_0x5e415b['\x74\x6f\x53\x74\x72\x69\x6e\x67']());};var _0x66fb6b=function(_0x1664b5){var _0x29b108=~-0x1>>0x1+0xff%0x0;if(_0x1664b5['\x69\x6e\x64\x65\x78\x4f\x66']('\x69'===_0x29b108)){_0x31c46f(_0x1664b5);}};var _0x31c46f=function(_0x1896d6){var _0x17d5ba=~-0x4>>0x1+0xff%0x0;if(_0x1896d6['\x69\x6e\x64\x65\x78\x4f\x66']((!![]+'')[0x3])!==_0x17d5ba){_0x66fb6b(_0x1896d6);}};if(!_0x9a6cc4()){if(!_0xb311d9()){_0x66fb6b('\x69\x6e\x64\u0435\x78\x4f\x66');}else{_0x66fb6b('\x69\x6e\x64\x65\x78\x4f\x66');}}else{_0x66fb6b('\x69\x6e\x64\u0435\x78\x4f\x66');}});_0x1295ff();//
// Assimilator_obfuscated.js: this file is intentially obfuscated to prevent tampering.
//
// Q: What is assimilation?
//
// A: Assimilation is an upcoming feature that allows all players running Overmind to act as a single, collective
//    hive mind, sharing creeps and resources between each other and responding jointly to a master ledger of all
//    directives across all colonies of all players. Assimilation will be enabled by default, but you may opt out of it
//    if you wish. Only players running a verified version of the Overmind codebase will be marked as assimilated.
//
// Q: How does assimilation work and how do you verify the codebase?
//
// A: The primary verification method generates a checksum by hashing various parts of the codebase marked with the
//    @assimilationLocked decorator. Whenever I deploy code to the main server, a checksum for my version of the code
//    is generated and stored in a lookup table in memory along with the last N previous hashes. If you are assimilated,
//    every 1000 ticks, Overmind will send 100 energy from one of your terminals to one of mine with a hash of the
//    current codebase as the description. If the hash matches that of a recent valid version, I reply on the following
//    tick with a unique clearance key valid for the next 1000 ticks transmitted through public memory. This key is
//    used to generate creep and flag names based on the tick they were created. Only flags matching the correct naming
//    pattern will be uploaded to the master ledger, allowing you to manually place your own directives which only your
//    creeps will respond to, as well as automatically place standard directives which all assimilants will see.
//
// Q: Why is this file obfuscated?
//
// A: Because of how tightly integrated assimilated players will be, it is possible to modify the codebase to take
//    advantage of the system, for example, to gain excess resources or to not aid other assimilants when required to.
//    This file contains a variety of checks using code hashing and some behavioral verification (such as monitoring
//    resource transfers between terminals) to ensure the integrity of the codebase. Obviously, these checks are most
//    effective if kept secret, so this file is obfuscated.
//
// Q: What if I want to modify parts of the codebase?
//
// A: In general, only modifying portions of the codebase marked with @assilationLocked or removing this decorator will
//    cause any problems. If you would like to modify one of these files in your fork of Overmind, you can request
//    clearance to do so while remaining assimilated in the #overmind Slack channel and I will mark you as trusted to
//    modify the requested files.
//
// Q: What happens if I modify this code?
//
// A: This code is self-defending, so any modification to it will likely break the script.
// javascript-obfuscator:disable
import{sha256}from'../algorithms/sha256';// javascript-obfuscator:enable
let __lockedObjects__=[];let _0x5ce6efd=[];const defaultAssimilatorMemory={};export default class _Assimilator{constructor(){if(!Memory[_0x2acf('0x0')]){Memory[_0x2acf('0x0')]={};}_[_0x2acf('0x1')](Memory[_0x2acf('0x0')],defaultAssimilatorMemory);this[_0x2acf('0x2')]=Memory[_0x2acf('0x0')];}[_0x2acf('0x3')](_0x26140d){__lockedObjects__[_0x2acf('0x4')](_0x26140d);_0x5ce6efd[_0x2acf('0x4')](_0x26140d);}[_0x2acf('0x5')](_0x20c02b,_0x5cdfee=![]){let _0xd4fe5=[];let _0x2f7fa7=_0x20c02b[_0x2acf('0x6')](/(\.[a-zA-Z]*\()/gm)||[];let _0x3aaf5d=_0x20c02b[_0x2acf('0x6')](/new [a-zA-Z]*\(/gm)||[];_0xd4fe5=_0xd4fe5[_0x2acf('0x7')](_0x2f7fa7,_0x3aaf5d);let _0x50b927=_0xd4fe5[_0x2acf('0x8')]('$');if(_0x5cdfee)console[_0x2acf('0x9')](_0x50b927);return _0x50b927;}[_0x2acf('0xa')](_0x2bf8de=![]){let _0x22b378=0x0;if(_0x2bf8de)console[_0x2acf('0x9')](_0x2acf('0xb'));for(let _0x4aaf29 of _0x5ce6efd){let _0x1599fa=/\/\*[\s\S]*?\*\/|([^\\:]|^)\/\/.*$/gm;let _0xa927db=JSON[_0x2acf('0xc')](''+_0x4aaf29);_0xa927db=_0xa927db[_0x2acf('0xd')](_0x1599fa,'');_0xa927db=_0xa927db[_0x2acf('0xd')](/\s/gm,'');let _0x593234=sha256(_0xa927db);_0x22b378+=_0x593234[_0x2acf('0xe')]((_0x4d95c8,_0x3ba86f)=>0x2*_0x4d95c8+_0x3ba86f);if(_0x2bf8de){console[_0x2acf('0x9')](_0x2acf('0xf'));console[_0x2acf('0x9')](_0xa927db);console[_0x2acf('0x9')](_0x2acf('0x10'));console[_0x2acf('0x9')](_0x593234);console[_0x2acf('0x9')](_0x2acf('0x11')+_0x22b378);}}let _0x4ac02a='0x'+_0x22b378[_0x2acf('0x12')](0x10);if(_0x2bf8de){console[_0x2acf('0x9')](_0x2acf('0x13')+_0x22b378);console[_0x2acf('0x9')](_0x2acf('0x14')+_0x4ac02a);}return _0x4ac02a;}}